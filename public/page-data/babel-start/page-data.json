{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/babel-start",
    "result": {"data":{"strapiArticles":{"id":"Articles_439","title":"学习Babel，从这里开始！","description":"浏览器无法运行的脚本代码，譬如：ECMAScript 2015+、JSX、TypeScript 等，可以用 Babel 把这些代码转换成浏览器可运行的 JavaScript 代码。\n","content":"##### 一、Babel 解决什么问题？\n\n###### 1、问题\n\n浏览器无法运行 `ECMAScript 2015+`、`JSX`、`TypeScript` 等语法编写的脚本代码。\n\n- `ECMAScript 2015+`  ：ECMAScript 在2015年发布新的 JavaScript 语法；\n- `JSX`  ：用在 React 框架中脚本语言；[详细说明，看这里！](https://learn-anything.cn/react-jsx)\n- `TypeScript`  ： JavaScript 的扩展语法，用于数据类型、逻辑检查等；[详细说明，看这里！](https://learn-anything.cn/type-script-start)\n\n---\n\n###### 2、解决方案\n\nBabel 可以把这些代码 转换成 浏览器可以运行的 JavaScript 代码。ES2015、TypeScript、JSX 等不仅可以提升开发效率，还可以解决原生JavaScript语法无法处理的一些编程问题。\n\n---\n\n##### 二、运行原理简介\n\n用 Babel 进行代码转换，需要涉及三个模块：【运行程序】+【配置】+【Plugins/Presets】。\n\n- 运行程序：主要指 @babel/core 和 @babel/cli；\n- 配置文件：转换中的一些特定选项的设定；\n- Plugins、Presets ：决定哪些代码需要被转换；\n\n---\n\n##### 三、一个简单案例\n\n用 ES2015 语法编写的项目，怎么用 Babel 转换成浏览器可以运行的代码？\n\n1. 新建项目文件夹：learn-babel；\n\n2. 新建文件夹 `learn-babel/src` 和 新建并复制下面代码到 `learn-babel/src/test.js` 文件；\n\n   ```js\n   [1, 2, 3].map(n => n + 1);\n   ```\n   \n3. 新建文件夹 `learn-babel/lib` ，用于放置转换后代码；\n\n4. 新建配置文件 `learn-babel/babel.config.json`，复制下面配置信息\n\n   ```json\n   {\n       \"presets\": [\n           \"@babel/preset-env\"\n       ]\n   }\n   ```\n\n5. 安装 Babel\n\n   ```\n   cd learn-babel\n   npm install --save-dev @babel/core @babel/cli @babel/preset-env\n   ```\n\n6. 转换代码(下面两种方式都可以)\n\n   ```shell\n   # 方法一\n   ./node_modules/.bin/babel src --out-dir lib\n   \n   # 方法二\n   npx babel src --out-dir lib\n   ```\n\n7. 查看结果\n\n   可以在 lib 目录下看到，有个新文件 `test.js` 生成，其中 箭头函数的新语法 被转换为 普通函数 。\n\n   ```js\n   \"use strict\";\n   \n   [1, 2, 3].map(function (n) {\n     return n + 1;\n   });\n   ```\n\n---\n\n##### 四、核心模块\n\n###### 1、@babel/core\n\n包含 Babel 所有核心功能，还提供了API，可在代码中直接调用进行代码转换。\n\n```shell\n# 安装\nnpm install --save-dev @babel/core\n\n# 使用\nconst babel = require(\"@babel/core\");\nbabel.transformSync(\"code\", optionsObject);\n```\n\n---\n\n###### 2、@babel/cli\n\n一个可执行程序，可以在终端中直接调用进行代码转换；\n\n```shell\n# 安装\nnpm install --save-dev @babel/core @babel/cli\n\n# 转换src目录下用ES2015语法代码，输出到lib目录\n./node_modules/.bin/babel src --out-dir lib --presets=@babel/env\n\n# ./node_modules/.bin/babel 可以用 npx 代替\nnpx src --out-dir lib --presets=@babel/env\n```\n\n---\n\n##### 五、Plugins\n\nPlugins 和 Presets 告诉 Babel 应该转换哪些代码。一个Plugin实现一个代码转换功能，多个Plugin组合在一起就称之为Presets。\n\n使用 plugin-transform-arrow-functions 插件转换 ES2015+ 中的箭头函数语法为浏览器可执行的代码。\n\n```shell\nnpm install --save-dev @babel/plugin-transform-arrow-functions\n\n./node_modules/.bin/babel src --out-dir lib --plugins=@babel/plugin-transform-arrow-functions\n```\n\n- [plugins  -  官方文档](https://babeljs.io/docs/en/plugins)\n\n---\n\n##### 六、Presets\n\n一个Plugin实现一个代码转换功能，多个Plugin组合在一起就称之为Presets。官方提供了 4个 Presets，可以直接使用。\n\n###### 1、preset-env\n\n功能：用于转换  ES2015+ 所有语法。\n\n```shell\nnpm install --save-dev @babel/preset-env\n\n./node_modules/.bin/babel src --out-dir lib --presets=@babel/env\n```\n\n- [babel-preset-env  -  官方文档](https://babeljs.io/docs/en/babel-preset-env)\n\n---\n\n###### 2、preset-react\n\n功能 ：用于 React 项目。\n\n- [怎么 在React 项目中使用 Babel 来转换 JSX代码？](https://learn-anything.cn/react-load#%E6%B3%95%E4%BA%8C%E5%AE%89%E8%A3%85babel%E5%88%B0%E9%A1%B9%E7%9B%AE)\n\n- [babel-preset-react  -  官方文档](https://babeljs.io/docs/en/babel-preset-react)\n\n---\n\n###### 3、preset-typescript\n\n功能 ：用于转换 TypeScript 代码。\n\n- [babel-preset-typescript  -  官方文档](https://babeljs.io/docs/en/babel-preset-typescript)\n\n---\n\n###### 4、preset-flow\n\n功能  ：用于转换 flow 代码。\n\n- [babel-preset-flow  -  官方文档](https://babeljs.io/docs/en/babel-preset-flow)\n\n---\n\n##### 七、配置文件\n\n###### 1、分类\n\n配置文件分为两种：基于项目的配置文件、基于文件的项目配置。\n\n- 基于项目\n\n  Babel 7.x  版本开始，Babel运行时会默认以目录下的 babel.config.json 作为配置文件，或者其他可支持的后缀 `.js`, `.cjs`, `.mjs` ， 下面是`.json` 后缀的配置格式：\n\n  ```json\n  {\n    \"presets\": [...],\n    \"plugins\": [...]\n  }\n  ```\n\n- 基于文件，有两种使用情况：\n\n  - 文件名为 `.babelrc.json` ，还有其他可用后缀 ：`.babelrc`, `.js`, `.cjs`, `.mjs` 。\n\n\n  - 在  `package.json` 文件中配置 babel，如下：\n\n    ```json\n    {\n      \"name\": \"my-package\",\n      \"version\": \"1.0.0\",\n      \"babel\": {\n        \"presets\": [ ... ],\n        \"plugins\": [ ... ],\n      }\n    }\n    ```\n\n\n- .js 后缀的说明\n\n  JavaScript 配置文件可以导出一个对象，也可以导出一个函数，调用时将返回生成的配置。返回函数的配置被赋予了一些特殊的权力，因为它们可以访问 Babel 本身公开的 API。配置格式如下：\n\n  ```js\n  module.exports = function (api) {\n    api.cache(true);\n  \n    const presets = [ ... ];\n    const plugins = [ ... ];\n  \n    return {\n      presets,\n      plugins\n    };\n  }\n  ```\n\n---\n\n###### 2、配置选项\n\n配置文件的选项分为两个类型：\n\n- 配置项目的相关属性。[options  -   官方文档](https://babeljs.io/docs/en/options)\n- 配置 Plugin 或 Preset 的相关属性，需要找对应文档查看哪些属性可以设置。\n\n---\n\n##### 八、参考文档\n\n- [Babel  -  官网](https://babeljs.io/)\n- [Babel  -  官方文档](https://babeljs.io/docs/en/)\n- [怎么将Babel应用在各种平台？ -  官方文档](https://babeljs.io/setup.html)\n\n- [configuration  -  官方文档](https://babeljs.io/docs/en/configuration)\n- [presets  -  官方文档](https://babeljs.io/docs/en/presets)\n\n","url":"https://learn-anything.cn/babel-start","published_at":"2021-12-06T13:04:55.000Z","tags":[{"name":"Babel","slug":"babel"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"学习Babel，从这里开始！","slug":"babel-start"}},
    "staticQueryHashes": ["63159454"]}
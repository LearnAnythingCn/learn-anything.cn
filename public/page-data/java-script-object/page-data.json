{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-object",
    "result": {"data":{"strapiArticles":{"id":"Articles_514","title":"详解JavaScript的Object对象","description":"Object 是 JavaScript 的一种 数据类型 ，用于存储各种键值集合和更复杂的实体，几乎所有对象都是  `Object`  类型的实例，它们都会从  `Object.prototype`  继承属性和方法，虽然大部分属性都会被覆盖（shadowed）或者说被重写了（overridden）。","content":"##### 一、Object 是什么？\n\nObject 是 JavaScript 的一种 数据类型 ，用于存储各种键值集合和更复杂的实体，几乎所有对象都是  `Object`  类型的实例，它们都会从  `Object.prototype`  继承属性和方法，虽然大部分属性都会被覆盖（shadowed）或者说被重写了（overridden）。\n\n一个对象就是一系列属性的集合，属性包括名字和值。如果属性值是函数，那么称之为方法。\n\n---\n\n###### 1、创建新对象\n\n- 法一：使用 对象初始化器 创建对象\n\n```js\nvar myCar = {\n  name: \"john\",\n  age: 22\n}\n```\n\n- 法二：使用 new 关键字创建对象\n\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nvar mycar = new Car(\"Eagle\", \"Talon TSi\", 1993);\n```\n\n- 法三：使用 Object.create 创建对象\n\n```js\n// Animal properties and method encapsulation\nvar Animal = {\n  type: \"Invertebrates\", // 属性默认值\n  displayType : function() {  // 用于显示type属性的方法\n    console.log(this.type);\n  }\n}\n\n// 创建一种新的动物——animal1\nvar animal1 = Object.create(Animal);\nanimal1.displayType(); // Output:Invertebrates\n```\n\n---\n\n###### 2、设置和删除属性\n\n```js\n// 3中设置属性的方式\nvar myCar = new Object();\nmyCar.make = \"Ford\";\nmyCar[\"model\"] = \"Mustang\";\nvar propertyName = \"other\";\nmyCar[propertyName] = \"title\";\nconsole.log(myCar);\n\n// 删除属性\ndelete myCar.make;\n```\n\n---\n\n###### 3、遍历对象属性\n\n三种方式遍历对象中属性。\n\n```js\nvar myCar = {\n  name:\"john\",\n  age:22\n}\n\n// 法一：\nfunction showProps(obj, objName) {\n  var result = \"\";\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n        result += objName + \".\" + i + \" = \" + obj[i] + \"\\n\";\n    }\n  }\n  return result;\n}\nconsole.log(showProps(myCar, \"myCar\")); \n\n// 法二\nconsole.log(Object.keys(myCar));\n// 法三\nconsole.log(Object.getOwnPropertyNames(myCar));\n```\n\n---\n\n###### 4、定义方法\n\n用函数作为对象的属性值，称之为方法。[set、get等更多内容，看这里！](https://learn-anything.cn/java-script-function)\n\n```js\nvar myObj = {\n  myMethod: function(params) {\n    // ...do something\n  }\n\n  // 或者 这样写也可以\n\n  myOtherMethod(params) {\n    // ...do something else\n  }\n};\n```\n\n---\n\n###### 5、对象比较\n\n两个对象实例永远不会相等，即时他们的属性完全相同。\n\n```js\n// 两个变量, 两个具有同样的属性、但不相同的对象\nvar fruit = {name: \"apple\"};\nvar fruitbear = {name: \"apple\"};\nfruit == fruitbear // return false\nfruit === fruitbear // return false\n\n// 两个变量, 同一个对象\nvar fruit = {name: \"apple\"};\nvar fruitbear = fruit;  \nfruit == fruitbear // return true\nfruit === fruitbear // return true\n```\n\n---\n\n##### 二、Object 常用方法\n\n###### 1、Object.defineProperty\n\n功能：增加或修改对象的属性值。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n```js\n// 1、语法\nObject.defineProperty(obj, prop, descriptor)\n\n// 2、使用方法\nconst object1 = {};\nObject.defineProperty(object1, 'property1', {\n  value: 42,\n  writable: false\n});\n\nobject1.property1 = 77;\n// throws an error in strict mode\nconsole.log(object1.property1);\n// expected output: 42\n```\n\n---\n\n###### 2、Object.assign\n\n功能：通过复制一个或多个对象来创建一个新的对象。。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n```js\n// 1、语法\nObject.assign(target, ...sources)\n\n// 2、复制一个对象\nconst obj = { a: 1 };\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n\n// 3、合并相同属性\nconst o1 = { a: 1, b: 1, c: 1 };\nconst o2 = { b: 2, c: 2 };\nconst o3 = { c: 3 };\nconst obj = Object.assign({}, o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\n\n// 4、继承和非可枚举属性不能拷贝\nconst obj = Object.create({foo: 1}, { // foo 是个继承属性。\n    bar: {\n        value: 2  // bar 是个不可枚举属性。\n    },\n    baz: {\n        value: 3,\n        enumerable: true  // baz 是个自身可枚举属性。\n    }\n});\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 }\n```\n\n---\n\n###### 3、Object.create\n\n功能：使用指定的对象和属性创建一个新对象。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n\n```js\nconst person = {\n  isHuman: false,\n  printIntroduction: function() {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = Object.create(person);\n\nme.name = 'Matthew'; // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true; // inherited properties can be overwritten\n\nme.printIntroduction();\n// expected output: \"My name is Matthew. Am I human? true\"\n```\n\n---\n\n###### 4、Object.getOwnPropertyDescriptor\n\n功能：返回指定对象的指定自定义属性信息，不存在的属性返回 undefined.\n\n```js\nconst obj = {\n  property1: 42\n};\nconst descriptor1 = Object.getOwnPropertyDescriptor(obj, 'property1');\nconsole.log(descriptor1);\n// 输出：{value: 42, writable: true, enumerable: true, configurable: true}\n```\n\n---\n\n##### 三、prototype (继承)\n\nJavaScript 的每个实例对象都有一个指向上一层对象的私有属性（称之为 `__proto__`） ，上一层对象又指向再上一层对象，就这样层层向上直至 `__proto__`  属性为 null ，最后这个对象就是 Object 。\n\n这种通过 `__proto__`  属性来链接对象的方法，称之为  **原型链** 。继承特性也是基于它。[详细内容，看这里！](https://learn-anything.cn/java-script-prototype)\n\n---\n\n##### 四、参考文档\n\n- [Object  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)\n- [Working_with_Objects  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects)\n- [Object_initializer  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer)\n","url":"https://learn-anything.cn/java-script-object","author":null,"published_at":"2021-12-22T09:03:48.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解JavaScript的Object对象","slug":"java-script-object"}},
    "staticQueryHashes": ["63159454"]}
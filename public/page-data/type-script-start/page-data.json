{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/type-script-start",
    "result": {"data":{"strapiArticles":{"id":"Articles_438","title":"学习TypeScript，从这里开始！","description":"TypeScript 是以 JavaScript为基础，增加了类型、逻辑等检查功能。TypeScript 目的是在编译期就消除 JavaScript 在运行期(浏览器打开页面)才会被发现的错误。","content":"##### 一、TypeScript 是什么？\n\nTypeScript 是以 JavaScript为基础，增加了类型、逻辑等检查功能。TypeScript 目的是在编译期就消除 JavaScript 在运行期(浏览器打开页面)才会被发现的错误。\n\n###### 1、TypeScript 与 JavaScript\n\n- TypeScript 代码最终会被编译器转换成 JavaScript 代码，所以TypeScript 和 JavaScript 运行时的环境是一样的。\n- TypeScript 不会改变 JavaScript 代码的运行结果。这意味着将代码从 JavaScript 移至 TypeScript，不用做任何修改就可以保证其相同的运行结果，即使 TypeScript 认为代码存在类型错误。\n- 用TypeScript编译器对JavaScript代码进行编译，编译生成的JavaScript代码与原JavaScript代码是一模一样的；\n\n```js\n// 用JavaScript写的代码，在运行网页时才会显示属性不存在的错误;\n// 用TypeScript在编写代码时就会弹出这个错误，即时修复，不需要等到页面运行。\nconst obj = { width: 10, height: 15 };\nconst area = obj.width * obj.heigth;\n```\n\n---\n\n##### 二、怎么使用 TypeScript ？\n\n###### 1、项目说明\n\n使用 npm 来安装 TypeScript 编译器，编译器会把 TypeScript 代码转换为 JavaScript 代码，用 HTML文件来调用 JavaScript代码，最后用浏览器打开 HTML文件 查看最终效果。\n\n---\n\n###### 2、详细步骤\n\n- 安装 typescript 编译器\n\n```\nnpm install -g typescript\n```\n\n- 用你熟悉的方式创建一个 `greeter.ts`文件，复制下面代码到文件中去：\n\n```js\nfunction greeter(person) {\n    return \"Hello, \" + person;\n}\n\nlet user = \"Jane User\";\n\ndocument.body.textContent = greeter(user);\n```\n\n- 编译程序\n\n```shell\n# 打开终端，编译生成 greeter.js 文件\ncd <上面 greeter.ts 文件目录>\ntsc greeter.ts\n```\n\n- 新建 greeter.html 文件\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n      <title>TypeScript Greeter</title>\n  </head>\n  <body>\n      <script src=\"greeter.js\"></script>\n  </body>\n</html>\n```\n\n- 用浏览器打开 greeter.html ，可以看到最终运行结果。\n\n---\n\n##### 三、代码编辑工具\n\n推荐使用 Visual Studio Code 作为TypeScript代码编辑工具，[可在这里下载！](https://code.visualstudio.com/)\n\n---\n\n##### 四、语法说明\n\n###### 1、any\n\n不希望某个特定值导致类型检查错误时，可以使用它。\n\n```js\n// 下面代码不会进行类型检查，编译期不会有任何错误报出\nlet obj: any = { x: 0 };\nobj.foo();\nobj();\nobj.bar = 100;\nobj = \"hello\";\nconst n: number = obj;\n```\n\n---\n\n###### 2、变量\n\n用  `const`  、 `var` 、`let`  声明变量时，可以显式注释其类型，但大多数情况下不需要这样操作，因为 TypeScript 可以根据上下文自动推断出其类型。\n\n```tsx\nlet myName: string = \"Alice\";\n```\n\n---\n\n###### 3、函数\n\n可以显示指定 函数参数 和 返回值类型。不过返回值类型通常不需要指定，TypeScript 会自动推断。\n\n```tsx\n// 参数类型指定\nfunction greet(name: string) {\n  console.log(\"Hello, \" + name.toUpperCase() + \"!!\");\n}\n\n// 返回类型指定\nfunction getFavoriteNumber(): number {\n  return 26;\n}\n```\n\n---\n\n###### 4、匿名函数 和 箭头函数\n\n匿名函数 和 箭头函数 中自动推断其参数类型。\n\n```tsx\n// No type annotations here, but TypeScript can spot the bug\nconst names = [\"Alice\", \"Bob\", \"Eve\"];\n \n// Contextual typing for function\nnames.forEach(function (s) {\n  console.log(s.toUppercase());\nProperty 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?\n});\n \n// Contextual typing also applies to arrow functions\nnames.forEach((s) => {\n  console.log(s.toUppercase());\nProperty 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?\n});\n```\n\n---\n\n###### 5、对象\n\n- 对象的属性不指定类型就会默认其为 any；\n\n- 属性之间用 `, 或 ;` 隔开；\n\n- 可选属性用 `?` 表示；\n\n- 访问不存在属性会产生错误；\n\n```tsx\nfunction printName(obj: { first: string; last?: string }) {\n  // Error - might crash if 'obj.last' wasn't provided!\n  console.log(obj.last.toUpperCase());\nObject is possibly 'undefined'.\n\n  if (obj.last !== undefined) {\n    // OK\n    console.log(obj.last.toUpperCase());\n  }\n \n  // A safe alternative using modern JavaScript syntax:\n  console.log(obj.last?.toUpperCase());\n}\n\n// Both OK\nprintName({ first: \"Bob\" });\nprintName({ first: \"Alice\", last: \"Alisson\" });\n```\n\n---\n\n######  6、联合类型\n\n可以指定参数为多个类型。\n\n```tsx\nfunction printId(id: number | string) {\n  console.log(\"Your ID is: \" + id);\n}\n// OK\nprintId(101);\n// OK\nprintId(\"202\");\n// Error\nprintId({ myID: 22342 });\nArgument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.\n  Type '{ myID: number; }' is not assignable to type 'number'.\n```\n\n---\n\n###### 7、type\n\n```tsx\ntype Point = {\n  x: number;\n  y: number;\n};\n \nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n \nprintCoord({ x: 100, y: 100 });\n```\n\n```tsx\ntype ID = number | string;\n```\n\n---\n\n###### 8、interface\n\n```tsx\ninterface Point {\n  x: number;\n  y: number;\n}\n \nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n \nprintCoord({ x: 100, y: 100 });\n```\n\n---\n\n###### 9、type 与 interface 差异\n\n1、接口扩展差异\n\n```\ninterface Animal {\n  name: string\n}\n\ninterface Bear extends Animal {\n  honey: boolean\n}\n\nconst bear = getBear() \nbear.name\nbear.honey\n```\n\n```\ntype Animal = {\n  name: string\n}\n\ntype Bear = Animal & { \n  honey: boolean \n}\n\nconst bear = getBear();\nbear.name;\nbear.honey;\n```\n\n2、interface可以添加新属性、type不可以\n\n```\ninterface Window {\n  title: string\n}\n\ninterface Window {\n  ts: TypeScriptAPI\n}\n\nconst src = 'const a = \"Hello World\"';\nwindow.ts.transpileModule(src, {});\n```\n\n```\ntype Window = {\n  title: string\n}\n\ntype Window = {\n  ts: TypeScriptAPI\n}\n\n// 会产生错误：Duplicate identifier 'Window'.\n```\n\n---\n\n###### 10、类型断言\n\n通过 `as` 和 `<>`  明确类型，不匹配类型会产生错误，编译后生成的js，不会包含断言的代码。\n\n```\nconst myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;\nconst myCanvas = <HTMLCanvasElement>document.getElementById(\"main_canvas\");\n\nconst x = \"hello\" as number;\n错误：Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n\nconst a = (expr as any) as T;\n```\n\n ---\n\n###### 11、文字类型\n\n```\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n  // ...\n}\nprintText(\"Hello, world\", \"left\");\n```\n\n```\ninterface Options {\n  width: number;\n}\nfunction configure(x: Options | \"auto\") {\n  // ...\n}\nconfigure({ width: 100 });\nconfigure(\"auto\");\n```\n\n---\n\n###### 12、调用错误举例\n\n```tsx\ndeclare function handleRequest(url: string, method: \"GET\" | \"POST\"): void;\n\nconst req = { url: \"https://example.com\", method: \"GET\" };\nhandleRequest(req.url, req.method);// 会产生错误\n\n// 修改方案1：\nconst req = { url: \"https://example.com\", method: \"GET\" as \"GET\" };\n// 修改方案2：\nhandleRequest(req.url, req.method as \"GET\");\n// 修改方案3：\nconst req = { url: \"https://example.com\", method: \"GET\" } as const;\nhandleRequest(req.url, req.method);\n```\n\n---\n\n###### 13、null 和 undefined\n\n只有 strictNullChecks 被设置为 on 时，才会进行 null 和 undefined 的检查。这样写代码是正确的。\n\n```\nfunction doSomething(x: string | null) {\n  if (x === null) {\n    // do nothing\n  } else {\n    console.log(\"Hello, \" + x.toUpperCase());\n  }\n}\n```\n\n---\n\n###### 14、`!`\n\n用于非空判断，如下代码，x为null时，代码不会执行。\n\n```\nfunction liveDangerously(x?: number | null) {\n  // No error\n  console.log(x!.toFixed());\n}\n```\n\n---\n\n###### 15、枚举enums\n\n[enums  -  官方文档](https://www.typescriptlang.org/docs/handbook/enums.html)\n\n###### 16、BigInt\n\n[BigInt  -  官方文档](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-2.html#bigint)\n\n###### 17、Symbol\n\n[Symbol  -  官方文档](https://www.typescriptlang.org/docs/handbook/symbols.html)\n\n---\n\n##### 五、编译的类型检查\n\n可以在 `tsconfig-json` 对类型检查进行设置，下面两个是最常见的。\n\n###### 1、noImplicitAny\n\nTypeScript 无法推断对象类型时，就会默认其为  any，若想检查代码中所有隐式 any ，可以开启 noImplicitAny 标志。\n\n```js\nfunction fn(s) {\nParameter 's' implicitly has an 'any' type.\n  console.log(s.subtr(3));\n}\n```\n\n---\n\n###### 2、strictNullChecks\n\n表示对代码进行 null 和 undefined 检查，有错误就报出。\n\n```js\ndeclare const loggedInUsername: string;\n \nconst users = [\n  { name: \"Oby\", age: 12 },\n  { name: \"Heera\", age: 32 },\n];\n \nconst loggedInUser = users.find((u) => u.name === loggedInUsername);\nconsole.log(loggedInUser.age);\nObject is possibly 'undefined'.\n```\n\n---\n\n###### 3、noEmitOnError\n\n```\n# 当编译时有错误发生时，不会生成 hello.js 文件\ntsc --noEmitOnError hello.ts\n```\n\n---\n\n##### 六、参考文档\n\n- [TypeScript  -  官网](https://www.typescriptlang.org/zh/)\n\n- [TypeScript  -  官方文档](https://www.typescriptlang.org/zh/docs/)\n- [tsconfig-json  -  官方文档](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html)\n- [常用类型  -  官方文档](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html)\n\n\n","url":"https://learn-anything.cn/type-script-start","published_at":"2021-12-05T11:17:28.000Z","tags":[{"name":"TypeScript","slug":"type-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"学习TypeScript，从这里开始！","slug":"type-script-start"}},
    "staticQueryHashes": ["63159454"]}
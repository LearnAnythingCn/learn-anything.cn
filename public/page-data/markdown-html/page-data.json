{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/markdown-html",
    "result": {"data":{"strapiArticles":{"id":"Articles_81","title":"将Markdown字符串转成HTML","description":"使用插件，依次实现：markdown字符串转HTML、自动生成目录(toc)、代码高亮等功能。","content":"##### 简介\n\n使用以下插件，依次实现：markdown字符串转HTML、自动生成目录(toc)、代码高亮等功能。\n\n-  `markdown-it`：将markdown字符串转换成HTML字符串；\n- `html-react-parser`：将上面HTML字符串转换成React，用在Node.js的web项目中展示最终排版；\n- `markdown-it-anchor`：给HTML增加锚点，配合插件即可生成文档的目录(TOC)；\n- `markdown-it-toc-done-right`：帮markdown自动生成目录(TOC)，依赖上面插件`markdown-it-anchor`；\n- `uslug`：上面生成的目录(TOC)，有时候跳转会失败，原因就是markdown-it-anchor生成锚点id 与 markdown-it-toc-done-right 生成的herf 不匹配导致，uslug可解决此问题；\n- `分割线<hr/>无法显示`：最终HTML页面无法显示分割线，原因是`<hr/>`没有高度导致，用css设置高度`hr{ height: 1px;}`即可显示。\n- `highlight.js`：markdown中代码解析成HTML后，跟正常文字一样是没有颜色、关键字高亮等样式的，此插件即可解决代码样式问题。\n\n---\n\n##### markdown-it\n\n功能：把markdown字符串转换为HTML字符串.\n\n```js\n# 安装\nnpm i markdown-it\n\n# 使用\n// node.js, \"classic\" way:\nvar MarkdownIt = require('markdown-it'), md = new MarkdownIt();\nvar result = md.render('# markdown-it rulezz!');\n\n// node.js, the same, but with sugar:\nvar md = require('markdown-it')();\nvar result = md.render('# markdown-it rulezz!');\n```\n\n- [markdown-it  源码 ](https://github.com/markdown-it/markdown-it)  \n- [markdown-it 插件下载](https://www.npmjs.com/package/markdown-it)\n- [Live Demo：查看markdown字符串变HTML的效果](https://markdown-it.github.io/)\n- [markdown-it 中文文档](https://markdown-it.docschina.org/)\n\n---\n\n##### html-react-parser\n\n功能：将HTML字符串转成React元素。\n\n###### 1、安装\n\n```js\n# npm安装\nnpm install html-react-parser --save\n\n# yarn安装\nyarn add html-react-parser\n\n# CDN安装\n<!-- HTMLReactParser depends on React -->\n<script src=\"https://unpkg.com/react@17/umd/react.production.min.js\"></script>\n<script src=\"https://unpkg.com/html-react-parser@latest/dist/html-react-parser.min.js\"></script>\n<script>\n  window.HTMLReactParser(/* string */);\n</script>\n```\n\n###### 2、使用\n\n```js\n# 将HTML字符串转换为HTML\nconst parse = require('html-react-parser');\nparse('<p>Hello, World!</p>'); // React.createElement('p', {}, 'Hello, World!')\n\n# 将HTML字符串转换为HTML并替换其中属性\nparse('<p><br id=\"remove\"></p>', {\n  replace: ({ attribs }) => attribs && attribs.id === 'remove' && <></>\n});\n\n# 将HTML字符串转换为HTML并替换其中标签<main/>为<div/>\nimport parse, { attributesToProps } from 'html-react-parser';\n\nconst html = `<main class=\"prettify\" style=\"background: #fff; text-align: center;\" />`;\nconst options = {\n  replace: domNode => {\n    if (domNode.attribs && domNode.name === 'main') {\n      const props = attributesToProps(domNode.attribs);\n      return <div {...props} />;\n    }\n  }\n};\nparse(html, options);\n// 替换后结果：\n<div class=\"prettify\" style=\"background:#fff;text-align:center\"></div>\n\n\n```\n\n###### 3、注意事项\n\n```js\n# 确保有父容器，否则会出错\n<ul>\n  {parse(`\n    <li>Item 1</li>\n    <li>Item 2</li>\n  `)}\n</ul>\n```\n\n- [html-react-parser插件下载](https://www.npmjs.com/package/html-react-parser)\n\n- [html-react-parser源码](https://github.com/remarkablemark/html-react-parser#readme)\n\n---\n\n##### markdown-it-anchor\n\n功能：作为`markdown-it`的插件使用，帮助markdown-it解析后的HTML，加上锚点(<h/>标签增加id属性)，再配合上[markdown-it-toc-done-right](https://www.npmjs.com/package/markdown-it-toc-done-right)插件，就可以为markdown自动生成目录(TOC)。\n\n###### 1、安装\n\n```js\n# 安装\nnpm i markdown-it-anchor\n\n# 使用\nconst md = require('markdown-it')()\n  .use(require('markdown-it-anchor'), opts)\n\n```\n\n###### 2、使用注意\n\n```js\n# 用uslug插件，解决锚点id中，「%XX」这种不可读的字符。\n$ npm i -S uslug\n\nconst uslug = require('uslug')\nconst uslugify = s => uslug(s)\n\nconst md = require('markdown-it')()\nconst anchor = require('markdown-it-anchor', {\n\tslugify: uslugify\n})\n```\n\n- [markdown-it-anchor 插件下载](https://www.npmjs.com/search?q=markdown-it-anchor)\n- [markdown-it-anchor 源码](https://github.com/valeriangalliat/markdown-it-anchor/blob/master/README-zh_CN.md)\n\n---\n\n##### uslug\n\n功能：为string生成一个slugify(唯一字符串，去掉或转换不可读、不支持的字符).\n\n###### 1、安装\n\n```shell\nnpm install uslug\n```\n\n###### 2、使用\n\n```js\n# 调用方法\nuslug(string, options)\n\n# 参数说明\nstring是待传入的字符串；options有三个值可以设置：\n1、allowedChars:  可以指定字符串保持原样，不转换，缺省值：'-_~'.\n2、lower: 布尔值，是否强制转换为小写？缺省为true\n3、spaces: 布尔值，是否允许空格？缺省为false.\n\n# 使用案例\nuslug('Быстрее и лучше!') // 'быстрее-и-лучше'\nuslug('汉语/漢語') // '汉语漢語'\n\nuslug('Y U NO', { lower: false })) // 'Y-U-NO'\nuslug('Y U NO', { spaces: true })) // 'y u no'\nuslug('Y-U|NO', { allowedChars: '|' })) // 'yu|no'\n\n```\n\n###### 3、可以配合其他插件使用\n\n```shell\n# 配合 markdown-it-anchor 插件生成slugify\n# 配合 markdown-it-toc-done-right 插件生成slugify\n```\n\n- [uslug 插件下载](https://www.npmjs.com/package/uslug)\n- [uslug源码](https://github.com/jeremys/uslug#readme)\n\n---\n\n##### markdown-it-toc-done-right\n\n功能：为markdown字符串转HTML过程中，生成目录(TOC)，依赖插件：`markdown-it-anchor`\n\n###### 1、安装\n\n```shell\n$ npm i -S markdown-it-toc-done-right markdown-it-anchor\n\n```\n\n###### 2、使用\n\n```js\n# node.js 使用案例\nvar md = require(\"markdown-it\")({\n\thtml: false,\n\txhtmlOut: true,\n\ttypographer: true\n}).use( require(\"markdown-it-anchor\"), { permalink: true, permalinkBefore: true, permalinkSymbol: '§' } )\n  .use( require(\"markdown-it-toc-done-right\") );\n\nvar result = md.render(\"# markdown-it rulezz!\\n\\n${toc}\\n## with markdown-it-toc-done-right rulezz even more!\");\n\n# 另外一种使用方案\n// browser without AMD, added to \"window\" on script load\n// Note, there is no dash in \"markdownit\".\nvar md = window.markdownit({\n\thtml: false,\n\txhtmlOut: true,\n\ttypographer: true\n}).use( window.markdownItAnchor, { permalink: true, permalinkBefore: true, permalinkSymbol: '§' } )\n  .use( window.markdownItTocDoneRight );\n\nvar result = md.render(\"# markdown-it rulezz!\\n\\n${toc}\\n## with markdown-it-toc-done-right rulezz even more!\");\n```\n\n###### 3、注意事项\n\n```js\n# 使用过程中，引入uslug插件，这样可以使得markdown-it-anchor生成锚id，跟markdown-it-toc-done-right生成的href能够完全一致，不至于因为名称不同导致锚点跳转失败。\nvar md = require(\"markdown-it\")({\n\thtml: false,\n\txhtmlOut: true,\n\ttypographer: true\n}).use( require(\"markdown-it-anchor\"), { permalink: true, permalinkBefore: true, permalinkSymbol: '§', { slugify: uslugify} } )\n  .use( require(\"markdown-it-toc-done-right\"), { slugify: uslugify } );\n```\n\n- [markdown-it-toc-done-right 插件下载](https://www.npmjs.com/package/markdown-it-toc-done-right)\n\n- [markdown-it-toc-done-right 源码](https://github.com/nagaozen/markdown-it-toc-done-right#readme)\n\n---\n\n##### highlight.js\n\n功能：让markdown中代码，显示不同的字体样式(彩色、关键字高亮等).\n\n###### 1、安装\n\n```shell\n# 环境要求\nNode.js >= 12.x\nnpm >= 6.x\n\n# npm安装\nnpm install highlight.js\n\n# yarn安装\nyarn add highlight.js\n```\n\n###### 2、加载并调用\n\n```js\n#1.自动识别代码语言，并使用对应语言格式高亮\nconst hljs = require('./highlight.js');\nconst highlightedCode = hljs.highlightAuto('<span>Hello World!</span>').value\n\n#2.使用确定代码语言格式高亮\nhtml = hljs.highlight('<h1>Hello World!</h1>', {language: 'xml'}).value\n\n#3.对各个代码元素模块，自定义格式\n// first, find all the div.code blocks\ndocument.querySelectorAll('div.code').forEach(el => {\n  // then highlight each\n  hljs.highlightElement(el);\n});\n```\n\n###### 3、选择样式，呈现最后效果\n\n```js\n# 在此路径「/node_modules/highlight.js/styles」，找到喜欢的css，复制文件到项目中，使用时加载\nimport \"../components/shades-of-purple.css\"\n\n# 实际展示样式可以看下面官方给出的样式链接\n```\n\n- [官网](https://highlightjs.org/)\n\n- [官方 - 使用手册](https://highlightjs.org/usage/)\n\n- [官方 - 样式效果展示](https://highlightjs.org/static/demo/)\n\n---\n\n##### markdown-it-multimd-table\n\n###### 1、安装\n\n```shell\nnpm i markdown-it-multimd-table\n```\n\n###### 2、使用案例一\n\n```jsx\n// defaults\nvar md = require('markdown-it')()\n            .use(require('markdown-it-multimd-table'));\n\n// full options list (equivalent to defaults)\nvar md = require('markdown-it')()\n            .use(require('markdown-it-multimd-table'), {\n              multiline:  false,\n              rowspan:    false,\n              headerless: false,\n            });\n\nmd.render(/*...*/)\n```\n\n###### 3、使用案例二\n\n```shell\n$ mkdir markdown-it-multimd-table\n$ cd markdown-it-multimd-table\n$ npm install markdown-it-multimd-table --prefix .\n$ vim test.js\n\n    var md = require('markdown-it')()\n                .use(require('markdown-it-multimd-table'));\n\n    const exampleTable =\n    \"|             |          Grouping           || \\n\" +\n    \"First Header  | Second Header | Third Header | \\n\" +\n    \" ------------ | :-----------: | -----------: | \\n\" +\n    \"Content       |          *Long Cell*        || \\n\" +\n    \"Content       |   **Cell**    |         Cell | \\n\" +\n    \"                                               \\n\" +\n    \"New section   |     More      |         Data | \\n\" +\n    \"And more      | With an escaped '\\\\|'       || \\n\" +\n    \"[Prototype table]                              \\n\";\n\n    console.log(md.render(exampleTable));\n\n$ node test.js > test.html\n$ firefox test.html\n```\n\n- [markdown-it-multimd-table插件下载](https://www.npmjs.com/package/markdown-it-multimd-table)\n\n- [markdown-it-multimd-table源码](https://github.com/RedBug312/markdown-it-multimd-table)","url":"https://learn-anything.cn/markdown-html","published_at":"2021-09-30T22:57:56.000Z","tags":[{"name":"Markdown","slug":"markdown"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"将Markdown字符串转成HTML","slug":"markdown-html"}},
    "staticQueryHashes": ["63159454"]}
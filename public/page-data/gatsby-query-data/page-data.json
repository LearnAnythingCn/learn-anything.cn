{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/gatsby-query-data",
    "result": {"data":{"strapiArticles":{"id":"Articles_356","title":"Gatsby怎么查询数据层数据？","description":"Gatsby项目启动后，可以通过 http://localhost:8000/___graphql  查看数据层所有数据，在页面中就需要通过GraphQL 来查询了。","content":"##### 一、简介\n\nGatsby项目启动后，可以通过 http://localhost:8000/___graphql  查看数据层所有数据，在页面中就需要通过GraphQL 来查询了。\n\n---\n\n##### 二、GraphQL查询数据的几种方式\n\n###### 1、页面查询\n\n在 src/pages 目录下新建 blog.js 文件，复制下面代码到文件中，实现文件节点  allFile 的查询。gatsby 重启后，就可以通过 http://localhost:8000/blog  来访问此页面。\n\n```js\n// 路径：src/pages/blog.js\n\nimport * as React from 'react'\n// 第一步导入\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\n\n// 第三步，data接受数据使用\nconst BlogPage = ({ data }) => {\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      <ul>\n      {\n        data.allFile.nodes.map(node => (\n          <li key={node.name}>\n            {node.name}\n          </li>\n        ))\n      }\n      </ul>\n    </Layout>\n  )\n}\n// 第二步定义，注意名字「indexQuery」要唯一，否则会名字冲突，查询出错名字会被抛出，方便debug\nexport const query = graphql`\n  query indexQuery{\n    allFile {\n      nodes {\n        name\n      }\n    }\n  }\n`\nexport default BlogPage\n```\n\n---\n\n###### 2、useStaticQuery\n\n可以使用gatsby 提供的 useStaticQuery 来实现查询。 \n\n```js\n// 组件页面路径：src/components/header.js\nimport * as React from 'react'\n// Step 1: Import the useStaticQuery hook and graphql tag\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst Header = () => {\n  /* Step 2: Use the useStaticQuery hook and graphql tag to query for data\n   (The query gets run at build time) */\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <header>\n      {/* Step 3: Use the data in your component */}\n      <h1>{ data.site.siteMetadata.title }</h1>\n    </header>\n  )\n}\n\nexport default Header\n```\n\n---\n\n###### 3、StaticQuery\n\n使用 StaticQuery 组件查询数据。使用场景：创建一些通用组件（譬如页脚组件），插入页面中使用。\n\n```js\nimport React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst NonPageComponent = () => (\n  <StaticQuery\n    query={graphql`\n      query NonPageQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={(\n      data\n    ) => (\n      <h1>\n        Querying title from NonPageComponent with StaticQuery:\n        {data.site.siteMetadata.title}\n      </h1>\n    )}\n  />\n)\n\nexport default NonPageComponent\n```\n\n---\n\n###### 4、fetch\n\n区别与上面三种查询数据的方式，当页面需要在运行是获取一些第三方数据，可以用fetch。\n\n```js\nimport React, { useState, useEffect } from \"react\"\n\nconst IndexPage = () => {\n  const [starsCount, setStarsCount] = useState(0)\n  useEffect(() => {\n    // get data from GitHub api\n    fetch(`https://api.github.com/repos/gatsbyjs/gatsby`)\n      .then(response => response.json()) // parse JSON from request\n      .then(resultData => {\n        setStarsCount(resultData.stargazers_count)\n      }) // set data for the number of stars\n  }, [])\n\n  return (\n    <section>\n      <p>Runtime Data: Star count for the Gatsby repo {starsCount}</p>\n    </section>\n  )\n}\n\nexport default IndexPage\n```\n\n---\n\n##### 三、重要规则\n\n###### 1、一个页面只能调用一次useStaticQuery，但可以一起查询多个节点数据\n\n```js\nconst data = useStaticQuery(graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    siteBuildMetadata {\n      buildTime\n    }\n  }\n`)\n```\n\n---\n\n###### 2、useStaticQuery 与 pageQuery(页面查询) 区别\n\n- pageQuery(页面查询)  可以接受参数，参数通过 pageContext 传递。\n- useStaticQuery 不可以接受参数且在编译器就完成查询数据。\n\n---\n\n##### 四、查询过滤条件设置\n\n###### 1、limit：限制结果数量\n\n```js\n{\n  allSitePage(limit: 3) {\n    edges {\n      node {\n        id\n        path\n      }\n    }\n  }\n}\n```\n\n###### 2、sort：排序\n\n```js\n{\n  allSitePage(sort: {fields: path, order: ASC}) {\n    edges {\n      node {\n        id\n        path\n      }\n    }\n  }\n}\n```\n\n###### 3、filter：过滤结果\n\n```js\n{\n  allMarkdownRemark(filter: {frontmatter: {categories: {eq: \"magical creatures\"}}}) {\n    edges {\n      node {\n        frontmatter {\n          title\n          categories\n        }\n      }\n    }\n  }\n}\n```\n\n###### 4、别名\n\n给查询字段取个别名，方便写代码。\n\n```js\n{\n  fileCount: allFile {\n    totalCount\n  }\n  filePageInfo: allFile {\n    pageInfo {\n      currentPage\n    }\n  }\n}\n```\n\n###### 5、fragment\n\n可以 fragment 实现查询语句的复用，使用时无需 import 导入，gatsby 中的 graphql 查询名称是全局的，所以要注意名称的唯一性，相同名称会出现编译错误。\n\n- 定义一个fragment：SiteInformation\n\n  ```js\n  export const query = graphql`\n    fragment SiteInformation on Site {\n      title\n      description\n    }\n  `\n  ```\n\n- 在查询语句中使用\n\n  ```js\n  export const pageQuery = graphql`\n    query SiteQuery {\n      site {\n  \t\t\tSiteInformation\n      }\n    }\n  `\n  ```\n\n---\n\n##### 五、参考文档\n\n- [querying-data](https://www.gatsbyjs.com/docs/recipes/querying-data)\n\n\n","url":"https://learn-anything.cn/gatsby-query-data","author":null,"published_at":"2021-11-11T13:46:11.000Z","tags":[{"name":"Gatsby","slug":"gatsby"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"Gatsby怎么查询数据层数据？","slug":"gatsby-query-data"}},
    "staticQueryHashes": ["63159454"]}
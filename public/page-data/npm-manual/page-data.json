{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/npm-manual",
    "result": {"data":{"strapiArticles":{"id":"Articles_318","title":"npm的安装与使用！","description":"npm怎么安装？怎么用在项目中？一些安装使用常见错误解决。","content":"##### 一、npm 是啥？\n\n- npm（全称 Node Package Manager）是一个软件包管理系统，专门管理用 JavaScript 编写的软件包。可以免费下载别人写好的 js软件包，并用到项目中，当然也可以上传共享自己写的 js软件包。\n\n- Node.js 内置了npm，只要安装了node.js，就可以直接使用 npm，[Node.js的安装方式，看这里！](https://learn-anything.cn/node-js-nvm)\n\n- 安装完  node.js  后，把npm更新到最新版本:\n\n  ```shell\n  npm install npm@latest -g\n  ```\n\n---\n\n##### 二、项目中使用 npm\n\n###### 1、初始化\n\n根据提示填写对应信息，即可产生package.json 文件\n\n```shell\ncd <项目根目录>\nnpm init \n```\n\n###### 2、使用 npm 下载安装包\n\n```shell\n# 安装需要使用的包\nnpm install lodash\n\n# 安装完成后，package.json 中会添加版本信息，如下：\n{\n  \"dependencies\": {\n    \"lodash\": \"^1.0.0\"\n  }\n}\n```\n\n###### 3、使用安装的包\n\n```js\nvar lodash = require('lodash');\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n###### 4、更新包\n\n```shell\n# 法一：根据版本号更新\nnpm install lodash@版本号\n\n# 法二：更新最新版本\nnpm install lodash\nnpm install lodash@latest\n\n# 法三：修改 package.json 中包的版本号，下一次npm install会自动更新会修改后的版本。\n```\n\n\n\n##### 三、常用命令\n\n###### 1、常用命令\n\n用 lodash  包说明npm的使用方法：\n\n```shell\n# 全局安装 lodash\nnpm install -g lodash\n\n# 本地安装 lodash（默认安装最新版本）\nnpm install lodash\nnpm install lodash@latest\n\n# 安装指定版本\nnpm install lodash@1.0.0\n\n# 卸载\nnpm uninstall lodash \n\n# 查看已安装\nnpm ls \n\n# 更新 lodash 到最新版本\nnpm update lodash \n\n# 搜索 lodash\nnpm search lodash \n\n# 查看package中插件的最新版本\nnpm outdated\n```\n\n---\n\n##### 四、作用域\n\n###### 1、无作用域的包\n\n```shell\nvar lodash = require('lodash');\nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);\n```\n\n```js\n// package.json 中版本情况\n{\n  \"dependencies\": {\n    \"lodash\": \"^1.0.0\"\n  }\n}\n```\n\n###### 2、有作用域的包\n\n```js\nvar projectName = require(\"@scope/package-name\")\n```\n\n```js\n// package.json 中版本情况\n{\n  \"dependencies\": {\n    \"@scope/package_name\": \"^1.0.0\"\n  }\n}\n```\n\n---\n\n##### 五、常见错误\n\n###### 1、Error: Cannot find module\n\n- 当出现如下错误提示，表示 packages 没有被安装：\n\n  ```\n  module.js:340\n      throw err;\n            ^\n  Error: Cannot find module 'lodash'\n  ```\n\n- 解决方案：\n\n  ```shell\n  # 无作用域包安装\n  npm install <package_name>\n  \n  # 有作用域包安装\n  npm install <@scope/package_name>\n  ```\n\n---\n\n###### 2、安装出错\n\n错误提示：npm resource busy or locked.....  可以先清除再重新安装：\n\n```shell\nnpm cache clean\nnpm install\n```\n\n---\n\n##### 六、版本控制符\n\n版本号有三位数字组成（譬如：1.2.3），`1` 表示主版本、`1.2`表示次要版本、`1.2.3` 表示补丁版本。\n\n`^`  表示用于确定主版本号、 `~`  用于确定主版本号 + 次要版本号； \n\n- `^1` ：等同于 `1.x.x` ,  以`1`开头的所有版本；\n\n- `~2.2` ：等同于 `2.2.x` ，以  `2.2`  开头的所有版本。\n\n- `~2.2.1` ：以  `2.2`  开头，且最后一位 补丁号≥1 的所有版本，即 `2.2.1`  与 `2.2.9` 之间版本，包括头尾。\n\n```js\n// 可使用在package.json中\n\"dependencies\": {\n  \"my_dep\": \"^1.0.0\",\n  \"another_dep\": \"~2.2.0\"\n},\n```\n\n---\n\n##### 七、参考文档\n\n- [npm - 官方网站](https://www.npmjs.com/)\n- [npm - 官方文档](https://docs.npmjs.com/)\n- [npm - 命令格式说明 - 官方文档](https://docs.npmjs.com/cli/v7/commands)\n- [使用 npm packages ](https://docs.npmjs.com/using-npm-packages-in-your-projects)\n- [npm - 语义版本控制](https://semver.npmjs.com/)\n\n\n","url":"https://learn-anything.cn/npm-manual","published_at":"2021-11-01T07:32:21.000Z","tags":[{"name":"NPM","slug":"npm"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"npm的安装与使用！","slug":"npm-manual"}},
    "staticQueryHashes": ["63159454"]}
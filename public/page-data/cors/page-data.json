{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/cors",
    "result": {"data":{"strapiArticles":{"id":"Articles_406","title":"跨域资源共享(CORS)是什么？","description":"出于安全原因，浏览器会限制脚本发起的跨域 HTTP 请求，除非服务器同意访问。譬如服务器对预检请求的响应 Header 中有 `Access-Control-Allow-Origin: *`，那么跨域请求即可正确访问。","content":"##### 一、CORS 是什么？\n\n出于安全原因，浏览器会限制脚本发起的跨域 HTTP 请求，除非服务器同意访问。譬如服务器对预检请求的响应 Header 中有 `Access-Control-Allow-Origin: *`，那么跨域请求即可正确访问。\n\n---\n\n##### 二、危害举例\n\n如果恶意网页中含有这样的脚本代码 `fetch(\"example.com\")`，而你已经登录了 `example.com`  网站还没有退出，如果此时没有  CORS 限制，那么恶意网页中的脚本代码就会顺利通过服务器执行，您的大量个人信息会被泄露。\n\n---\n\n##### 三、预检请求是什么？\n\n为了避免跨域请求对服务器的数据产生不可知的影响，浏览器会用  OPTIONS 方法，先发送一个预检请求（preflight request），待服务器确认可以访问后，再发送实际请求。\n\n下面这个 POST 请求，就会先发送预见请求，可以在控制台的网络连接中查看具体连接和信息。\n\n```javascript\nvar invocation = new XMLHttpRequest();\nvar url = 'http://bar.other/resources/post-here/';\nvar body = '<?xml version=\"1.0\"?><person><name>Arun</name></person>';\n\nfunction callOtherDomain() {\n    if (invocation) {\n        invocation.open('POST', url, true);\n        invocation.setRequestHeader('X-PINGOTHER', 'pingpong');\n        invocation.setRequestHeader('Content-Type', 'application/xml');\n        invocation.onreadystatechange = handler;\n        invocation.send(body);\n    }\n}\n```\n\n---\n\n##### 四、怎么用 CORS？\n\nCORS 的工作主要在服务端，通过返回不同的 Header 来告知请求者，是否可以访问？下面两个部分列出了 CORS 所有用到的 Header 及其含义。\n\n###### 1、其他使用场景\n\nCORS 可以配合 token 来防止 CSRF 攻击。[详情，看这里！](https://learn-anything.cn/csrf-defense)\n\n---\n\n##### 五、客户端跨域请求\n\n跨域请求用到如下 Header ，无须手动设置，浏览器会自动设置。\n\n###### 1、origin\n\n- 预检请求和实际请求中的源站名称，不包含任何路径信息，只是服务器名称。\n\n  ```http\n  Origin: <origin>\n  ```\n\n---\n\n###### 2、Access-Control-Request-Method\n\n- 用于预检请求，告诉服务器，实际请求 使用什么方法：post、get 等。\n\n  ```http\n  Access-Control-Request-Method: <method>\n  ```\n\n---\n\n###### 3、Access-Control-Request-Headers\n\n- 用于预检请求，告诉服务器，将实际请求所携带的首部字段。\n\n  ```http\n  Access-Control-Request-Headers: <field-name>[, <field-name>]*\n  ```\n\n---\n\n##### 六、服务器响应跨域请求\n\n###### 1、Access-Control-Allow-Origin\n\n- 用于响应预检请求，表示允许该资源的外域 URI\n\n  ```http\n  // 允许所有\n  Access-Control-Allow-Origin: *\n  \n  // 只允许 http://mozilla.com\n  Access-Control-Allow-Origin: http://mozilla.com\n  ```\n\n---\n\n###### 2、Access-Control-Expose-Headers\n\n- 对于自定义的 Header ，必须这里设置，客户端才能正常访问\n\n  ```http\n  Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header\n  ```\n\n###### 3、Access-Control-Max-Age\n\n- 设置预检请求的结果能够被缓存多少秒？\n\n  ```http\n  Access-Control-Max-Age: <delta-seconds>\n  ```\n\n###### 4、Access-Control-Allow-Credentials\n\n- 当跨域请求中设置了  `credentials=true`，但服务端响应中没有  `Access-Control-Allow-Credentials: true`，那么浏览器是不会把服务器返回的数据发回给请求者。\n\n  ```http\n  Access-Control-Allow-Credentials: true\n  ```\n\n###### 5、Access-Control-Allow-Methods\n\n- 用于响应预检请求，指明实际请求所允许使用的 HTTP 方法\n\n  ```http\n  Access-Control-Allow-Methods: <method>[, <method>]*\n  ```\n\n###### 6、Access-Control-Allow-Headers\n\n- 用于响应预检请求，指明实际请求中允许携带的 Header\n\n  ```http\n  Access-Control-Allow-Headers: <field-name>[, <field-name>]*\n  ```\n\n---\n\n##### 七、参考文档\n\n- [跨源资源共享（CORS）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n\n- [Fetch has been blocked by CORS policy](https://jeremyliberman.com/2019/02/11/fetch-has-been-blocked-by-cors-policy.html)\n- [I want to add CORS support to my server](https://enable-cors.org/server.html)\n\n","url":"https://learn-anything.cn/cors","author":null,"published_at":"2021-11-23T23:51:20.000Z","tags":[{"name":"网络安全","slug":"network-security"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"跨域资源共享(CORS)是什么？","slug":"cors"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/nodejs-commonjs-ecmascript",
    "result": {"data":{"strapiArticles":{"id":"Articles_337","title":"Node.js中CommonJS和ECMAScript有什么区别？","description":"CommonJS和ECMAScript分别是什么？分别有什么样的功能？怎么使用？","content":"##### 一、CommonJS 与 ECMAScript \n\n###### 1、概念说明\n\n- CommonJS 与 ECMAScript 都是编写 JS 的标准。\n\n- ECMAScript 标准让不同浏览器上执行相同  js 代码能得到相同结果，是现有 js语言 的通用标准。\n\n- CommonJS 标准让相同  js  代码在 Node.js 环境下运行得到相同结果，只是 Node.js 下的标准。\n\n###### 2、区别是什么？\n\nNode.js 既支持  CommonJS  标准，也完全支持  ECMAScript  标准。Node.js 环境下用 js语言编写的文件，有三种格式：`.js`、`.mjs`、`.cjs`。\n\n- `.mjs`  ：此类文件只用能  ECMAScript  标准解析执行；\n\n- `.cjs`  ：此类文件只用能  CommonJS  标准解析执行；\n\n- `.js`  ： 根据具体情况决定，采用什么标准来执行：\n\n  - 情况1：如果 `.js`  没有其他特殊说明，默认使用  CommonJS  标准解析执行；\n\n  - 情况2：`package.json`  文件中 type  属性值为缺省值 或 等于 `commonjs`  ，那么采用 CommonJS 标准解析执行  `.js`  文件；如果 type  属性等于 `module`，那么采用  ECMAScript  标准解析执行  `.js`  文件。\n\n  - 情况3：命令行中有flag ，`--input-type=module`  表示采用  ECMAScript  标准解析执行  `.js`  文件；`--input-type=commonjs`  表示采用   CommonJS 标准解析执行  `.js`  文件。\n\n    ```shell\n    node --input-type=module --eval \"import { sep } from 'path'; console.log(sep);\"\n    \n    echo \"import { sep } from 'path'; console.log(sep);\" | node --input-type=module\n    ```\n\n- `require` 只能导入 CommonJS 标准文件；`import`  支持两种标准的文件导入。\n\n---\n\n##### 二、CommonJS 标准的简单示例\n\n###### 1、写个模块\n\nNode.js 中，`一个js文件`  被看做一个 `模块`，譬如下面 `circle.js`  就是一个模块，导出两个方法。\n\n```js\n// circle.js\nconst { PI } = Math;\nexports.area = (r) => PI * r ** 2;\nexports.circumference = (r) => 2 * PI * r;\n```\n\n###### 2、导入模块\n\n在另一个 js文件中使用 `circle.js` 模块的方法，实现代码重用。\n\n```js\n// foo.js\nconst circle = require('./circle.js');\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n```\n\n---\n\n##### 三、ECMAScript 标准的简单示例\n\n###### 1、写个模块\n\n```js\n// addTwo.mjs\nfunction addTwo(num) {\n  return num + 2;\n}\n\nexport { addTwo };\n```\n\n###### 2、导入模块\n\n```js\n// app.mjs\nimport { addTwo } from './addTwo.mjs';\n\n// Prints: 6\nconsole.log(addTwo(4));\n```\n\n---\n\n##### 四、导入模块的方式\n\n###### 1、require\n\nrequire 只能被用来加载 CommonJS 模块。`/home/ry/projects/foo.js`  文件加载其它模块的方式如下：\n\n```js\n// foo.js\nconst circle1 = require('./circle.js');\nconst circle2 = require('../circle.js');\nconst circle3 = require('/home/marco/circle.js');\nconst circle4 = require('circle');\nconst circle5 = require('./some-library');\n\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n```\n\n寻找导入模块的方法说明：\n\n- `./circle.js`   ：在  `foo.js`  所在文件夹下，去寻找加载  `circle.js`\n\n- `../circle.js`  ：在  `foo.js`  所在文件夹的上一层文件夹，去寻找加载 `circle.js`\n\n- `/home/marco/circle.js`   ： 按照这个绝对路径，去寻找加载 `circle.js`\n\n- `circle`  ：先从 Node.js 内置模块去寻找加载，没有再去 `node_modules`  文件夹下寻找 `circle` 模块，且会一直向上一层文件夹寻找，如下\n\n  ```shell\n  /home/ry/projects/node_modules/circle.js\n  /home/ry/node_modules/circle.js\n  /home/node_modules/circle.js\n  /node_modules/circle.js\n  ```\n\n- `./some-library`   ：先从项目根目录寻找  `package.json` ，再去 `foo.js` 所在文件夹下，寻找两个index模块，没有就返回  `Error: Cannot find module 'some-library'`\n\n  ```json\n  // 1、package.json 寻找如下内容\n  { \"name\" : \"some-library\",\n    \"main\" : \"./lib/some-library.js\" }\n  \n  // 2、查找是否有 index.js 模块\n  ./some-library/index.js\n  \n  // 3、查找是否有 index.node 模块\n  ./some-library/index.node\n  ```\n\n---\n\n###### 2、import\n\n- `CommonJS 模块` 和 `ECMAScript 模块` 都可以用  `import`  来导入，三种使用方式\n\n  ```js\n  // 相对路径\n  import { sep } from './startup.js'\n  import { sep } from './config.mjs'\n  \n  // 绝对路径\n  import { sep } from '/home/project/startup.js'\n  import { sep } from '/home/project/startup.mjs'\n  \n  // 模块名，寻找模块的方式与require一样\n  import { sep } from 'some-package'\n  ```\n\n- `import.meta.url` ：表示模块的绝对URL\n\n  ```js\n  // 通过模块绝对url，来读取相对路径的文件\n  import { readFileSync } from 'fs';\n  const buffer = readFileSync(new URL('./data.proto', import.meta.url));\n  ```\n\n---\n\n###### 3、动态导入\n\n上面的方式都是静态导入，某些场景可通过动态导入来延迟模块加载，获得更好的页面体验感。CommonJS  和  ECMAScript ，都支持动态导入。\n\n```js\n// CommonJS 动态导入\nimport('/modules/my-module.js')\n  .then((module) => {\n    // Do something with the module.\n\t});\n\n// ECMAScript 动态导入\nimport('/modules/my-module.mjs')\n  .then((module) => {\n    // Do something with the module.\n\t});\n```\n\n---\n\n##### 五、示例：选择解析标准\n\n如果 Node.js 项目根目录有 `my-app.js`  和 `package.json`  两个文件，那么终端启动项目 `node my-app.js` ，各个模块会以什么标准被导入？\n\n```js\n// /home/project/my-app.js\n// my-app.js 会以 ES 标准导入，因为同文件夹 package.json 中的 type 属性所致。\n\n// 如果startup目录下没有 package.json，那么使用上一层目录中package.json的设置\n// 即 用 ES 标准导入init.js\nimport './startup/init.js';\n\n// 根据 ./node_modules/commonjs-package/package.json 中type属性值\n// 缺省 就用 commonjs 标准，否则就按照属性值标准。\nimport 'commonjs-package';\n\n// 根据 ./node_modules/commonjs-package/package.json 中type属性值\n// 缺省 就用 commonjs 标准，否则就按照属性值标准。\nimport './node_modules/commonjs-package/index.js';\n```\n\n```json\n// /home/project/package.json\n{\n  \"type\": \"module\",\n}\n```\n\n---\n\n##### 六、其他补充\n\n###### 1、其他文件\n\n- 如果模块没有被找到，系统会尝试其他后缀的文件，分别为：`.js`, `.json`, and finally `.node`.\n\n###### 2、同一个对象\n\n- 第一次调用 `require('foo')` 后，模块对象会被缓存，后面再调用 `require('foo')`  只会返回被缓存的对象，不会重复加载。\n\n###### 3、内置模块\n\n- 内置模块优先级最高。使用  `require('http')`  时，就算有相同的js模块名 `http.js`  也会被忽略，而使用内置模块 http，当然，可以用 `require('node:http')` 方式，让代码更易于理解。\n\n###### 4、包裹模块\n\nNode.js 会用函数包裹加载的模块，防止多个模块内部全局变量名的冲突，同时传递几个必要要参数给模块，方便写模块代码。\n\n```js\n(function(exports, require, module, __filename, __dirname) {\n  // 实际模块代码，在这里\n});\n```\n\n###### 5、ECMAscript 标准中使用 `require`\n\n创建  `example.mjs`  文件，此后缀文件是  ECMAscript  标准，所以无法直接使用 require，但可以用Node.js  的内置模块 `Module` 来实现 require。\n\n```js\n// example.mjs\nimport { createRequire } from 'module';\nconst require = createRequire(import.meta.url);\n\n// sibling-module.js is a CommonJS module.\nconst siblingModule = require('./sibling-module');\n```\n\n---\n\n##### 七、参考文档\n\n- [CommonJS - Node.js - 官方文档](https://nodejs.org/api/modules.html)\n- [ECMAScript - Node.js - 官方文档](https://nodejs.org/api/esm.html)\n- [ECMAScript - 官方文档](https://tc39.es/ecma262/#sec-intro)\n\n\n","url":"https://learn-anything.cn/nodejs-commonjs-ecmascript","author":null,"published_at":"2021-11-04T01:13:35.000Z","tags":[{"name":"Nodejs","slug":"nodejs"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"Node.js中CommonJS和ECMAScript有什么区别？","slug":"nodejs-commonjs-ecmascript"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-symbol",
    "result": {"data":{"strapiArticles":{"id":"Articles_484","title":"JavaScript的Symbol是什么？","description":"Symbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突。","content":"##### 一、Symbol 是什么？\n\nSymbol 是 ECMAScript 2015 中新添加的特性，生成一个唯一标识符，可用于属性名称、也可用于属性值。目的是消除属性名称冲突。\n\n---\n\n##### 二、怎么用？\n\n###### 1、新建 symbol\n\n用 Symbol() 函数来创建 symbol，可用字符串作为其参数，但只能用于调试。\n\n```js\n// 1、创建新 symbol\nlet sym1 = Symbol()\nlet sym2 = Symbol('foo')\n\n// 2、每次调用都创建新的 symbol\nSymbol('foo') === Symbol('foo')  // false\n\n// 3、不可以用 new 创建\nlet sym = new Symbol()  // TypeError\n\n// 4、需调用 toString() 才能转为 字符串\nlet Sym = Symbol(\"Sym\")\nalert(Sym)  // TypeError: Cannot convert a Symbol value to a string\nalert(Sym.toString())  // Symbol(Sym), now it works\n```\n\n---\n\n######  2、用于属性名称\n\nsymbol 用于对象的属性名称，保证其属性名的唯一性。\n\n```html\n<!DOCTYPE html>\n<html lang='zh-CN'>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Symbol</title>\n    <script>\n        const MY_KEY = Symbol();\n        let obj = {};\n        obj[MY_KEY] = 123;\n        console.log(obj[MY_KEY]); // 123\n\n        let obj2 = {\n            [MY_KEY]: 123\n        };\n        console.log(obj2[MY_KEY]); // 123\n\n        let obj3 = {\n            [MY_KEY]() {\n                return 'bar';\n            }\n        };\n        console.log(obj3[MY_KEY]()); // bar\n\n    </script>\n</head>\n\n<body>\n    <h1>Symbol : 打开 Console 看结果！</h1>\n</body>\n\n</html>\n```\n\n---\n\n###### 3、用于定义常量\n\n用 symbol 替换 无意义的字符串。\n\n```html\n<!DOCTYPE html>\n<html lang='zh-CN'>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Symbol</title>\n    <script>\n        // log.levels = {\n        //     DEBUG: 'debug',\n        //     INFO: 'info',\n        //     WARN: 'warn',\n        // };\n        // 用下面代码替换上面。\n\n        log.levels = {\n            DEBUG: Symbol('debug'),\n            INFO: Symbol('info'),\n            WARN: Symbol('warn'),\n        };\n\n        function log(type, message) {\n            switch (type) {\n                case log.levels.DEBUG:\n                    console.log(message);\n                    break;\n                case log.levels.INFO:\n                    console.log(message);\n                    break;\n                case log.levels.WARN:\n                    console.log(message);\n                    break;\n                default:\n                    console.log(\"default\");\n                    break;\n            }\n        }\n\n        log(log.levels.DEBUG, 'debug message');\n        log(log.levels.INFO, 'info message');\n\n    </script>\n</head>\n\n<body>\n    <h1>Symbol : 打开 Console 看结果！</h1>\n</body>\n\n</html>\n```\n\n---\n\n###### 4、Symbol.iterator\n\nECMAScript 6 中用 Symbol.iterator 作为迭代功能的函数名。\n\n```html\n<!DOCTYPE html>\n<html lang='zh-CN'>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Symbol</title>\n    <script>\n        let obj = {\n            data: ['hello', 'world'],\n            [Symbol.iterator]() {\n                const self = this;\n                let index = 0;\n                return {\n                    next() {\n                        if (index < self.data.length) {\n                            return {\n                                value: self.data[index++]\n                            };\n                        } else {\n                            return { done: true };\n                        }\n                    }\n                };\n            }\n        };\n\n        for (let x of obj) {\n            console.log(x);\n        }\n\n    </script>\n</head>\n\n<body>\n    <h1>Symbol : 打开 Console 看结果！</h1>\n</body>\n\n</html>\n```\n\n---\n\n##### 三、其他\n\n###### 1、获取属性名称\n\n获取属性名称的方式，包括 symbol属性名称。\n\n```html\n<!DOCTYPE html>\n<html lang='zh-CN'>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Symbol</title>\n    <script>\n        const MY_KEY = Symbol();\n        let obj2 = {\n            [MY_KEY]: 123,\n            enum: 2,\n            nonEnum: 3\n        };\n\n        // 获取属性名称的几种方法\n        console.log(Object.getOwnPropertyNames(obj2)); // ['enum', 'nonEnum']\n        console.log(Object.getOwnPropertySymbols(obj2)); // [Symbol()]\n        console.log(Reflect.ownKeys(obj2)); // ['enum', 'nonEnum', Symbol()]\n\n    </script>\n</head>\n\n<body>\n    <h1>Symbol : 打开 Console 看结果！</h1>\n</body>\n\n</html>\n```\n\n---\n\n##### 四、参考文档\n\n- [Symbol  -  MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n- [Symbols in ECMAScript 6](https://2ality.com/2014/12/es6-symbols.html)\n\n- [Data_structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)\n\n  ","url":"https://learn-anything.cn/java-script-symbol","author":null,"published_at":"2021-12-20T01:51:59.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"JavaScript的Symbol是什么？","slug":"java-script-symbol"}},
    "staticQueryHashes": ["63159454"]}
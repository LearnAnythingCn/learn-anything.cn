{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/react-context",
    "result": {"data":{"strapiArticles":{"id":"Articles_93","title":"React的Context对象解决props传递数据的烦恼！","description":"Context是啥？React.createContext、Class.contextType、Context.Provider、Context.Consumer、Context.displayName分别是什么意思？怎么用？函数组件和class组件分别怎么使用context？","content":"##### 一、props 传递数据的烦恼\n\n作为子组件的 `Toolbar`  必须显式定义 `theme`  属性， `ThemedButton`  才能够获的 theme 数据。当 `ThemedButton`  与 `App`  之间嵌套了很多层，且使用`ThemedButton`  的页面又非常多，那么工作就会变的异常麻烦。\n\n```js\nclass App extends React.Component {\n    render() {\n        return <Toolbar theme=\"dark\" />;\n    }\n}\n\nfunction Toolbar(props) {\n    return (\n        <div>\n            <ThemedButton theme={props.theme} />\n        </div>\n    );\n}\n\nclass ThemedButton extends React.Component {\n    render() {\n        return <Button theme={this.props.theme} />;\n    }\n}\n```\n\n---\n\n##### 二、Context 解决方案\n\n用 React.createContext  创建的  Context 对象，不论组件嵌套多深，都无需再中间组件显式传递 theme 属性，也可以把 theme 属性值传递下去。\n\n```jsx\nconst ThemeContext = React.createContext('light');\nclass App extends React.Component {\n    render() {\n        return (\n            <ThemeContext.Provider value=\"dark\">\n                <Toolbar />\n            </ThemeContext.Provider>\n        );\n    }\n}\n\nfunction Toolbar() {\n    return (\n        <div>\n            <ThemedButton />\n        </div>\n    );\n}\n\nclass ThemedButton extends React.Component {\n    static contextType = ThemeContext;\n    render() {\n        return <Button theme={this.context} />;\n    }\n}\n```\n\n---\n\n##### 三、重要概念说明\n\n###### 1、React.createContext\n\n```js\n// 创建Context对象，并设置缺省值(defaultValue)。\nconst MyContext = React.createContext(defaultValue);\n```\n\n---\n\n###### 2、Context.Provider\n\n```jsx\n// 给 Context 对象赋值\n<MyContext.Provider value={/* 某个值 */}></MyContext.Provider>\n```\n\n---\n\n###### 3、Class.contextType\n\nclass 组件中获取Context对象的数据，分两步：\n\n- 把 class组件的 contextType 属性 与 Context对象关联起来；\n\n- 通过 `this.context` 来获取数据。\n\n- 备注：获取数据的过程就是：从父组件一直往上找最近 Context.Provider 的 value 值，找不到就使用 Context 的缺省值。\n\n  ```js\n  // 使用方法一\n  class MyClass extends React.Component {\n      render() {\n          let value = this.context;\n      }\n  }\n  MyClass.contextType = MyContext;\n  \n  // 使用方式二\n  class MyClass extends React.Component {\n      static contextType = MyContext;\n      render() {\n          let value = this.context;\n      }\n  }\n  ```\n\n---\n\n###### 4、Context.Consumer\n\n```jsx\n// 让组件中Context数据，随着Context的变化而自动变化\n<MyContext.Consumer>\n    {value => (<div style={{ backgroundColor: value.background }}></div>)}\n</MyContext.Consumer>\n```\n\n---\n\n###### 5、Context.displayName\n\n```js\n// 类型为字符串，是Context在React DevTools显示的名字，方便调试。\n\nconst MyContext = React.createContext(/* some value */);\nMyContext.displayName = 'MyDisplayName';\n\n<MyContext.Provider> // \"MyDisplayName.Provider\" 在 DevTools 中\n<MyContext.Consumer> // \"MyDisplayName.Consumer\" 在 DevTools 中\n```\n\n---\n\n##### 四、函数组件，使用Context\n\n函数组件中没有  contextType  属性，所以使用  `useContext`  这个 Hook 函数来解决 props 传递数据的烦恼。\n\n```js\nconst themes = {\n    light: {\n        foreground: \"#000000\",\n        background: \"#eeeeee\"\n    },\n    dark: {\n        foreground: \"#ffffff\",\n        background: \"#222222\"\n    }\n};\n// 第一步：创建Context，并设置缺省值\nconst ThemeContext = React.createContext(themes.light);\n\nfunction App() {\n    // 第二步：给Context赋值\n    return (\n        <ThemeContext.Provider value={themes.dark}>\n            <Toolbar />\n        </ThemeContext.Provider>\n    );\n}\n\nfunction Toolbar(props) {\n    return (\n        <div>\n            <ThemedButton />\n        </div>\n    );\n}\n\nfunction ThemedButton() {\n    // 第三步：将Context与函数组件，通过useContext关联\n    const theme = useContext(ThemeContext);\n\n    // 第四步：直接使用\n    return (\n        <button style={{ background: theme.background, color: theme.foreground }}>\n            I am styled by theme context!\n        </button>\n    );\n}\n```\n\n---\n\n##### 五、参考链接：\n\n- [Context - 官方文档](https://zh-hans.reactjs.org/docs/context.html)\n\n\n","url":"https://learn-anything.cn/react-context","published_at":"2021-10-05T07:25:24.000Z","tags":[{"name":"React","slug":"react"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"React的Context对象解决props传递数据的烦恼！","slug":"react-context"}},
    "staticQueryHashes": ["63159454"]}
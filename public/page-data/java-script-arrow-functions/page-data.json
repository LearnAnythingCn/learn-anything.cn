{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-arrow-functions",
    "result": {"data":{"strapiArticles":{"id":"Articles_110","title":"JavaScript箭头函数与普通函数的区别？","description":"箭头函数是什么？怎么使用？箭头函数与this、arguments、super、new.target、prototype等关系？","content":"##### 一、什么是箭头函数？\n\n箭头函数用更简洁的方式，来完成普通函数的功能，但是不具备普通函数拥有的属性：  `this`  、   `arguments`  、  `super`  、  `new.target`，有两种表达形式：\n\n###### 1、`(...args) => expression`  \n\nargs表示参数有0个、1个、多个；expression表示一个js表达式，只有一行代码。\n\n###### 2、 `(...args) => { body }`\n\nargs表示参数有0、1、多个；body表示有多行代码，最后一行必须是  `return`  语句。\n\n---\n\n##### 二、不同表达形式：\n\n###### 1、参数不同，写法不同\n\n```js\n// 1、没有参数\nlet test = () => alert(\"Hello!\");\n\n// 2、只有一个参数：() 可以省略\nlet test = n => n * 2;\nlet test = (n) => n * 2;\n\n// 等价于下面普通函数\nlet test = function (n) {\n    return expression;\n};\n```\n\n###### 2、表达式不同，写法不同\n\n```js\n// 1、只有一行 return 表达式，可省略 return 和 {}\nlet func = (arg1, arg2, ...argN) => {\n  return expression;\n}\n// 等价于下面箭头函数\nlet func = (arg1, arg2, ...argN) => expression\n\n// 等价于下面普通函数。\nlet func = function (arg1, arg2, ...argN) {\n    return expression;\n};\n```\n\n###### 3、用于条件运算符\n\n```js\nlet age = prompt(\"What is your age?\", 18);\n\nlet welcome = (age < 18) ?\n    () => alert('Hello') :\n    () => alert(\"Greetings!\");\n\nwelcome();\n```\n\n###### 4、用于数组遍历\n\n```js\nvar elements = [\n    'Hydrogen',\n    'Helium',\n    'Lithium',\n    'Beryllium'\n];\n\n// 1、普通函数写法：\nelements.map(function (element) {\n    return element.length;\n});\n\n// 2、箭头函数写法：\nelements.map((element) => {\n    return element.length;\n});\n\n// 3、只有一个参数，可省略()\nelements.map(element => {\n    return element.length;\n});\n\n// 4、表达式只有一行return语句，可省略  return  和 {}\nelements.map(element => element.length);\n\n// 5、参数解构方式\n// elements数组中每一项都有length属性，可以通过参数解构获得结果，方法如下：\n// 注意：lengthFooBArX只是一个变量，可以替换成任意合法变量名\nelements.map(({ \"length\": lengthFooBArX }) => lengthFooBArX);\n\n// 以上输出结果都为: [8, 6, 7, 9]\n```\n\n###### 5、用于递归\n\n```js\nvar fact = (x) => (x == 0 ? 1 : x * fact(x - 1));\nfact(5);\n\n// 输出：120\n```\n\n###### 6、使用闭包\n\n```js\n// 1、箭头函数体的闭包（ i=0 是默认参数）\nvar Add = (i = 0) => {\n    return (() => (++i))\n};\nvar v = Add();\nv();           //1\nv();           //2\n\n// 因为仅有一个返回，return 及括号（）也可以省略\nvar Add = (i = 0) => () => (++i);\n```\n\n###### 7、其他形式举例\n\n```js\n// 1、空的箭头函数返回 undefined\nlet empty = () => { };\n\n// 2、立即执行函数表达式，返回 \"foobar\"\n(() => 'foobar')();\n\n// 3、更简明的promise链\npromise.then(a => {\n    // ...\n}).then(b => {\n    // ...\n});\n\n// 4、无参数箭头函数在视觉上容易分析\nsetTimeout(() => {\n    console.log('I happen sooner');\n    setTimeout(() => {\n        // deeper code\n        console.log('I happen later');\n    }, 1);\n}, 1);\n```\n\n---\n\n##### 三、重要特性\n\n###### 1、没有 arguments\n\n```js\n// 1、普通函数中的arguments正确使用：\nfunction foo(n) {\n    // 隐式绑定 foo函数的参数 与 arguments对象. \n    // arguments[0] 表示传给foo函数的第一个参数，也就是n\n    var f = () => arguments[0] + n;\n    return f();\n}\nfoo(1); // 2\nfoo(3); // 6\nfoo(3, 2);//6\n\n// 2、箭头函数中无法使用arguments\n// ReferenceError: arguments is not defined\nvar func = (a, b) => {\n    return arguments[0];\n}\n```\n\n###### 2、没有prototype属性\n\n```js\nvar Foo = () => {};\nconsole.log(Foo.prototype); // undefined\n```\n\n###### 3、不能使用new\n\n箭头函数没有this，不能用作构造函数，也就无法使用  `new`\n\n```js\nvar Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor\n```\n\n---\n\n##### 四、需要()的场景\n\n###### 1、对象作为表达式\n\n用  `()`  包裹  `{}表示的对象`  来作为表达式返回，否则  `{}` 会作为表达式来解析，出现语法错误。\n\n```js\n// Calling func() returns undefined!\nvar func = () => { foo: 1 };\n// SyntaxError: function statement requires a name\nvar func = () => { foo: function() { } };\n\n// 正确写法如下：\nvar func = () => ({ foo: 1 });\nvar func = () => ({ foo: function () { } });\n```\n\n###### 2、换行\n\n```js\n// 1、语法错误：SyntaxError: expected expression, got '=>'\nvar func = ()\n            => 1;\n\n// 2、正确，可以在 => 后换行\nvar func = (a, b, c) =>\n    1;\n// 3、正确，用 () 来换行\nvar func = (a, b, c) => (\n    1\n);\n\n// 4、正确，用 () 来换行\nvar func = (\n    a,\n    b,\n    c\n) => 1;\n```\n\n###### 3、作为单独表达式\n\n```js\nlet callback;\n\n// 1、正确\ncallback = callback || function () { };\n\n// 2、错误：SyntaxError: invalid arrow-function arguments\ncallback = callback || () => { };\n\n// 3、正确\ncallback = callback || (() => { });    // ok\n```\n\n---\n\n##### 五、箭头函数没有this\n\n普通函数、对象方法中的this，都是在运行时定义。\n\n- 普通函数的this 等于 undefined，无法调用；\n- 对象方法的this，指向对象本身。\n- 箭头函数，不会定义自己的this，它只会继承自己上一层作用域的this。\n\n---\n\n###### 1、对象中的箭头函数\n\n```js\nvar obj = {\n    i: 10,\n    b: () => console.log(this.i, this),\n    c: function () {\n        console.log(this.i, this)\n    }\n}\nobj.b();\n// 输出结果：undefined, Window{...}\n// 箭头函数b，没有上层作用域可以继承this，也就无法访问。\n\nobj.c();\n// 输出结果：10, Object {...}\n```\n\n###### 2、正确使用箭头函数中的this\n\n```js\n// 实例1：\nfunction Person() {\n    this.age = 0;\n\n    // 箭头函数作为 setInterval 的一个参数，继承了 this\n    setInterval(() => {\n        this.age++;\n        console.log(\"age:\", this.age);\n    }, 1000);\n}\n\nvar p = new Person();\n```\n\n```js\n// 实例2：\n// 箭头函数 student 继承了 showList 的 this\nlet group = {\n    title: \"Our Group\",\n    students: [\"John\", \"Pete\", \"Alice\"],\n\n    showList() {\n        this.students.forEach(\n            student => alert(this.title + ': ' + student)\n        );\n    }\n};\n\ngroup.showList();\n```\n\n###### 3、普通函数无法访问this\n\n```js\n# 普通函数中 this 等于 undefined ，所用 this.title 必然因为无法识别而报错\nlet group = {\n    title: \"Our Group\",\n    students: [\"John\", \"Pete\", \"Alice\"],\n\n    showList() {\n        this.students.forEach(function (student) {\n            // Error: Cannot read property 'title' of undefined\n            alert(this.title + ': ' + student)\n        });\n    }\n};\n\ngroup.showList();\n```\n\n---\n\n##### 六、参考链接：\n\n- [箭头函数，基础知识](https://zh.javascript.info/arrow-functions-basics)\n- [深入理解箭头函数](https://zh.javascript.info/arrow-functions)\n\n- [Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n\n\n","url":"https://learn-anything.cn/java-script-arrow-functions","author":null,"published_at":"2021-10-11T05:03:49.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"JavaScript箭头函数与普通函数的区别？","slug":"java-script-arrow-functions"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-ajax",
    "result": {"data":{"strapiArticles":{"id":"Articles_536","title":"AJAX是什么？","description":"AJAX 是 Asynchronous JavaScript And XML 的缩写，使用 XMLHttpRequest 发送或接收 JSON，XML，HTML和text文本等格式的数据，与 web 服务器进行异步通讯。优点是，不用重新加载页面就可以与服务器进行通讯，达到更新数据的目的。","content":"##### 一、ajax 是什么？\n\nAJAX 是 Asynchronous JavaScript And XML 的缩写，使用 XMLHttpRequest 发送或接收 JSON，XML，HTML和text文本等格式的数据，与 web 服务器进行异步通讯。\n\n优点是，不用重新加载页面就可以与服务器进行通讯，达到更新数据的目的。\n\n```js\n// 一个简单 XMLHttpRequest 使用实例\nconst xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"http://www.example.org/example.txt\");\nxhr.onload = () => resolve(xhr.responseText);\nxhr.onerror = () => reject(xhr.statusText);\nxhr.send();\n```\n\n---\n\n##### 二、发送 form 数据\n\n通过 XMLHttpRequest 和 FormData 来发送 form数据到 web 服务器。\n\n```html\n<button type=\"button\" onclick=\"sendData({test:'ok'})\">点我！</button>\n```\n\n```js\nfunction sendData(data) {\n  var XHR = new XMLHttpRequest();\n  var FD  = new FormData();\n\n  // 把我们的数据添加到这个FormData对象中\n  for(name in data) {\n    FD.append(name, data[name]);\n  }\n\n  // 定义数据成功发送并返回后执行的操作\n  XHR.addEventListener('load', function(event) {\n    alert('Yeah! 已发送数据并加载响应。');\n  });\n\n  // 定义发生错误时执行的操作\n  XHR.addEventListener('error', function(event) {\n    alert('Oops! 出错了。');\n  });\n\n  // 设置请求地址和方法\n  XHR.open('POST', 'https://example.com/cors.php');\n\n  // 发送这个formData对象,HTTP请求头会自动设置\n  XHR.send(FD);\n}\n```\n\n---\n\n##### 三、发送二进制数据 \n\n上传文件到 web 服务器。\n\n```html\n<form id=\"myForm\">\n  <p>\n    <label for=\"i1\">文本数据：</label>\n    <input id=\"i1\" name=\"myText\" value=\"一些文本数据\">\n  </p>\n  <p>\n    <label for=\"i2\">文件数据：</label>\n    <input id=\"i2\" name=\"myFile\" type=\"file\">\n  </p>\n  <button>提交！</button>\n</form>\n```\n\n```js\n// 因为我们想获取 DOM 节点,\n// 我们在页面加载时初始化我们的脚本.\nwindow.addEventListener('load', function () {\n\n  // 这些变量用于存储表单数据\n  var text = document.getElementById(\"i1\");\n  var file = {\n        dom    : document.getElementById(\"i2\"),\n        binary : null\n      };\n\n  // 使用 FileReader API 获取文件内容\n  var reader = new FileReader();\n\n  // 因为 FileReader 是异步的, 会在完成读取文件时存储结果\n  reader.addEventListener(\"load\", function () {\n    file.binary = reader.result;\n  });\n\n  // 页面加载时, 如果一个文件已经被选择, 那么读取该文件.\n  if(file.dom.files[0]) {\n    reader.readAsBinaryString(file.dom.files[0]);\n  }\n\n  // 如果没有被选择，一旦用户选择了它，就读取文件。\n  file.dom.addEventListener(\"change\", function () {\n    if(reader.readyState === FileReader.LOADING) {\n      reader.abort();\n    }\n\n    reader.readAsBinaryString(file.dom.files[0]);\n  });\n\n  // 发送数据是我们需要的主要功能\n  function sendData() {\n    // 如果存在被选择的文件，等待它读取完成\n    // 如果没有, 延迟函数的执行\n    if(!file.binary && file.dom.files.length > 0) {\n      setTimeout(sendData, 10);\n      return;\n    }\n\n    // 要构建我们的多重表单数据请求,\n    // 我们需要一个XMLHttpRequest 实例\n    var XHR = new XMLHttpRequest();\n\n    // 我们需要一个分隔符来定义请求的每一部分。\n    var boundary = \"blob\";\n\n    // 将我们的主体请求存储于一个字符串中\n    var data = \"\";\n\n    // 所以，如果用户已经选择了一个文件\n    if (file.dom.files[0]) {\n      // 在请求体中开始新的一部分\n      data += \"--\" + boundary + \"\\r\\n\";\n\n      // 把它描述成表单数据\n      data += 'content-disposition: form-data; '\n      // 定义表单数据的名称\n            + 'name=\"'         + file.dom.name          + '\"; '\n      // 提供文件的真实名字\n            + 'filename=\"'     + file.dom.files[0].name + '\"\\r\\n';\n      // 和文件的MIME类型\n      data += 'Content-Type: ' + file.dom.files[0].type + '\\r\\n';\n\n      // 元数据和数据之间有一条空行。\n      data += '\\r\\n';\n\n      // 将二进制数据添加到主体请求中\n      data += file.binary + '\\r\\n';\n    }\n\n    // 文本数据更简单一些\n    // 在主体请求中开始一个新的部分\n    data += \"--\" + boundary + \"\\r\\n\";\n\n    // 声明它是表单数据，并命名它\n    data += 'content-disposition: form-data; name=\"' + text.name + '\"\\r\\n';\n    // 元数据和数据之间有一条空行。\n    data += '\\r\\n';\n\n    // 添加文本数据到主体请求中\n    data += text.value + \"\\r\\n\";\n\n    // 一旦完成，“关闭”主体请求\n    data += \"--\" + boundary + \"--\";\n\n    // 定义成功提交数据执行的语句\n    XHR.addEventListener('load', function(event) {\n      alert('✌！数据已发送且响应已加载。');\n    });\n\n    // 定义发生错误时做的事\n    XHR.addEventListener('error', function(event) {\n      alert('哎呀！出现了一些问题。');\n    });\n\n    // 建立请求\n    XHR.open('POST', 'https://example.com/cors.php');\n\n    // 添加需要的HTTP头部来处理多重表单数据POST请求\n    XHR.setRequestHeader('Content-Type','multipart/form-data; boundary=' + boundary);\n\n    // 最后，发送数据。\n    XHR.send(data);\n  }\n\n  // 访问表单…\n  var form = document.getElementById(\"myForm\");\n\n  // …接管提交事件\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n    sendData();\n  });\n});\n```\n\n\n\n---\n\n##### 四、参考文档\n\n- [AJAX](https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX)\n\n- [XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\n\n\n","url":"https://learn-anything.cn/java-script-ajax","published_at":"2021-12-28T07:17:44.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"AJAX是什么？","slug":"java-script-ajax"}},
    "staticQueryHashes": ["63159454"]}
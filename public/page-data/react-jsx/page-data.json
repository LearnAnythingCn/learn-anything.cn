{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/react-jsx",
    "result": {"data":{"strapiArticles":{"id":"Articles_100","title":"JSX是什么？","description":"jsx怎么使用？jsx与babel之间的关系？jsx怎么支持js语法表达式？","content":"##### 一、JSX是什么？\n\n`JSX`  是  ` JavaScript`   的扩展语法，这种  `<MyButton></MyButton>` 标签的写法就是  JSX。JSX  编写的组件通过预处理器  babel  解析后，再交给  React  库渲染到指定父容器下，形成最终html页面。\n\n```jsx\n<MyButton color=\"blue\" shadowSize={2}>\n    Click Me\n</MyButton>\n```\n\n上面 jsx 写的组件，被 babel 解析下如下代码：\n\n```js\nReact.createElement(\n    MyButton,\n    { color: 'blue', shadowSize: 2 },\n    'Click Me'\n)\n```\n\n---\n\n##### 二、JSX的语法及使用方式\n\n###### 1、基本表达\n\n```jsx\n// jsx声明变量\nconst element = <h1>Hello, world!</h1>;\n\n// jsx中设置属性\nconst element = <div tabIndex=\"0\"></div>;\nconst element = <img src={user.avatarUrl}></img>;\nconst element = <img src={user.avatarUrl} />;\n\n// jsx中可以包含多个子元素\nconst element = (\n    <div>\n        <h1>Hello!</h1>\n        <h2>Good to see you here.</h2>\n    </div>\n);\n\n// jsx作为表达式，用在return返回\nfunction getGreeting(user) {\n    if (user) {\n        return <h1>Hello, {formatName(user)}!</h1>;\n    }\n    return <h1>Hello, Stranger.</h1>;\n}\n```\n\n---\n\n###### 2、`{}`\n\n`{}`  使得 ` jsx`  可以直接使用  `js`  语法表达式。\n\n```jsx\n// JSX 中调用 js 函数：\nfunction formatName(user) {\n    return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n    firstName: 'Harper',\n    lastName: 'Perez'\n};\n  \nconst element = (\n    <h1>\n        Hello, {formatName(user)}!\n    </h1>\n);\n// 渲染element元素并加载到父容器root下\nReactDOM.render(\n    element,\n    document.getElementById('root')\n);\n```\n\n```jsx\n# JSX 嵌入 复杂表达式\nfunction NumberList(props) {\n    const numbers = props.numbers;\n    return (\n        <ul>\n            {numbers.map((number) =>\n                <ListItem key={number.toString()}\n                    value={number} />\n            )}\n        </ul>\n    );\n}\n```\n\n###### 3、`.`  \n\n点语法，表示模块中的某一个组件。如下，使用MyComponents模块中的DatePicker组件，点语法非常方便。\n\n```jsx\nimport React from 'react';\n\nconst MyComponents = {\n    DatePicker: function DatePicker(props) {\n        return <div>Imagine a {props.color} datepicker here.</div>;\n    }\n}\n\nfunction BlueDatePicker() {\n    return <MyComponents.DatePicker color=\"blue\" />;\n}\n```\n\n###### 4、`...`\n\n用展开运算符 `...` 来传递整个 props 对象。以下两个组件是等价的：\n\n```jsx\nfunction App1() {\n    return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n}\n\nfunction App2() {\n    const props = { firstName: 'Ben', lastName: 'Hector' };\n    return <Greeting {...props} />;\n}\n```\n\n```jsx\n// 用法2：导出需要修改属性kind，其他属性用...来表示\nconst Button = props => {\n    const { kind, ...other } = props;\n    const className = kind === \"primary\" ? \"PrimaryButton\" : \"SecondaryButton\";\n    return <button className={className} {...other} />;\n};\n\nconst App = () => {\n    return (\n        <div>\n            <Button kind=\"primary\" onClick={() => console.log(\"clicked!\")}>\n                Hello World!\n            </Button>\n        </div>\n    );\n};\n```\n\n###### 5、大写组件\n\nJSX 写的组件名字，必须以大写字母开始。\n\n```jsx\nimport React from 'react';\n\n// 正确！组件需要以大写字母开头：\nfunction Hello(props) {\n    // 正确！ 这种 <div> 的使用是合法的，因为 div 是一个有效的 HTML 标签：\n    return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n    // 正确！React 知道 <Hello /> 是一个组件，因为它是大写字母开头的：\n    return <Hello toWhat=\"World\" />;\n}\n```\n\n###### 6、大写变量 & 元素\n\n用大写变量SpecificStory 作为元素名称，运行期间根据 props 属性值，决定加载什么组件，非常方便。\n\n```jsx\nimport React from 'react';\nimport { PhotoStory, VideoStory } from './stories';\n\nconst components = {\n    photo: PhotoStory,\n    video: VideoStory\n};\n\nfunction Story(props) {\n    // 正确！JSX 类型可以是大写字母开头的变量。\n    const SpecificStory = components[props.storyType];\n    return <SpecificStory story={props.story} />;\n}\n```\n\n###### 7、Props 默认值为  `True`\n\n```jsx\n// 下面这两句是等价的\n<MyTextBox autocomplete />\n<MyTextBox autocomplete={true} />\n```\n\n###### 8、props.children\n\nprops.children 可以表示任意类型的子元素：\n\n```jsx\n// props.children 是一个简单的未转义字符串 \"Hello world!\"\nfunction Welcome(props) {\n  return <p>{props.children}</p>;\n}\n\n<Welcome>Hello world!</Welcome>\n```\n\n```jsx\n// props.children 表示回调函数: {(index) => <div key={index}>This is item {index} in the list</div>}\nfunction Repeat(props) {\n    let items = [];\n    for (let i = 0; i < props.numTimes; i++) {\n        items.push(props.children(i));\n    }\n    return <div>{items}</div>;\n}\n\nfunction ListOfTenThings() {\n    return (\n        <Repeat numTimes={10}>\n            {(index) => <div key={index}>This is item {index} in the list</div>}\n        </Repeat>\n    );\n}\n```\n\n###### 9、其他表达\n\n```jsx\n// 1、只有showHeader 为true时， Header才会被加载渲染\n<div>\n  {showHeader && <Header />}\n  <Content />\n</div>\n\n// 2、即使 props.messages.length 为0，MessageList也会被加载\n<div>\n    {props.messages.length &&\n        <MessageList messages={props.messages} />\n    }\n</div>\n\n// 3、上面代码修改如下，可符合预期\n<div>\n    {props.messages.length > 0 &&\n        <MessageList messages={props.messages} />\n    }\n</div>\n\n// 4、如下子元素是不会被渲染\n<div />\n<div></div>\n<div>{false}</div>\n<div>{null}</div>\n<div>{undefined}</div>\n<div>{true}</div>\n\n// 5、只能把他们转为字符串显示\n<div>\n  My JavaScript variable is {String(myVariable)}.\n</div>\n```\n\n---\n\n##### 三、用JSX与不用JSX比较\n\n###### 1、使用JSX的组件：\n\n```js\nclass Hello extends React.Component {\n    render() {\n        return <div>Hello {this.props.toWhat}</div>;\n    }\n}\n\nReactDOM.render(\n    <Hello toWhat=\"World\" />,\n    document.getElementById('root')\n);\n```\n\n###### 2、不使用JSX的组件：\n\n```js\nclass Hello extends React.Component {\n    render() {\n        return React.createElement('div', null, `Hello ${this.props.toWhat}`);\n    }\n}\n\nReactDOM.render(\n    React.createElement(Hello, { toWhat: 'World' }, null),\n    document.getElementById('root')\n);\n```\n\n---\n\n##### 四、参考链接：\n\n- [JSX简介 - 官方说明](https://zh-hans.reactjs.org/docs/introducing-jsx.html)\n- [react-without-jsx](https://zh-hans.reactjs.org/docs/react-without-jsx.html)\n- [jsx-in-depth](https://zh-hans.reactjs.org/docs/jsx-in-depth.html)\n\n\n","url":"https://learn-anything.cn/react-jsx","published_at":"2021-10-08T04:56:07.000Z","tags":[{"name":"React","slug":"react"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"JSX是什么？","slug":"react-jsx"}},
    "staticQueryHashes": ["63159454"]}
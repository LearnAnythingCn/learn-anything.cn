{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/git-github",
    "result": {"data":{"strapiArticles":{"id":"Articles_139","title":"学习Git和Github，从这里开始！","description":"Git 是一个免费开源分布式版本控制系统，由于其占用空间小、性能快，优于其他SCM工具(SVN、CVS等)，主要用于代码版本管理。GitHub  是基于 Git 的免费版本控制仓库（开源项目集中地），任何人都可以上传或下载平台上的开源项目，全球有6500万的开发者在使用。\n","content":"##### 一、简介\n\nGit 是一个免费开源分布式版本控制系统，由于其占用空间小、性能快，优于其他SCM工具(SVN、CVS等)，主要用于代码版本管理。\n\nGitHub  是基于 Git 的免费版本控制仓库（开源项目集中地），任何人都可以上传或下载平台上的开源项目，全球有6500万的开发者在使用。\n\n---\n\n##### 二、Git\n\n###### 1、Git 整体结构\n\n![Git](http://static.learn-anything.cn/Git.png)\n\n---\n\n###### 2、版本对象\n\nGit 通过 commit 对象来保存每一次提交的版本内容，其中 tree对象指向所有代码文件的快照。多版本之间通过 parent 对象进行链接。\n\n![commit-and-tree](http://static.learn-anything.cn/commit-and-tree.png)\n\n---\n\n###### 3、文件状态\n\nGit 管理的文件，有4个状态：\n\n- Untracked：没有加到 Git仓库 进行版本管理；\n- Unmodified：提交Git仓库后没有被修改；\n- Modified：提交Git仓库后被修改；\n- Staged：本地暂存区，等待被提交到Git仓库。\n\n![git文件的几个状态](http://static.learn-anything.cn/git文件的几个状态.png)\n\n---\n\n###### 4、安装\n\n- MacOS 使用软件包管理器Homebrew 安装git。[更多...](https://git-scm.com/download/mac)\n\n```shell\n# 1、终端下，执行下面命令，安装 Homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# 2、安装git\nbrew install git\n\n# 3、安装完成，首先设置全局名称和邮箱（修改下面邮箱和用户名）\ngit config --global user.name ×××\ngit config --global user.email ×××@×××\n```\n\n---\n\n- Linux/Unix ：Debian/Ubuntu、Fedora 上用命令安装git。[更多...](https://git-scm.com/download/linux)\n\n```shell\n# Debian/Ubuntu\napt-get install git\n\n# up to Fedora 21\nyum install git\n\t\n# Fedora 22 and later\ndnf install git\n\n# 安装完成，首先设置全局名称和邮箱（修改下面邮箱和用户名）\ngit config --global user.name ×××\ngit config --global user.email ×××@×××\n```\n\n---\n\n- Windows ：用 exe 安装包安装 git。[下载](https://git-scm.com/download/win)\n\n---\n\n###### 5、配置说明\n\n- 优先级：下面配置会覆盖上面配置。[更多...](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE)、[git config](https://git-scm.com/docs/git-config)\n\n|路径文件|描述|\n|-|-|\n|/etc/gitconfig|包含系统上每一个用户及他们仓库的通用配置。 <br />执行 `git config` 时带上 `--system` 选项，才能读写该文件，需要管理员或超级用户权限。|\n|~/.gitconfig<br />~/.config/git/config|只针对当前系统用户。 <br />用 `--global` 选项来读写此文件，修改配置影响当前系统用户的所有仓库。|\n|.git/config|当前仓库的 Git 配置文件。<br />用 `--local`  选项来读写此文件（在仓库目录中，无需此选项）。|\n\n- 查看配置的命令\n\n```shell\n# 查看所有git配置，可能会有重复，因为来自不同配置文件(/etc/gitconfig 和 ~/.gitconfig)，后面显示的配置信息会覆盖前面\n$ git config --list\n\n# 查看所有git配置，以及对应的配置文件\n$ git config --list --show-origin\n\n# 查看单个配置信息\ngit config user.name\n\n# 查询所有可用配置信息\ngit help config\n```\n\n---\n\n###### 6、[.gitignore](https://git-scm.com/docs/gitignore)\n\n有些文件不需要 git 进行版本管理，譬如编译生成的 cache 文件等，可以使用 `.gitignore` 对其进行忽略。\n\n|glob模式|简化版的正则匹配|\n|-|-|\n|*|匹配零个或多个任意字符；|\n|?|只匹配一个任意字符；|\n|[abc]|匹配任何一个列在方括号中的字符 ；|\n|[0-9]|表示匹配所有 0 到 9 的数字；|\n|**|表示匹配任意中间目录，比如 `a/**/z` 可以匹配 `a/z` 、 `a/b/z` 或 `a/b/c/z` 等。|\n\n|序号|描述|\n|-|-|\n|1、|空行或者  `#` 开头的行 都会被忽略；|\n|2、|匹配模式可以以（`/`）开头防止递归；|\n|3、|匹配模式可以以（`/`）结尾指定目录；|\n|4、|要忽略指定模式以外的文件或目录，可以在模式前加上叹号（`!`）取反；|\n\n```shell\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n```\n\n---\n\n###### 7、origin 与 master\n\n远程仓库名字 origin 与分支名字  master 一样，在 Git 中并没有任何特别的含义 \n\n- master ： 是运行 `git init` 时，默认的起始分支名字； \n- origin ： 是运行 `git clone` 时，默认的远程仓库名字， 如果运行 `git clone -o booyah`，那么远程分支名字将会是 `booyah/master`。\n\n---\n\n###### 8、HEAD\n\nHEAD是一个符号引用，指向当前分支。\n\n```shell\n$ cat .git/HEAD\nref: refs/heads/master\n```\n\n- HEAD~{n} ：表示以 HEAD 为起点，向后回溯n个版本；\n\n- HEAD^n ：表示上个版本的第几个提交的版本（当前版本可能由多个版本合并得到）；\n\n如下版本提交记录（提交顺序从上到下、从左到右），A的上个版本是 B 和 C。[更多...](https://git-scm.com/docs/git-rev-parse#Documentation/git-rev-parse.txt-emltrevgtemegemHEADv1510em)\n\n```\nG   H   I   J\n \\ /     \\ /\n  D   E   F\n   \\  |  / \\\n    \\ | /   |\n     \\|/    |\n      B     C\n       \\   /\n        \\ /\n         A\n```\n\n```\nA =      = A^0\nB = A^   = A^1     = A~1\nC =      = A^2\nD = A^^  = A^1^1   = A~2\nE = B^2  = A^^2\nF = B^3  = A^^3\nG = A^^^ = A^1^1^1 = A~3\nH = D^2  = B^^2    = A^^^2  = A~2^2\nI = F^   = B^3^    = A^^3^\nJ = F^2  = B^3^2   = A^^3^2\n```\n\n---\n\n###### 9、常用操作\n\n怎么使用 Git 的命令进行文件版本管理？[详情，看这里！](https://learn-anything.cn/git-cmd-detail)\n\n---\n\n##### 三、GitHub\n\n###### 1、下载代码方式\n\nGitHub 有三种方式下载代码：\n\n- HTTPS：使用登录 github 的用户名和密码，即可clone 项目。\n- SSH：通过上传 SSH key 到 GitHub 后台，这样无需密码即可 clone 项目。\n- [GitHub CLI](https://cli.github.com/)：平台提供管理仓库的终端工具，还可以使用 Github 提供的一些额外功能。\n\n---\n\n###### 2、免密下载代码\n\n配置ssh key，可以免密下载Github代码，既方便又安全，需要使用到 [ssh-keygen](https://learn-anything.cn/ssl-tls-http-https-ssh) 工具。\n\n```shell\n# 1、打开 Terminal（终端），查看已有密钥(.pub后缀的文件名)\n$ ls -al ~/.ssh\n\n# 2、如果没有就创建一个\n$ ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n\n# 3、复制下面输出到剪切板（下面两个适用mac系统）\n$ cat ~/.ssh/id_rsa.pub\n$ pbcopy < ~/.ssh/id_rsa.pub\n$ cat ~/.ssh/id_rsa.pub | pbcopy\n\n# 4、登录github官网，按照这个路径新建 SSH key\nSettings --> SSH and GPG keys --> New SSH key\n1、填写名字（随意填写，保证下次看到能明白是哪里的key）；\n2、粘贴剪切板内容到key的输入框中；\n3、保存。\n\n# 5、Terminal（终端）检查是否可以成功连接\n$ ssh -T git@github.com\n\n# 6、Github随便找个项目，测试下载，看看是否成功\n$ git clone git@github.com:shipwright-io/build.git\n```\n\n---\n\n###### 3、桌面工具\n\n如果觉得在终端输入命令太麻烦，可以使用 Github 提供的桌面应用工具 [GitHub Desktop](https://desktop.github.com/) 。\n\n---\n\n###### 4、Pull Requset\n\n为开源项目贡献代码的流程：\n\n```shell\n# 1、登录Github，找到项目，单击 Fork 按钮来获得项目副本\n# 2、下载项目副本到本地\ngit clonet git@github.com:***/test.git\n\n# 3、新建分支\ncd test\ngit checkout -b branch1\n\n# 4、修改代码\n# 5、提交代码到本地仓库\ngit commit -a -m '修改代码'\n# 6、推送本地仓库到远程仓库(项目副本)\ngit push origin branch1\n# 7、登录 Github，提示项目有新分支，并创建 pull request 发送给源项目\n# 8、源项目作者可以看到这个 pull request，由他决定是关闭还是合并\n```\n\n---\n\n###### 5、Pull Requset(冲突)\n\n如果源项目比副本多很多提交版本，在副本上提交的分支会无法提交 pull request，这样来解决：\n\n```shell\n# 1、下载源项目最新代码\ngit remote add upstream git@github.com:***/orgin.git\ngit fetch upstream\n# 2、合并最新代码到自己分支\ngit merge upstream/master\n\n# 3、有可能会产生冲突，修复冲突并使得功能完好\n\n# 4、推送分支代码到远程仓库(项目副本)\ngit push origin branch1\n\n# 5、登录Github，并发送 pull request 给源项目\n```\n\n---\n\n###### 6、Fork项目\n\nfork项目是不会随着源项目自动更新的，需要手动更新\n\n```shell\n# 1、切换到fork项目的分支master\ngit checkout master\n# 2、拉取源项目代码并合并到当前分支\ngit pull https://github.com/progit/progit2.git\n# 3、推送更新后的代码到fork项目\n$ git push origin master (3)\n```\n\n```shell\n# 上面每次更新都需要输入源项目地址，太麻烦，如下方式简化\n# 1、添加源项目地址到本地\ngit remote add progit https://github.com/progit/progit2.git\n# 2、把master分支的拉取代码的地址设置为源项目地址\ngit branch --set-upstream-to=progit/master master\n# 3、将默认推送仓库设置为 origin\ngit config --local remote.pushDefault origin\n\n# 4、之后更新代码方式\ngit checkout master\ngit pull\ngit push\n```\n\n---\n\n##### 四、VS Code\n\n推荐使用 VS Code 来编辑代码，支持所有编程语言，只需要安装插件即可，git也是内置的，只需要鼠标点击即可完成git操作，无需输入复杂的git命令。\n\n- [VS Code 下载](https://code.visualstudio.com/)\n- [VS Code 中使用 git 的文档！](https://code.visualstudio.com/Docs/editor/versioncontrol)\n\n---\n\n##### 五、参考文档\n\n- [Git - 官方网站](https://git-scm.com/)\n- [Github - 官方网站](https://github.com/)\n- [git 官方中文文档](https://git-scm.com/book/zh/v2)\n\n\n","url":"https://learn-anything.cn/git-github","author":null,"published_at":"2021-10-21T01:30:44.000Z","tags":[{"name":"代码托管","slug":"code-collocation"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"学习Git和Github，从这里开始！","slug":"git-github"}},
    "staticQueryHashes": ["63159454"]}
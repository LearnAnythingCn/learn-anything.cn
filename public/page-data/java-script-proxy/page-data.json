{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-proxy",
    "result": {"data":{"strapiArticles":{"id":"Articles_520","title":"详解JavaScript的Proxy对象","description":"Proxy 对象用于拦截并修改目标对象的指定操作。","content":"##### 一、Proxy 是什么？\n\nProxy 对象用于拦截并修改目标对象的指定操作。\n\n```js\n// 语法\nconst p = new Proxy(target, handler)\n```\n\n- target ：目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。\n- [handler](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy#handler_%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95) ：以函数作为属性的对象，实现拦截和自定义操作。\n\n---\n\n##### 二、怎么用？\n\n###### 1、使用 Proxy 的简单实例\n\n访问不存在的属性，设置默认值返回而不返回 undefined ，get handler 有其具体语法规则，[看这里!](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get#%E8%AF%AD%E6%B3%95)\n\n```js\n// 1、找到合适的 handler 并编写代码\nconst handler = {\n    get: function(obj, prop) {\n        return prop in obj ? obj[prop] : 37;\n    }\n};\n// 2、新建 Proxy 对象\nconst p = new Proxy({}, handler);\n// 3、执行操作\np.a = 1;\np.b = undefined;\n// 4、查看结果\nconsole.log(p.a, p.b);      // 1, undefined\nconsole.log('c' in p, p.c); // false, 37\n```\n\n---\n\n###### 2、目标对象被正确修改\n\n```js\nlet target = {};\nlet p = new Proxy(target, {});\n\np.a = 37;   // 操作转发到目标\n\nconsole.log(target.a);    // 37. 操作已经被正确地转发\n```\n\n---\n\n###### 3、使用 set handler 做数据验证\n\nset handler 有其具体的语法规则，[看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E8%AF%AD%E6%B3%95)\n\n```js\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // 表示成功\n    return true;\n  }\n};\n\nlet person = new Proxy({}, validator);\nperson.age = 100;\nconsole.log(person.age);\n// 100\nperson.age = 'young';\n// 抛出异常: Uncaught TypeError: The age is not an integer\nperson.age = 300;\n// 抛出异常: Uncaught RangeError: The age seems invalid\n```\n\n---\n\n###### 4、扩展构造函数\n\nconstruct handler 的具体语法规则，[看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct#%E8%AF%AD%E6%B3%95)\n\n```js\nfunction extend(sup, base) {\n  var descriptor = Object.getOwnPropertyDescriptor(\n    base.prototype, \"constructor\"\n  );\n  base.prototype = Object.create(sup.prototype);\n  var handler = {\n    construct: function(target, args) {\n      var obj = Object.create(base.prototype);\n      this.apply(target, obj, args);\n      return obj;\n    },\n    apply: function(target, that, args) {\n      sup.apply(that, args);\n      base.apply(that, args);\n    }\n  };\n  var proxy = new Proxy(base, handler);\n  descriptor.value = proxy;\n  Object.defineProperty(base.prototype, \"constructor\", descriptor);\n  return proxy;\n}\n\nvar Person = function (name) {\n  this.name = name\n};\n\nvar Boy = extend(Person, function (name, age) {\n  this.age = age;\n});\n\nBoy.prototype.sex = \"M\";\n\nvar Peter = new Boy(\"Peter\", 13);\nconsole.log(Peter.sex);  // \"M\"\nconsole.log(Peter.name); // \"Peter\"\nconsole.log(Peter.age);  // 13\n```\n\n---\n\n##### 三、参考文档\n\n- [Proxy  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","url":"https://learn-anything.cn/java-script-proxy","published_at":"2021-12-23T06:29:53.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解JavaScript的Proxy对象","slug":"java-script-proxy"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-statements",
    "result": {"data":{"strapiArticles":{"id":"Articles_529","title":"JavaScript的语句和声明","description":"JavaScript中的所有语句和声明，及其详细用法。","content":"##### 一、声明变量\n\n###### 1、let\n\n功能：声明一个块级本地变量。[更多内容，看这里！](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)\n\n```js\nlet x = 1;\n\nif (x === 1) {\n  let x = 2;\n\n  console.log(x);\n  // expected output: 2\n}\n\nconsole.log(x);\n// expected output: 1\n```\n\n---\n\n###### 2、var\n\n功能：声明一个全局的变量。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var)\n\n```js\nvar x = 1;\n\nif (x === 1) {\n  var x = 2;\n\n  console.log(x);\n  // expected output: 2\n}\n\nconsole.log(x);\n// expected output: 2\n```\n\n---\n\n###### 3、const\n\n功能：声明一个常量，通常全部用大写字母。一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const)\n\n```js\n// 定义常量MY_FAV并赋值7\nconst MY_FAV = 7;\n\n// 报错 - Uncaught TypeError: Assignment to constant variable.\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log('my favorite number is: ' + MY_FAV);\n\n// 尝试重新声明会报错\n// Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// MY_FAV 保留给上面的常量，这个操作会失败\nvar MY_FAV = 20;\n\n// 也会报错\nlet MY_FAV = 20;\n```\n\n---\n\n##### 二、函数和类\n\n###### 1、function\n\n功能：定义一个具有指定参数的函数。[更多内容，看这里！](https://learn-anything.cn/java-script-function)\n\n```js\n// 语法\nfunction name([param,[, param,[..., param]]]) {\n   [statements]\n}\n\n// 使用方法一\nhoisted(); // \"foo\"\nfunction hoisted() {\n     console.log(\"foo\");\n}\n\n// 使用方法二\nvar hoisted; \nhoisted = function() {\n  console.log(\"foo\");\n}\nhoisted();\n// \"foo\" \n```\n\n---\n\n###### 3、async\n\n功能：让函数变成异步函数，可以跟await一起使用。[异步编程相关，看这里！](https://learn-anything.cn/javascript-promise)\n\n---\n\n###### 4、return\n\n功能：终止函数的执行，并返回一个指定的值给函数调用者。\n\n```js\nfunction square(x) {\n   return x * x;\n}\nvar demo = square(3);\n// demo will equal 9\n```\n\n---\n\n###### 5、class\n\n功能：class 是 ECMAScript 2015 引入的类对象，其继承特性也是基于原型链。[详细内容，看这里！](https://learn-anything.cn/java-script-class)\n\n```js\nclass Polygon {\n  constructor(height, width) {\n    this.area = height * width;\n  }\n}\n\nconsole.log(new Polygon(4, 3).area);\n// expected output: 12\n```\n\n---\n\n##### 三、流程控制\n\n###### 1、break\n\n功能：中止当前循环。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/break)\n\n```js\nfunction testBreak(x) {\n  var i = 0;\n\n  while (i < 6) {\n    if (i == 3) {\n      break;\n    }\n    i += 1;\n  }\n\n  return i * x;\n}\n```\n\n---\n\n###### 2、continue\n\n功能：终止本次循环，进行下一次循环。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/continue)\n\n```js\nlet text = '';\n\nfor (let i = 0; i < 10; i++) {\n  if (i === 3) {\n    continue;\n  }\n  text = text + i;\n}\n\nconsole.log(text);\n// expected output: \"012456789\"\n```\n\n---\n\n###### 3、if...else\n\n功能：条件语句。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else)\n\n```js\nfunction testNum(a) {\n  let result;\n  if (a > 0) {\n    result = 'positive';\n  } else {\n    result = 'NOT positive';\n  }\n  return result;\n}\n\nconsole.log(testNum(-5));\n// expected output: \"NOT positive\"\n```\n\n---\n\n###### 4、switch\n\n功能：条件语句。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch)\n\n```js\nconst expr = 'Papayas';\nswitch (expr) {\n  case 'Oranges':\n    console.log('Oranges are $0.59 a pound.');\n    break;\n  case 'Mangoes':\n  case 'Papayas':\n    console.log('Mangoes and papayas are $2.79 a pound.');\n    // expected output: \"Mangoes and papayas are $2.79 a pound.\"\n    break;\n  default:\n    console.log(`Sorry, we are out of ${expr}.`);\n}\n```\n\n---\n\n###### 5、throw\n\n功能：抛出用户自定义的异常。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/throw)\n\n```js\nfunction getRectArea(width, height) {\n  if (isNaN(width) || isNaN(height)) {\n    throw 'Parameter is not a number!';\n  }\n}\n\ntry {\n  getRectArea(3, 'A');\n} catch (e) {\n  console.error(e);\n  // expected output: \"Parameter is not a number!\"\n}\n```\n\n---\n\n###### 6、try...catch\n\n功能：捕获异常。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch)\n\n```js\n// 三种可用方式\ntry...catch\ntry...finally\ntry...catch...finally\n\n// 使用实例\ntry {\n  nonExistentFunction();\n} catch (error) {\n  console.error(error);\n  // expected output: ReferenceError: nonExistentFunction is not defined\n  // Note - error messages will vary depending on browser\n}\n```\n\n---\n\n##### 四、迭代器\n\n可迭代对象， 需要具备 `Symbol.iterator`和 `next`这两个函数，即可用 `for...of`进行迭代。譬如：String、Array、TypedArray、Map 和 Set，都是可迭代对象。[更多内容，看这里！](https://learn-anything.cn/java-script-iterator)\n\n---\n\n###### 1、do...while\n\n```js\nvar result = '';\nvar i = 0;\ndo {\n   i += 1;\n   result += i + ' ';\n} while (i < 5);\n```\n\n###### 2、for\n\n```js\nlet str = '';\n\nfor (let i = 0; i < 9; i++) {\n  str = str + i;\n}\n\nconsole.log(str);\n// expected output: \"012345678\"\n```\n\n###### 3、for...in\n\n```js\nvar obj = {a:1, b:2, c:3};\n\nfor (var prop in obj) {\n  console.log(\"obj.\" + prop + \" = \" + obj[prop]);\n}\n```\n\n###### 4、for...of\n\n```js\nconst array1 = ['a', 'b', 'c'];\n\nfor (const element of array1) {\n  console.log(element);\n}\n```\n\n###### 5、for await...of\n\n异步循环中的同步操作。\n\n```js\nasync function* asyncGenerator() {\n  var i = 0;\n  while (i < 3) {\n    yield i++;\n  }\n}\n\n(async function() {\n  for await (num of asyncGenerator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n```\n\n###### 6、while\n\n```js\nlet n = 0;\n\nwhile (n < 3) {\n  n++;\n}\n\nconsole.log(n);\n// expected output: 3\n```\n\n---\n\n##### 五、其他\n\n###### 1、debugger\n\n功能：中断代码执行，跳转到调试器。\n\n```js\nfunction potentiallyBuggyCode() {\n    debugger;\n    // do potentially buggy stuff to examine, step through, etc.\n}\n```\n\n---\n\n###### 2、export\n\n功能：用于导出模块中的函数、对象等。[详细内容，看这里！](https://learn-anything.cn/js-export)\n\n---\n\n###### 3、import\n\n功能：用于导入模块。[详细内容，看这里！](https://learn-anything.cn/js-import)\n\n---\n\n###### 4、import.meta\n\n功能：获取模块的元数据信息.\n\n---\n\n###### 5、label\n\n功能：可以和 break 或 continue 语句一起使用。在语句前加入自定义标识符，如下：loop1\n\n```js\nlet str = '';\n\nloop1:\nfor (let i = 0; i < 5; i++) {\n  if (i === 1) {\n    continue loop1;\n  }\n  str = str + i;\n}\n\nconsole.log(str);\n// expected output: \"0234\"\n```\n\n---\n\n##### 六、参考文档\n\n- [语句声明 Statements](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements)\n\n\n\n\n","url":"https://learn-anything.cn/java-script-statements","published_at":"2021-12-26T04:03:46.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"JavaScript的语句和声明","slug":"java-script-statements"}},
    "staticQueryHashes": ["63159454"]}
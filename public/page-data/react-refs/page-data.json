{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/react-refs",
    "result": {"data":{"strapiArticles":{"id":"Articles_94","title":"React的ref是怎样调用其他元素？","description":"什么是ref？DOM中怎么使用ref？class组件中怎么使用ref？函数组件中怎么使用ref？ref回调？ref转发？组件间传递ref？","content":"##### 一、什么是 `ref`\n\nref  可以理解为指向React 元素的变量，方便其他组件访问这个React元素。\n\n---\n\n##### 二、class组件使用ref\n\n###### 1、createRef : class组件\n\n通过ref ，访问class组件。\n\n```jsx\nclass CustomTextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { text: \"\" };\n    }\n\n    setTextInput(text) {\n        this.setState({ text: text });\n    }\n\n    render() {\n        return (<input type=\"text\" value={this.state.text} onChange={() => { }} />);\n    }\n}\n\nclass SetTextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.textInput.current.setTextInput(\"测试\");\n    }\n\n    render() {\n        return (<CustomTextInput ref={this.textInput} />);\n    }\n}\n```\n\n###### 2、createRef : dom元素\n\n通过ref，访问React元素。\n\n```jsx\n// 使用 ref 调用 input 元素的 focus 方法\nclass CustomTextInput extends React.Component {\n    constructor(props) {\n        super(props);\n      \t// 1、创建 ref\n        this.textInput = React.createRef();\n    }\n\t\t// 3、使用 ref 访问元素\n    componentDidMount() {\n        this.textInput.current.focus();\n    }\n\t\t// 2、将元素的 ref属性 与 创建的ref 进行关联\n    render() {\n        return (\n            <input type=\"text\" ref={this.textInput} />\n        );\n    }\n}\n```\n\n---\n\n##### 三、函数组件中使用ref\n\n###### 1、无法使用 ref 属性\n\n```js\n// 错误案例：\nfunction MyFunctionComponent() {\n    return <input />;\n}\n\nclass Parent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInput = React.createRef();\n    }\n    render() {\n        // This will *not* work!\n        return (\n            <MyFunctionComponent ref={this.textInput} />\n        );\n    }\n}\n```\n\n###### 2、useRef\n\n函数组件使用  `useRef`  来访问React元素。\n\n```jsx\nfunction CustomTextInput(props) {\n    const textInput = React.useRef(null);\n\n    function handleClick() {\n        textInput.current.focus();\n    }\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                ref={textInput} />\n            <input\n                type=\"button\"\n                value=\"Focus the text input\"\n                onClick={handleClick}\n            />\n        </div>\n    );\n}\n```\n\n###### 3、forwardRef \n\n通过 forwardRef 可以转发ref，访问组件的子元素。\n\n```jsx\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// 可以直接获取 DOM button 的 ref：\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n---\n\n##### 四、其他方式访问元素\n\n###### 1、通过回调\n\n```js\nclass CustomTextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInput = null;\n        this.focusTextInput = () => {\n            if (this.textInput) this.textInput.focus();\n        };\n    }\n\n    componentDidMount() {\n        this.focusTextInput();\n    }\n\n    render() {\n        return (\n            <input type=\"text\" ref={element => this.textInput = element} />\n        );\n    }\n}\n```\n\n###### 2、通过 props 属性\n\n```js\nfunction CustomTextInput(props) {\n    return (<input ref={props.inputRef} />);\n}\n\nclass Parent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputElement = null;\n        this.focusTextInput = () => {\n            if (this.inputElement) this.inputElement.focus();\n        };\n    }\n\n    componentDidMount() {\n        this.focusTextInput();\n    }\n    render() {\n        return (<CustomTextInput inputRef={el => this.inputElement = el} />);\n    }\n}\n```\n\n---\n\n##### 五、通过HTML直接查看上面示例效果的方式\n\n增加上面代码到脚本标签下，然后复制到  `index.html`  ，用浏览器打开即可看到效果。\n\n```jsx\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>DOM元素使用ref</title>\n    <!-- 第一步：加载开发版本的React -->\n    <script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n\n    <!-- 部署时，请用下面链接替代上面 -->\n    <!-- <script src=\"https://unpkg.com/react@16/umd/react.production.min.js\" crossorigin></script>\n    <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\" crossorigin></script> -->\n\n    <!-- 第二步：加载开发版本的babel -->\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/babel\">\n       // 这里增加代码\n       ReactDOM.render(<MyCompent />, document.getElementById('root'));\n    </script>\n</body>\n</html>\n```\n\n---\n\n##### 六、参考链接\n\n- [refs-and-the-dom](https://zh-hans.reactjs.org/docs/refs-and-the-dom.html) \n\n- [forwarding-refs](https://zh-hans.reactjs.org/docs/forwarding-refs.html)\n\n\n","url":"https://learn-anything.cn/react-refs","published_at":"2021-10-06T11:09:25.000Z","tags":[{"name":"React","slug":"react"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"React的ref是怎样调用其他元素？","slug":"react-refs"}},
    "staticQueryHashes": ["63159454"]}
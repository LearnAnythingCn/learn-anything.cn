{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/axios",
    "result": {"data":{"strapiArticles":{"id":"Articles_398","title":"学习axios，从这里开始！","description":"Axios 是可以发出 http 请求的 JavaScript 库，在 浏览器 和 node.js 环境中都可以运行。fetch 是 JavaScript 原生库，浏览器都支持，无需安装直接使用；axios 不是原生库，需要安装才能使用；fetch 只能在浏览器环境中运行；axios 既可以在浏览器、也可以在node.js 环境中运行。","content":"##### 一、Axios 是什么？\n\nAxios 是可以发出 http 请求的 JavaScript 库，在 浏览器 和 node.js 环境中都可以运行。\n\n---\n\n##### 二、axios 与 fetch 的区别\n\n###### 1、相同点：\n\n- 都是可以发出 http 请求的  JavaScript 库。\n\n###### 2、不同点\n\n- fetch 是 JavaScript 原生库，浏览器都支持，无需安装直接使用；axios 不是原生库，需要安装才能使用；\n- fetch 只能在浏览器环境中运行；axios 既可以在浏览器、也可以在node.js 环境中运行。\n\n###### 3、其他\n\n- 如果是 node.js  项目，优先选择使用 axios.\n\n---\n\n##### 三、安装 axios\n\n```shell\nnpm install axios\n# 或\nyarn add axios\n```\n\n---\n\n##### 四、第一种使用方法\n\n直接调用 axios 提供的 get 或 post 方法 发出 http 请求。\n\n###### 1、GET 请求\n\n- 两种使用方式\n\n  ```javascript\n  const axios = require('axios');\n  \n  // 1、向给定ID的用户发起请求\n  axios.get('/user?ID=12345')\n    .then(function (response) {\n      // 处理成功情况\n      console.log(response);\n    })\n    .catch(function (error) {\n      // 处理错误情况\n      console.log(error);\n    })\n    .then(function () {\n      // 总是会执行\n    });\n  \n  // 2、上述请求也可以按以下方式完成（可选）\n  axios.get('/user', {\n      params: {\n        ID: 12345\n      }\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n    .then(function () {\n      // 总是会执行\n    });\n  ```\n\n- 支持async/await用法\n\n  ```javascript\n  const axios = require('axios');\n  async function getUser() {\n    try {\n      const response = await axios.get('/user?ID=12345');\n      console.log(response);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  ```\n\n---\n\n###### 2、POST 请求\n\n- 单个 post 请求\n\n  ```javascript\n  const axios = require('axios');\n  \n  axios.post('/user', {\n      firstName: 'Fred',\n      lastName: 'Flintstone'\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  ```\n\n- 多个 post 请求\n\n  ```javascript\n  const axios = require('axios');\n  \n  function getUserAccount() {\n    return axios.get('/user/12345');\n  }\n  \n  function getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n  }\n  \n  Promise.all([getUserAccount(), getUserPermissions()])\n    .then(function (results) {\n      const acct = results[0];\n      const perm = results[1];\n    });\n  ```\n\n---\n\n##### 五、第二种使用方法\n\n通过自定义配置，通过 axios 发出 get  或 post 请求。\n\n###### 1、使用实例\n\n```javascript\nconst axios = require('axios');\n\n// 1、发起一个post请求\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n\n// 2、在 node.js 用GET请求获取远程图片\naxios({\n  method: 'get',\n  url: 'http://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n\n// 3、发起一个 GET 请求 (默认请求方式)\naxios('/user/12345');\n\n// 4、自定义配置新建一个实例\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n---\n\n###### 2、配置详细说明\n\n`url` 是必填项；`method` 默认使用 get 请求；\n\n```javascript\n{\n  // `url` 是用于请求的服务器 URL\n  url: '/user',\n\n  // `method` 是创建请求时使用的方法\n  method: 'get', // 默认值\n\n  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` 允许在向服务器发送前，修改请求数据\n  // 它只能用于 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n  // 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream\n  // 你可以修改请求头。\n  transformRequest: [function (data, headers) {\n    // 对发送的 data 进行任意转换处理\n\n    return data;\n  }],\n\n  // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n  transformResponse: [function (data) {\n    // 对接收的 data 进行任意转换处理\n\n    return data;\n  }],\n\n  // 自定义请求头\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` 是与请求一起发送的 URL 参数\n  // 必须是一个简单对象或 URLSearchParams 对象\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer`是可选方法，主要用于序列化`params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` 是作为请求体被发送的数据\n  // 仅适用 'PUT', 'POST', 'DELETE 和 'PATCH' 请求方法\n  // 在没有设置 `transformRequest` 时，则必须是以下类型之一:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - 浏览器专属: FormData, File, Blob\n  // - Node 专属: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // 发送请求体数据的可选语法\n  // 请求方式 post\n  // 只有 value 会被发送，key 则不会\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` 指定请求超时的毫秒数。\n  // 如果请求时间超过 `timeout` 的值，则请求会被中断\n  timeout: 1000, // 默认值是 `0` (永不超时)\n\n  // `withCredentials` 表示跨域请求时是否需要使用凭证\n  withCredentials: false, // default\n\n  // `adapter` 允许自定义处理请求，这使测试更加容易。\n  // 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` HTTP Basic Auth\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` 表示浏览器将要响应的数据类型\n  // 选项包括: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  // 浏览器专属：'blob'\n  responseType: 'json', // 默认值\n\n  // `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)\n  // 注意：忽略 `responseType` 的值为 'stream'，或者是客户端请求\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // 默认值\n\n  // `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称\n  xsrfCookieName: 'XSRF-TOKEN', // 默认值\n\n  // `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称\n  xsrfHeaderName: 'X-XSRF-TOKEN', // 默认值\n\n  // `onUploadProgress` 允许为上传处理进度事件\n  // 浏览器专属\n  onUploadProgress: function (progressEvent) {\n    // 处理原生进度事件\n  },\n\n  // `onDownloadProgress` 允许为下载处理进度事件\n  // 浏览器专属\n  onDownloadProgress: function (progressEvent) {\n    // 处理原生进度事件\n  },\n\n  // `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数\n  maxContentLength: 2000,\n\n  // `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数\n  maxBodyLength: 2000,\n\n  // `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。\n  // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n  // 则promise 将会 resolved，否则是 rejected。\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // 默认值\n  },\n\n  // `maxRedirects` 定义了在node.js中要遵循的最大重定向数。\n  // 如果设置为0，则不会进行重定向\n  maxRedirects: 5, // 默认值\n\n  // `socketPath` 定义了在node.js中使用的UNIX套接字。\n  // e.g. '/var/run/docker.sock' 发送请求到 docker 守护进程。\n  // 只能指定 `socketPath` 或 `proxy` 。\n  // 若都指定，这使用 `socketPath` 。\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` 定义了代理服务器的主机名，端口和协议。\n  // 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。\n  // 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。\n  // `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。\n  // 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。\n  // 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // see https://axios-http.com/zh/docs/cancellation\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // 默认值\n\n}\n```\n\n---\n\n##### 六、参考文档\n\n- [axios - 官网](https://axios-http.com/zh/)\n- [axios - npm](https://www.npmjs.com/package/axios)\n- [axios - 官方文档](https://axios-http.com/zh/docs/intro)\n\n\n","url":"https://learn-anything.cn/axios","published_at":"2021-11-21T02:16:45.000Z","tags":[{"name":"JavaScript","slug":"java-script"},{"name":"Nodejs","slug":"nodejs"},{"name":"NPM","slug":"npm"},{"name":"yarn","slug":"yarn"},{"name":"http/https","slug":"http-https"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"学习axios，从这里开始！","slug":"axios"}},
    "staticQueryHashes": ["63159454"]}
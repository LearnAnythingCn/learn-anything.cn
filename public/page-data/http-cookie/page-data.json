{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/http-cookie",
    "result": {"data":{"strapiArticles":{"id":"Articles_412","title":"一篇解释清楚Cookie是什么？","description":"HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。","content":"##### 一、Cookie 是什么？\n\nHTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。使用场景：\n\n- 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n- 个性化设置（如用户自定义设置、主题等）\n- 浏览器行为跟踪（如跟踪分析用户行为等）\n\n---\n\n##### 二、Cookie 生成过程\n\n###### 1、生成 cookie\n\n服务器生成了 cookie 数据 并设置为  `Set-Cookie` 属性，包含在 HTTP 协议的 Header 中 ，来告诉浏览器保存这些数据（除非浏览器禁用了 Cookie）。\n\n```\n// 服务端发给浏览器的数据\nHTTP/1.0 200 OK\nContent-type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n```\n\n---\n\n###### 2、存储 cookie 并回传\n\n浏览器会在接下来的请求中，把存储的 cookie 数据，设置为 `Cookie`  属性，包含 HTTP 协议的 Header 中 ，连同请求一起发送给服务器（除非设置了不发送 cookie）。\n\n```\n// 浏览器发给服务器的数据\nGET /sample_page.html HTTP/1.1\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n```\n\n---\n\n##### 三、第一方 和 第三方 Cookie\n\n- Cookie 中的域名 与 当前站点域名相同，称为 第一方cookie（ first-party cookie）；\n\n- Cookie 中的域名 与 当前站点域名不同，称为 第三方cookie（ third-party cookie）；\n\n当前站点会使用一些其他站点资源（譬如图片、广告等），在请求第三方服务器获取这些资源时，也会返回 `Set-Cookie` 属性，让浏览器保留第三方的 cookie，这些cookie 主要用于用户跟踪，流量分析等。\n\n---\n\n##### 四、cookie 的重要属性\n\n###### 1、Secure 和 HttpOnly\n\n功能：限制访问 Cookie 的方式。\n\n- Secure  ：表示 cookie 只能用 https 加密的方式发送给请求站点；\n- HttpOnly  ：JavaScript  API 无法访问带有 HttpOnly 属性的cookie（`Document.cookie`  无法读取cookie）当 cookie 中的数据，只用于服务器时，可以设置此属性；可防止通过 JavaScript 访问 cookie 值；\n- 这两个属性可以有效防御 大部分 XSS 攻击。\n\n```\nSet-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly\n```\n\n---\n\n###### 2、Domain 和 Path\n\n功能：允许 Cookie 发送给哪些URL？\n\n- Domain  ：表示 cookie 可以发送给那个域名包括其子域名。如果不设置Domain，就取值为 origin 但不包含origin 的子域名。如果设置  `Domain=mozilla.org`，那么 cookie 也能发送给子域名 `developer.mozilla.org`。\n- Path  ：表示 cookie 可以发送给那些路径。如果 设置 `Path=/docs`，那么 cookie 也能发送给子路径 `/docs/Web/`。\n\n---\n\n###### 3、SameSite\n\n功能：可以限制 cookie 的跨域发送，此属性可有效防止大部分  CSRF 攻击，有三个值可以设置：\n\n- None  ：同站、跨站请求都发送 cookie，但需要 Secure 属性配合一起使用。\n\n  ```\n  Set-Cookie: flavor=choco; SameSite=None; Secure\n  ```\n\n- Strict  ：当前页面与跳转页面是相同站点时，发送 cookie；\n\n  ```\n  Set-Cookie: key=value; SameSite=Strict\n  ```\n\n- Lax  ：与  Strict  类似，但用户从外部站点导航至URL时（例如通过链接）除外。 在新版本浏览器中，为默认选项，Same-site cookies 将会为一些跨站子请求保留，如图片加载或者 frames 的调用，但只有当用户从外部站点导航到URL时才会发送。如 link 链接\n\n---\n\n###### 4、`__Host-` 和 `__Secure-`\n\n可以创建 cookie 的地方很多，很难判断 cookie 的来源，但是可使用 cookie 前缀来断言 cookie 的来源。\n\n- `__Host-`  \n\n  带有这个前缀的 cookie，必须具备这三个特性：有 Secure 属性、没有 Domain 属性、Path 值为 /，此类 cookie 被称之为  `domain-locked`。\n\n- `__Secure-`  \n\n  带有这个前缀的 cookie，表示必须具有 Secure 属性。\n\n由于应用服务器仅在确定用户是否已通过身份验证或 CSRF 令牌正确时才检查特定的 cookie 名称，因此，这有效地充当了针对会话劫持的防御措施。\n\n---\n\n##### 五、操作 Cookie 的方法\n\n###### 1、JavaScript API\n\nJavaScript 代码中通过 Document.cookie 来创建 Cookie，也能用其访问不带 HttpOnly 标志的 Cookie。\n\n```js\ndocument.cookie = \"yummy_cookie=choco\";\ndocument.cookie = \"tasty_cookie=strawberry\";\nconsole.log(document.cookie);\n// logs \"yummy_cookie=choco; tasty_cookie=strawberry\"\n```\n\n---\n\n###### 2、cookie库\n\nNode.js  项目用 http 创建的 Web服务，可以用  `cookie库` 操作  cookie，实例如下：\n\n```js\nvar cookie = require('cookie');\nvar escapeHtml = require('escape-html');\nvar http = require('http');\nvar url = require('url');\n\nfunction onRequest(req, res) {\n  // Parse the query string\n  var query = url.parse(req.url, true, true).query;\n\n  if (query && query.name) {\n    // Set a new cookie with the name\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }));\n\n    // Redirect back after setting cookie\n    res.statusCode = 302;\n    res.setHeader('Location', req.headers.referer || '/');\n    res.end();\n    return;\n  }\n\n  // Parse the cookies on the request\n  var cookies = cookie.parse(req.headers.cookie || '');\n\n  // Get the visitor name set in the cookie\n  var name = cookies.name;\n\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n\n  if (name) {\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\n  } else {\n    res.write('<p>Hello, new visitor!</p>');\n  }\n\n  res.write('<form method=\"GET\">');\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\n  res.end('</form>');\n}\n\nhttp.createServer(onRequest).listen(3000);\n```\n\n- [cookie - npm](https://www.npmjs.com/package/cookie)\n\n- [cookie - github](https://github.com/jshttp/cookie)\n\n---\n\n###### 3、cookie-parser 库\n\n`express` 项目 中使用  `cookie-parser`  来操作 cookie，实例如下：\n\n```js\nvar express = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function (req, res) {\n  // Cookies that have not been signed\n  console.log('Cookies: ', req.cookies)\n\n  // Cookies that have been signed\n  console.log('Signed Cookies: ', req.signedCookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n- [cookie-parser - npm](https://www.npmjs.com/package/cookie-parser)\n- [cookie-parser - github](https://github.com/expressjs/cookie-parser)\n\n---\n\n##### 六、大量数据存储问题\n\n大量服务端数据存储于 Cookie ，降低了网络访问性能（特别是移动环境下），可通过 `Web Storage API`   和 `IndexedDB`  来解决。\n\n- [Web Storage API - MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API)\n\n- [IndexedDB_API - MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API)\n\n---\n\n##### 七、参考文档\n\n- [HTTP Cookies - MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\n\n- [SameSite - Headers - HTTP - MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite)\n\n- [JavaScript Cookie - runoob](https://www.runoob.com/js/js-cookies.html)\n\n- [Set-Cookie - 详细说明](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie)\n\n","url":"https://learn-anything.cn/http-cookie","author":null,"published_at":"2021-11-25T11:35:12.000Z","tags":[{"name":"http/https","slug":"http-https"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"一篇解释清楚Cookie是什么？","slug":"http-cookie"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/nginx-cache",
    "result": {"data":{"strapiArticles":{"id":"Articles_423","title":"Nginx怎么开启缓存来提高性能？","description":"Web 浏览器和应用服务器之间可能存在多个缓存：客户端的浏览器缓存、中间缓存、内容交付网络 (CDN) 以及位于应用服务器前面的负载平衡器或反向代理。缓存，即使在反向代理/负载平衡器级别，也可以大大提高性能。","content":"##### 一、缓存的作用？\n\nWeb 浏览器和应用服务器之间可能存在多个缓存：客户端的浏览器缓存、中间缓存、内容交付网络 (CDN) 以及位于应用服务器前面的负载平衡器或反向代理，即使在反向代理/负载平衡器级别的缓存，也可以大大提高性能。\n\n有关 Nginx 的缓存分两种情况：\n\n- 私有缓存：作为静态网站服务器，设置Cache-Control头，让浏览器对页面资源进行缓存；\n- 共享缓存：作为代理服务器，把源服务器返回的资源缓存到本地；\n\n---\n\n##### 二、私有缓存\n\n根据实际需要，在配置文件中增加下面内容：\n\n```\nserver {\n\t\t# ...\n    \n    # 静态文件夹下内容，缓存时长设置为1年\n    location ^~ /static/ {\n\t\t\tadd_header Cache-Control \"public, max-age=31536000, immutable\";\n    }\n\n\t\t# 对css 和js 文件，缓存时长设置为1年\n    location ~* \\.(css|js)$ {\n      add_header Cache-Control \"public, max-age=31536000, immutable\";\n    }\n    \n\t\t# json和html文件，每次访问都需要发送检测缓存是否过期；\n    location ~* \\.(json|html)$ {\n      add_header Cache-Control \"public, no-cache\";\n    }\n}\n```\n\n---\n\n##### 三、共享缓存\n\n###### 1、两步开启缓存功能\n\n```\n# 1、设置缓存的基本配置\nproxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m max_size=10g \n                 inactive=60m use_temp_path=off;\n\nserver {\n    # ...\n    location / {\n    \t\t# 2、开启缓存功能\n        proxy_cache my_cache;\n        proxy_pass http://my_upstream;\n    }\n}\n```\n\n---\n\n###### 2、proxy_cache_path\n\n- `/path/to/cache/`  ：设置缓存的存储目录；\n- `levels`  ：上面目录下的文件目录层次结构，这里设置2层目录结构，单个文件夹包含大量文件会降低文件访问速度。如果不设置此参数，表示采用1层目录结构。\n- `keys_zone`  ：设置共享内存大小，用于存储缓存的key和相关数据，内存访问速度要比硬盘块很多，内存1MB大约可存储8000个 key， 这里的 10m 可以存储大于80,000个 可以。\n- `max_size`  ：设置缓存大小的上限，如果不设置，缓存上限就是硬盘大小，缓存到达上限后，会自动删除不常用的缓存。\n- `inactive`  ：表示文件在给定时长内没有被使用，就会被删除。默认值为10分钟。\n- `use_temp_path=off`  ：是否将缓存文件先写入临时存储区域，推荐关闭此选项，避免不必要的文件复制操作。\n\n---\n\n###### 3、proxy_cache\n\n- `proxy_cache`  ：使用上面的缓存配置，来启动匹配 URL 的缓存功能，这里的 URL 是指 `/`；\n- 当把 `proxy_cache`  放到 server 下，那么 server 下的所有 location 匹配的 URL 都会启动缓存功能。\n\n---\n\n###### 4、怎么处理源服务器故障？\n\n当源服务器遇到 故障 或 流量太大，无法提供服务时，Nginx 可以使用缓存继续为用户提供服务。\n\n通过设置 `proxy_cache_use_stale` 指令，当 Nginx 访问源服务器，发生 `超时、500、502、503、504`  这几种情况时，Nginx会先使用缓存来响应客户，如果没有缓存，才返回错误给客户。\n\n```\nlocation / {\n    # ...\n    proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;\n}\n```\n\n---\n\n###### 5、微调缓存，提高性能\n\n```\nproxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m max_size=10g \n                 inactive=60m use_temp_path=off;\n\nserver {\n    # ...\n    location / {\n        proxy_cache my_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 3;\n        proxy_cache_use_stale error timeout updating http_500 http_502\n                              http_503 http_504;\n        proxy_cache_background_update on;\n        proxy_cache_lock on;\n\n        proxy_pass http://my_upstream;\n    }\n}\n```\n\n- `proxy_cache_revalidate`  ：表示使用  `条件请求`  向源服务器发送 `GET` 请求。`If-Modified-Since`、`If-Unmodified-Since` 等请求头会被使用，最大可能减少数据的传输。[条件请求相关的请求头信息，看这里！](https://learn-anything.cn/http-headers)\n- `proxy_cache_min_uses`  ：表示 缓存 被使用的最小次数，默认值为1。这个属性用在缓存空间达到上限时，低于此属性设置的次数的缓存，会被删除。\n- `proxy_cache_use_stale updating`  + `proxy_cache_background_update on` ，表示新资源正在下载，用旧的缓存资源来响应现在的请求，直到新资源下载完毕。\n- `proxy_cache_lock on`  ：当多个请求都没找到相应缓存时，只能按照时间顺序，一个一个地向源服务器请求资源；如果此属性设置为 off，那么多个请求之间不会等待，多个请求一起向源服务器请求资源。\n\n---\n\n###### 6、拆分缓存目录\n\n可以把缓存目录拆分成多个，分别保存到多个硬盘中，达到缓存扩容的需求。\n\n```\n# 1、设置两块硬盘的缓存目录及配置\nproxy_cache_path /path/to/hdd1 levels=1:2 keys_zone=my_cache_hdd1:10m\n                 max_size=10g inactive=60m use_temp_path=off;\nproxy_cache_path /path/to/hdd2 levels=1:2 keys_zone=my_cache_hdd2:10m\n                 max_size=10g inactive=60m use_temp_path=off;\n\n# 2、访问URL 作为key，两个硬盘各负责一半的缓存\nsplit_clients $request_uri $my_cache {\n              50%          “my_cache_hdd1”;\n              50%          “my_cache_hdd2”;\n}\n\nserver {\n    # ...\n    location / {\n    \t\t# 3、启动缓存服务\n        proxy_cache $my_cache;\n        proxy_pass http://my_upstream;\n    }\n}\n```\n\n---\n\n###### 7、通过 Cookie 和 Session 区分缓存文件\n\n希望给每一个登录用户指定专门的缓存，提升用户的访问体验，可以通过 `proxy_cache_key` 设定特定的 key ，这样用户常用的网页，都被缓存。\n\n```\n# 组合 主机名、url、cookie、sessionid 作为缓存文件的唯一标识\nproxy_cache_key $proxy_host$request_uri$cookie_jessionid;\n```\n\n---\n\n###### 8、支持 `ETag` 和 `Vary`？\n\n- NGINX 1.7.3  和 NGINX Plus R5 版本开始支持  `ETag`  与  `If-None-Match`，[这两个头的功能，可以看这里！](https://learn-anything.cn/http-headers)\n\n- NGINX Plus R5 和 NGINX 1.7.7 版本开始支持 `Vary`，[Vary 的功能，可以看这里！](https://learn-anything.cn/http-vary)\n\n---\n\n##### 四、参考文档\n\n- [nginx-caching-guide  -  官方](https://www.nginx.com/blog/nginx-caching-guide/)\n- [caching/#purging  -  官方](https://www.nginx.com/products/nginx/caching/#purging)\n- [proxy_cache_revalidate  -  官方](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_revalidate)\n- [proxy_cache_min_uses  -  官方](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_min_uses)\n\n\n","url":"https://learn-anything.cn/nginx-cache","author":null,"published_at":"2021-11-30T07:50:09.000Z","tags":[{"name":"Nginx","slug":"nginx"},{"name":"http/https","slug":"http-https"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"Nginx怎么开启缓存来提高性能？","slug":"nginx-cache"}},
    "staticQueryHashes": ["63159454"]}
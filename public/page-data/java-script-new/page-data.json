{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-new",
    "result": {"data":{"strapiArticles":{"id":"Articles_526","title":"详解JavaScript的new表达式","description":"new 关键字，在JavaScript中用于创建用户定义的对象实例 或 创建具有构造函数的内置对象实例。","content":"##### 一、new\n\n用于创建用户定义的对象实例 或 创建具有构造函数的内置对象实例。\n\n```js\n// 语法\nnew constructor[([arguments])]\n```\n\n---\n\n###### 1、使用规则\n\n当执行 new Foo(...) 时，会发生以下事情：\n\n- 创建一个继承自 Foo.prototype 的新对象；\n- 使用指定参数调用构造函数，并将 this 绑定到新对象（new Foo 等同于 new Foo()，表示没有指定参数）。\n- 构造函数返回值就是 new 表达式结果。如果构造函数没有显式返回，则使用步骤1创建的对象（通常构造函数没有return 语句）。\n\n```js\n// 实例\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nconst car1 = new Car('Eagle', 'Talon TSi', 1993);\nconsole.log(car1.make);\t// \"Eagle\"\n```\n\n---\n\n###### 2、new.target\n\n可以检测一个函数是否通过 new 被调用。\n\n```js\n// 1、检查函数\nfunction Foo() {\n  if (!new.target) \n    throw \"Foo() 只能用 new 来调用\";\n  \n  console.log(\"调用成功\");\n}\nFoo(); \t\t// Uncaught Foo() 只能用 new 来调用\nnew Foo(); \t// 调用成功\n\n// 2、查看类中构造函数\nclass A {\n    constructor() {\n        console.log(new.target.name);\n    }\n}\nclass B extends A { constructor() { super(); } }\nvar a = new A(); // A\nvar b = new B(); // B\n```\n\n---\n\n##### 二、参考文档\n\n- [new  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new)\n\n- [new.target  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target)\n\n\n","url":"https://learn-anything.cn/java-script-new","published_at":"2021-12-26T01:22:12.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解JavaScript的new表达式","slug":"java-script-new"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-function-detail",
    "result": {"data":{"strapiArticles":{"id":"Articles_512","title":"详解JavaScript的Function对象","description":"Function 对象是全局对象，可以动态创建函数，实际上每个函数都是一个 Function 对象。","content":"##### 一、Function 对象\n\nFunction 对象是全局对象，可以动态创建函数，实际上每个函数都是一个 Function 对象。\n\n###### 1、函数是Function类型对象\n\n```js\n// 下面代码可以判断，函数是Function类型对象\n(function(){}).constructor === Function // true\n```\n\n###### 2、创建 函数\n\n```js\nconst sum = new Function('a', 'b', 'return a + b');\n\nconsole.log(sum(2, 6));\n// expected output: 8\n```\n\n###### 3、Function 创建函数与 function 定义函数有什么不同？\n\n由 Function 创建的函数不会创建当前环境的闭包，因此只能访问全局变量和自己的局部变量，不能访问 Function 创建函数时所在作用域的变量。\n\n```js\nvar x = 10;\n\nfunction createFunction1() {\n    var x = 20;\n    return new Function('return x;'); // 这里的 x 指向最上面全局作用域内的 x\n}\n\nfunction createFunction2() {\n    var x = 20;\n    function f() {\n        return x; // 这里的 x 指向上方本地作用域内的 x\n    }\n    return f;\n}\n\nvar f1 = createFunction1();\nconsole.log(f1());          // 10\nvar f2 = createFunction2();\nconsole.log(f2());          // 20\n```\n\n---\n\n##### 二、方法和属性\n\n###### 1、Function.prototype.call()\n\n- 功能：用于调用其他函数。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n\n```js\n// 语法\nfunction.call(thisArg, arg1, arg2, ...)\n\n// 使用方法\nfunction Product(name, price) {\nthis.name = name;\nthis.price = price;\n}\n\nfunction Food(name, price) {\nProduct.call(this, name, price);\nthis.category = 'food';\n}\n\nconsole.log(new Food('cheese', 5).name);\n// expected output: \"cheese\"\n\n```\n\n---\n\n###### 2、Function.prototype.apply()\n\n- 功能：用于调用其他函数。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n```js\n// 语法\nfunc.apply(thisArg, [argsArray])\n\n// 使用方法\nconst numbers = [5, 6, 2, 3, 7];\nconst max = Math.max.apply(null, numbers);\nconsole.log(max);\n// expected output: 7\n```\n\n- apply() 与 call() 的区别\n\n  apply() 与 call() 功能是一样的，区别是提供参数的方式。apply()用数组作为参数；call()用参数列表。\n\n---\n\n###### 3、Function.prototype.bind()\n\n- 功能：可以将函数的this 与 某个对象实例进行永久绑定，无需考虑函数的调用方式。已绑定对象无法再次绑定。\n\n```js\nthis.x = 9;    // 在浏览器中，this 指向全局的 \"window\" 对象\nvar module = {\n  x: 81,\n  getX: function() { return this.x; }\n};\n\nconsole.log(module.getX()); // 81\n\n// 新函数是全局作用域，不属于 module 对象。\nvar retrieveX = module.getX;\nconsole.log(retrieveX()); // 9\n\n// 创建一个新函数，把 'this' 绑定到 module 对象\nvar boundGetX = retrieveX.bind(module);\nconsole.log(boundGetX()); // 81\n\nvar moduleY = {\n  y: 100,\n  getY: function() { return this.y; }\n};\n// 已绑定对象无法再次绑定\nvar boundGetY = boundGetX.bind(moduleY);\nconsole.log(boundGetY()); //81\n```\n\n---\n\n##### 三、参考文档\n\n- [Function对象  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function)\n- [Function对象的属性和方法](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)","url":"https://learn-anything.cn/java-script-function-detail","published_at":"2021-12-21T11:57:58.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解JavaScript的Function对象","slug":"java-script-function-detail"}},
    "staticQueryHashes": ["63159454"]}
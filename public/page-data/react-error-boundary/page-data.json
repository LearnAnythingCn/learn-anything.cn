{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/react-error-boundary",
    "result": {"data":{"strapiArticles":{"id":"Articles_119","title":"React用错误边界来捕获和处理异常错误！","description":"React中的页面异常错误怎么处理？错误边界是class组件吗？","content":"##### 一、解决什么问题？\n\nUI 中 JavaScript 错误不应该导致整个应用崩溃，错误边界就是解决这个问题的(React 16 增加的功能)。\n\n---\n\n##### 二、有哪些特性？\n\n###### 1、具体功能\n\n- 错误边界是一种 class 组件，可捕获子组件 JavaScript 错误，打印错误并展示备用UI。\n\n###### 2、无法捕获的错误：\n\n- 事件处理\n- 异步代码（例如 `setTimeout` 或 `requestAnimationFrame` 回调函数）\n- 服务端渲染\n- 它自身抛出来的错误（并非它的子组件）\n\n###### 3、怎么写？\n\n- 包含下面方法中任意一个 的class组件，称之为错误边界。\n\n  `static getDerivedStateFromError()`  ：渲染备用 UI\n\n  `componentDidCatch()`  ：打印错误信息\n\n```jsx\n//  错误边界  实例\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        // 更新 state 使下一次渲染能够显示降级后的 UI\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // 你同样可以将错误日志上报给服务器\n        logErrorToMyService(error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // 你可以自定义降级后的 UI 并渲染\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n```\n\n```jsx\n// 使用 错误边界\n<ErrorBoundary>\n    <MyWidget />\n</ErrorBoundary>\n```\n\n---\n\n###### 4、js代码还是用try / catch 捕获错误\n\n```jsx\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { error: null };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        try {\n            // 执行操作，如有错误则会抛出\n        } catch (error) {\n            this.setState({ error });\n        }\n    }\n\n    render() {\n        if (this.state.error) {\n            return <h1>Caught an error.</h1>\n        }\n        return <button onClick={this.handleClick}>Click Me</button>\n    }\n}\n```\n\n---\n\n##### 三、实例展示\n\n一个使用 错误边界 的示例，新建并复制下面代码到index.html文件，浏览器打开index.html即可看到效果。\n\n```jsx\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World</title>\n    <!-- 第一步：加载开发版本的React -->\n    <script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n\n    <!-- 部署时，请用下面链接替代上面 -->\n    <!-- <script src=\"https://unpkg.com/react@16/umd/react.production.min.js\" crossorigin></script>\n    <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\" crossorigin></script> -->\n\n    <!-- 第二步：加载开发版本的babel -->\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n\n</head>\n\n<body>\n    <div id=\"root\"></div>\n    <script type=\"text/babel\">\n        class ErrorBoundary extends React.Component {\n            constructor(props) {\n                super(props);\n                this.state = { error: null, errorInfo: null };\n            }\n\n            componentDidCatch(error, errorInfo) {\n                // Catch errors in any components below and re-render with error message\n                this.setState({\n                    error: error,\n                    errorInfo: errorInfo\n                })\n                // You can also log error messages to an error reporting service here\n            }\n\n            render() {\n                if (this.state.errorInfo) {\n                    // Error path\n                    return (\n                        <div>\n                            <h2>Something went wrong.</h2>\n                            <details style={{ whiteSpace: 'pre-wrap' }}>\n                                {this.state.error && this.state.error.toString()}\n                                <br />\n                                {this.state.errorInfo.componentStack}\n                            </details>\n                        </div>\n                    );\n                }\n                // Normally, just render children\n                return this.props.children;\n            }\n        }\n\n        class BuggyCounter extends React.Component {\n            constructor(props) {\n                super(props);\n                this.state = { counter: 0 };\n                this.handleClick = this.handleClick.bind(this);\n            }\n\n            handleClick() {\n                this.setState(({ counter }) => ({\n                    counter: counter + 1\n                }));\n            }\n\n            render() {\n                if (this.state.counter === 5) {\n                    // Simulate a JS error\n                    throw new Error('I crashed!');\n                }\n                return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n            }\n        }\n\n        function Err() {\n            return (\n                <div>\n                    <p>\n                        <b>\n                            This is an example of error boundaries in React 16.\n                            <br /><br />\n                            Click on the numbers to increase the counters.\n                            <br />\n                            The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\n                        </b>\n                    </p>\n                    <hr />\n                    <ErrorBoundary>\n                        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\n                        <BuggyCounter />\n                        <BuggyCounter />\n                    </ErrorBoundary>\n                    <hr />\n                    <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\n                    <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n                    <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n                </div>\n            );\n        }\n\n        ReactDOM.render(\n            <Err />,\n            document.getElementById('root')\n        );\n\n    </script>\n</body>\n</html>\n```\n\n---\n\n##### 四、参考文档：\n\n- [错误边界](https://zh-hans.reactjs.org/docs/error-boundaries.html)\n\n\n","url":"https://learn-anything.cn/react-error-boundary","published_at":"2021-10-16T02:00:07.000Z","tags":[{"name":"React","slug":"react"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"React用错误边界来捕获和处理异常错误！","slug":"react-error-boundary"}},
    "staticQueryHashes": ["63159454"]}
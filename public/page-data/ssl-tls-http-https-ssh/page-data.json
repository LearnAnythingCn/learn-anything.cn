{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/ssl-tls-http-https-ssh",
    "result": {"data":{"strapiArticles":{"id":"Articles_7","title":"学习SSH，从这里开始！","description":"SSL(Secure Sockets Layer，安全套接字协议)、TLS(Transport Layer Security，传输层安全协议)，都是安全协议，目的是加强网路通信的安全，SSL由于其设计上的缺陷，逐渐被更安全的TLS给取代。","content":"##### 一、SSH 是什么？\n\nSSH(Security Shell) 是一种网络协议，对计算机之间通讯的数据进行加密。\n\n---\n\n##### 二、OpenSSH\n\n[OpenSSH](https://www.openssh.com/) 是 Linux 下基于SSH协议实现了很多应用：\n\n- 客户端应用： [ssh](https://man.openbsd.org/ssh.1),  [scp](https://man.openbsd.org/scp.1),  [sftp](https://man.openbsd.org/sftp.1).\n- 服务端应用： [sshd](https://man.openbsd.org/sshd.8),  [sftp-server](https://man.openbsd.org/sftp-server.8),  [ssh-agent](https://man.openbsd.org/ssh-agent.1).\n- 密钥管理： [ssh-add](https://man.openbsd.org/ssh-add.1),  [ssh-keysign](https://man.openbsd.org/ssh-keysign.8),  [ssh-keyscan](https://man.openbsd.org/ssh-keyscan.1),  [ssh-keygen](https://man.openbsd.org/ssh-keygen.1).\n\n---\n\n###### 1、ssh\n\nTelenet + SSH = ssh，可以登录远程服务器并让服务器执行命令操作的客户端软件，默认端口22。\n\n```shell\n# 远程关机命令\n$ ssh -t user@ip 'sudo shutdown -h now'\n\n# 远程关闭多台服务器：\n$ ssh -t user@ip1 'sudo shutdown -h now';ssh -t user@ip2 'sudo shutdown -h now';\n\n# 远程重启命令\n$ ssh -t user@ip1 'sudo reboot'\n\n# 重启SSH\n$ /etc/init.d/ssh restart\n$ sudo service ssh restart\n\n# 查看SSH的进程情况\n$ ps aux | grep ssh \n```\n\n---\n\n###### 2、ssh 配置\n\n有3种方式来设置 ssh 的配置信息：\n\n- 命令行(终端调用 ssh 传入)；\n- ~/.ssh/config  ：用户级 ssh 配置文件；\n\n- /etc/ssh/ssh_config ：系统级 ssh 配置文件，上面两个都没有设置，就使用此配置文件。[ssh_config 文档](https://man.openbsd.org/ssh_config.5)\n\n---\n\n###### 3、ssh 免密登录\n\n`ssh user@ip`  登录远程服务器，每一次都要输入密码，用密钥可免密登录。\n\n```shell\n# 系统环境 : macOS\n# 创建SSH秘钥(ssh-keygen是生成和管理密钥工具)\n$ ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n\n# 把密钥上传到服务器\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub user@ip\n\n# 直接登录，无需再输入密码\n$ ssh user@ip\n```\n\n---\n\n###### 4、ssh 连接超时\n\n登录远程服务器后，长时间不操作，服务器会自动断开连接。\n\n- 法一：配置服务端\n\n```bash\n# 1、打开服务端配置文件\nsudo nano /etc/ssh/sshd_config\n\n# 2、增加如下内容\n# 第一行，表示每隔120秒向客户端发送一个“空包”，以保持于客户端的连接。\n# 第二行，表示总共发送720次“空包”，之后断开它们之间的连接，也就是：120秒 × 720 = 86400 秒 = 24小时 后。\nClientAliveInterval 120 \nClientAliveCountMax 720\n\n# 3、重启ssh\nsudo service ssh restart\n```\n\n- 法二：配置客户端\n\n  客户端每隔120秒给服务器发送一个“空包”，保持它们之间的连接。\n\n```shell\n# 1、打开配置文件\nsudo nano ~/.ssh/config\n# 2、增加下面内容\nServerAliveInterval 120\n```\n\n---\n\n###### 5、sshd\n\n/etc/ssh/sshd_config ：ssh 服务端配置文件。[sshd_config 文档](https://man.openbsd.org/sshd_config.5)\n\n---\n\n###### 6、scp\n\n功能：与服务器相互传输文件，此通信过程也是加密的。\n\n```shell\n# 本地文件「test.txt」拷贝到服务器的「~/」目录下\n$ scp ~/test.txt user@ip:~/\n\n# 本地文件夹「test」拷贝到服务器「~/」目录下\n$ scp -r ~/test user@ip:~/\n\n# 服务器文件夹「test」拷贝到本地「~/」目录下\n$ scp -r user@ip:~/test ~/ \n```\n\n---\n\n###### 7、ssh-keygen\n\n功能：生成两个密钥，一个公有密钥，一个私有密钥，共有密钥的后缀是：`.pub` 。\n\n```shell\nssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n\n-f 指定密钥文件名称\n-t 指定加密算法，可用值：rsa、dsa、ecdsa、ed25519\n-b 指定生成的密钥大小(字节数)\n-P 给密钥增加密码\n```\n\n参考文档：[ssh-keygen 文档](https://man.openbsd.org/ssh-keygen.1)、[How to use ssh-keygen to generate a new SSH key](https://www.ssh.com/academy/ssh/keygen)\n\n\n\n- key\n\nHost keys are stored in the `/etc/ssh/` directory.\n\nHost keys are just ordinary SSH key pairs. Each host can have one host key for each algorithm. The host keys are almost always stored in the following files:\n\n```\n/etc/ssh/ssh_host_dsa_key\n/etc/ssh/ssh_host_ecdsa_key\n/etc/ssh/ssh_host_\n```\n\n\n\n---\n\n###### 8、ssh-copy-id\n\n功能：把密钥上传到服务器的工具。[ssh-copy-id](https://www.ssh.com/academy/ssh/copy-id)\n\n```shell\n# 把密钥上传到远程机器上\n$ ssh-copy-id -i ~/.ssh/id_rsa.pub user@ip\n\n# 系统默认安装了此工具，如果mac电脑没有，下面安装\n$ brew install ssh-copy-id\n```\n\n---\n\n###### 9、ssh-agent\n\n功能：用于管理私钥，可把私钥转发服务端使用。\n\n```shell\n# 启动 ssh-agent\neval ssh-agent\n```\n\n参考文档：[ssh-agent 文档](https://man.openbsd.org/ssh-agent.1)、[How to configure, forwarding, protocol](https://www.ssh.com/academy/ssh/agent)\n\n---\n\n###### 10、ssh-add\n\n功能：增加密钥到 ssh-agent 中。 [ssh-add 文档](https://man.openbsd.org/ssh-add.1)\n\n```shell\nssh-add ~/.ssh/id_rsa\n```\n\n---\n\n###### 11、PuTTY\n\nTelenet + SSH = [PuTTY](https://www.chiark.greenend.org.uk/~sgtatham/putty/)，用于 Windows、Unix 系统的客户端软件，实现登录远程服务器和让服务器执行命令操作。\n\n\n\n---\n\n##### 三、实例场景？\n\n###### 1、多台服务器间免密登录\n\n本地机器生成了一对密钥，并分别把公钥发送给服务器S1和服务器S2，实现了对两台服务器的免密登录。现在需要在服务器S1上免密登录服务器S2，怎么做？\n\n无需在 S1 上再生成一对密钥并发送给 S2，通过 ssh-agent 可以完成已有私钥的共享，来解决问题。解决步骤如下：\n\n```shell\n# 1、公共上面免密登录方法，实现本地对服务器S1、S2的免密登录；\n\n# 2、本地机器启动 ssh-agent\neval ssh-agent\n\n# 3、本地机器增加私钥到 ssh-agent\nssh-add ~/.ssh/id_rsa\n\n# 4、开启全局 agent转发 功能\necho \"ForwardAgent yes\" >> /etc/ssh/ssh_config\n\n# 5、开启系统登录用户的 agent转发 功能，此步骤4、步骤5，根据需要选择一个即可\nnano ~/.ssh/config\n增加下面内容：\nHost *\n　　ForwardAgent yes\n\n# 6、开启服务器S1、S2的  agent转发 功能\neval ssh-agent\necho \"ForwardAgent yes\" >> /etc/ssh/ssh_config\n```\n\n---\n\n###### 2、root账号登录\n\n使用 root 账户登录服务器。\n\n```shell\n# 1、打开服务器的sshd配置\nnano /etc/ssh/sshd_config\n\n# 2、找到下面这行配置：\n    PermitRootLogin without-password\n修改成：\n    PermitRootLogin yes\n    \n# 3、重启\n方法1：\n    service sshd restart\n方法2：\n    sudo /etc/init.d/ssh restart\n\n# 注意：root 要设置密码，否则会无法登录\nsudo passwd root\n```\n\n---\n\n###### 3、Github + SSH\n\n使用 SSH 可以实现免密提交和下载 Github 平台上的代码。[详情，看这里！](https://learn-anything.cn/git-github)\n\n---\n\n##### 四、HTTPS\n\n###### 1、HTTP + SSL/TLS = HTTPS\n\n|名称|描述|\n|-|-|\n|SSL|Secure Sockets Layer，安全套接字协议。<br />SSL 1.0版本没有公开发布；<br />SSL 2.0版本于1995年发布，简写成SSLv2, 于2011年被IETF废弃；<br />SSL 3.0版本于1996年发布,简写成SSLv3, 于2015年被IETF废弃。|\n|TLS|Transport Layer Security，传输层安全协议。<br />TLS是基于SSL 3.0的一个新版本，原则上他的名字是SSL 4.0；只是IETF在把SSL标准化时把SSL名称改成了TLS。|\n|HTTP|HyperText Transfer Protocol ，超文本传输协议，让计算机之间可以进行明文数据交换，默认端口80。|\n|HTTPS|HyperText Transfer Protocol Secure，超文本传输安全协议，用SSL/TLS对数据加密，再通过HTTP传输，保证数据的安全性，默认端口443。|\n\n\n---\n\n###### 2、CA及数字证书\n\n证书颁发机构（CA, Certificate Authority）即颁发数字证书的机构，HTTP服务升级为HTTPS时，就需要数字证书来保证其通讯链路的安全，[Let's Encrypt](https://letsencrypt.org/) 是免费提供此证书的公益机构。\n\n\n---\n\n###### 3、SSH 与 SSL 区别\n\n相同点：两者都是加密协议。\n\n|不同点|SSL|SSH|\n|-|-|-|\n|全称|Secure Socket Layer|Secure Shell|\n|默认端口|443|22|\n|身份认证方式|公钥+私钥|方法1：公钥+私钥<br />方法2：用户名和密码|\n|应用场景|对浏览器与服务器之间通讯进行加密|对两台计算机之间通讯进行加密|\n\n---\n\n###### 4、http转https\n\n免费把网站从 http 升级为 https。[详情，看这里！](https://learn-anything.cn/http-https-cerbot)\n\n---\n\n\n##### 五、问题与解决方案\n\n###### 1、WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! \n\n```shell\n$ ssh pi@192.168.1.9\n\n# 出现下面错误:\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:VrUX6WSrWP7GYk+9rjNfUitciAFE1DJPPR8lilyXq4Q.\nPlease contact your system administrator.\nAdd correct host key in /Users/liuhai/.ssh/known_hosts to get rid of this message.\nOffending ECDSA key in /Users/liuhai/.ssh/known_hosts:5\nECDSA host key for 192.168.1.9 has changed and you have requested strict checking.\nHost key verification failed.\n\n# Mac下解决方案：\n第一步：$ sudo nano ~/.ssh/known_hosts\n第二步：删除ip对应哪一行数据(fn+delete)\n第三步：ctrl+x，保存退出！\n```\n\n\n","url":"https://learn-anything.cn/ssl-tls-http-https-ssh","published_at":"2021-09-13T02:33:03.000Z","tags":[{"name":"http/https","slug":"http-https"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"学习SSH，从这里开始！","slug":"ssl-tls-http-https-ssh"}},
    "staticQueryHashes": ["63159454"]}
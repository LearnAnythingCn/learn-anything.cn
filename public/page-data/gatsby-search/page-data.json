{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/gatsby-search",
    "result": {"data":{"strapiArticles":{"id":"Articles_80","title":"Gatsby实现中文全文搜索","description":"利用lunr、flexsearch两种搜索引擎，实现gatsby的全文(full text search)搜索，使用到一下插件：gatsby-plugin-local-search，gatsby-plugin-lunr等。","content":"##### 一、简介\n\n用 [`gatsby-plugin-local-search`](https://www.npmjs.com/package/gatsby-plugin-local-search) 和 [`gatsby-plugin-lunr`](https://www.npmjs.com/package/gatsby-plugin-lunr) 分别实现gatsby的全文搜索功能(full-text search)。前一个插件把数据源制作成索引直接放到gatsby数据层形成节点，用graphyql进行全文搜索；后一种是将数据源形成索引文件，提供全局变量`window.__LUNR__` 进行全文搜索。\n\n---\n\n##### 二、gatsby-plugin-local-search\n\n 此插件，支持lunr和flexsearch这两种搜索引擎，目前还不支持中文搜索。\n\n###### 1、flexsearch\n\n安装和配置插件，形成数据节点\n\n```js\n# 安装插件，形成localSearchPages数据节点\nnpm install gatsby-plugin-local-search\n\n# gatsby-config.js配置插件：gatsby-plugin-local-search\nmodule.exports = {\n  plugins: [\n    // You can have multiple instances of this plugin to create indexes with\n    // different names or engines. For example, multi-lingual sites could create\n    // an index for each language.\n    {\n      resolve: 'gatsby-plugin-local-search',\n      options: {\n        // A unique name for the search index. This should be descriptive of\n        // what the index contains. This is required.\n        name: 'pages',\n\n        // Set the search engine to create the index. This is required.\n        // The following engines are supported: flexsearch, lunr\n        engine: 'flexsearch',\n\n        // Provide options to the engine. This is optional and only recommended\n        // for advanced users.\n        //\n        // Note: Only the flexsearch engine supports options.\n        engineOptions: 'speed',\n\n        // GraphQL query used to fetch all data for the search index. This is\n        // required.\n        query: `\n          {\n            allMarkdownRemark {\n              nodes {\n                id\n                frontmatter {\n                  path\n                  title\n                }\n                rawMarkdownBody\n              }\n            }\n          }\n        `,\n\n        // Field used as the reference value for each document.\n        // Default: 'id'.\n        ref: 'id',\n\n        // List of keys to index. The values of the keys are taken from the\n        // normalizer function below.\n        // Default: all fields\n        index: ['title', 'body'],\n\n        // List of keys to store and make available in your UI. The values of\n        // the keys are taken from the normalizer function below.\n        // Default: all fields\n        store: ['id', 'path', 'title'],\n\n        // Function used to map the result from the GraphQL query. This should\n        // return an array of items to index in the form of flat objects\n        // containing properties to index. The objects must contain the `ref`\n        // field above (default: 'id'). This is required.\n        normalizer: ({ data }) =>\n          data.allMarkdownRemark.nodes.map((node) => ({\n            id: node.id,\n            path: node.frontmatter.path,\n            title: node.frontmatter.title,\n            body: node.rawMarkdownBody,\n          })),\n      },\n    },\n  ],\n}\n```\n\n搜索页面用GraphQL进行查询操作，[`react-use-flexsearch`](https://github.com/angeloashmore/react-use-flexsearch)  ：用React显示flexsearch的查询结果的插件。\n\n```js\n# 安装插件\nnpm install react-use-flexsearch  flexsearch\n\n# src/pages/search.js，搜索页使用grapyql进行全文搜索\nimport * as React from 'react'\nimport { useStaticQuery } from 'gatsby'\nimport { useFlexSearch } from 'react-use-flexsearch'\n\nconst SearchPage = () => {\n  const queryData = useStaticQuery(graphql`\n    query {\n      localSearchPages {\n        index\n        store\n      }\n    }\n  `)\n  const index = queryData.localSearchPages.index\n  const store = queryData.localSearchPages.store\n\n  const [query, setQuery] = useState('')\n  const results = useFlexSearch(query, index, store)\n\n  return (\n    <main>\n      <h1>Search</h1>\n      <label>\n        <span>Search query</span>\n        <input\n          name=\"query\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n      </label>\n      <h2>Results</h2>\n      {results.length > 0 ? (\n        <ul>\n          {results.map((result) => (\n            <li key={result.url}>{result.title}</li>\n          ))}\n        </ul>\n      ) : (\n        <p>No results!</p>\n      )}\n    </main>\n  )\n}\n\nexport default SearchPage\n```\n\n###### 2、lunr\n\n[react-lunr](https://github.com/angeloashmore/react-lunr)  用React显示lunr查询结果的插件。 实现步骤跟flexsearch相似步骤，只需要以下几个地方：\n\n```js\n# 安装插件\nnpm install gatsby-plugin-local-search lunr react-lunr\n\n# 修改gatsby-config.js\n1、engine: 'flexsearch',  修改成   engine: 'lunr',\n  \n# 修改 src/pages/search.js\n1、import { useFlexSearch } from 'react-use-flexsearch'  修改成  import { useLunr } from 'react-lunr'\n2、const results = useFlexSearch(query, index, store) 修改成 const results = useLunr(query, index, store)\n```\n\n[flexsearch.net  官方](https://flexsearch.net/)\n\n[flexsearch.net - getting-started - 官方文档](https://flexsearch.net/docs/quick-start/getting-started/)\n\n[flexsearch - github - 源码](https://github.com/nextapps-de/flexsearch)\n\n\n\n---\n\n##### 三、gatsby-plugin-lunr\n\n###### 1、安装插件\n\n```shell\nnpm install lunr lunr-languages nodejieba gatsby-plugin-lunr\n```\n\n- [`lunr`](https://www.npmjs.com/package/lunr)  ：全文搜索引擎；\n- [`lunr-languages`](https://www.npmjs.com/package/lunr-languages)  ：让lunr支持多种语言的插件；\n- [`nodejieba`](https://www.npmjs.com/package/nodejieba)  ：Node.js 版本，实现中文分词功能的插件;\n\n- [`gatsby-plugin-lunr`](https://www.npmjs.com/package/gatsby-plugin-lunr)  ：将lunr接入到gatsby的插件；\n\n###### 2、配置插件，生成可搜索的lunr索引文件\n\n```js\n// gatsby-config.js\n{\n      resolve: `gatsby-plugin-lunr`,\n      options: {\n          languages: [{name:'zh'}],\n          // Fields to index. If store === true value will be stored in index file.\n          // Attributes for custom indexing logic. See https://lunrjs.com/docs/lunr.Builder.html for details\n          fields: [\n              { name: 'id' },\n              { name: 'title', store: true, attributes: { boost: 5 } },\n              { name: 'desc', store: true, attributes: { boost: 5 } },\n              { name: 'slug', store: true},\n              { name: 'url', store: true },\n              { name: 'content', store: true, attributes: { boost: 20 } },\n          ],\n          // How to resolve each field's value for a supported node type\n          resolvers: {\n              // 这里修改成你的gatsby数据节点，根据这些数据形成索引(index)\n              StrapiArticles: {\n                  id: node => node.id,\n                  title: node => node.title,\n                  desc: node => node.description,\n                  slug: node => node.slug,\n                  url: node => node.url,\n                  content: node => node.content,\n              },\n          },\n      },\n  },\n\n```\n\n###### 3、搜索页面搜索数据\n\n```jsx\nimport React, { useState, useEffect } from \"react\";\n\nconst SearchPage = ({ location, data }) => {\n\n  // 此类链接特殊处理，中文字符：?input=弄懂\n  const urlParse = require('url');\n  let parsedUrl = urlParse.parse(location.search, true);\n  let text = parsedUrl.query.input;\n  if (text === undefined || text === null) {\n    text = \"\";\n  }\n\n  const [query, setQuery] = useState(text)\n  const [results, setResults] = useState([])\n\n  useEffect(\n    () => {\n      if (!query || !window.__LUNR__) {\n        setResults([])\n        return\n      }\n      const lunrIndex = window.__LUNR__['zh']\n      const searchResults = lunrIndex.index.search(query)\n      setResults(\n        searchResults.map(({ ref }) => {\n          return lunrIndex.store[ref]\n        })\n      )\n    },\n    [query]\n  )\n\n  return (\n    <Layout >\n      <Seo title=\"搜索\" />\n      <Header className=\"site-layout-background\" style={{ padding: 0, backgroundColor: 'transparent' }} >\n        <div style={{ margin: '0px 0px 0px 0px', backgroundColor: 'white' }} >\n          <Row align='middle' >\n            <Col span={10}  >\n              <Link to=\"/\">\n                <img src={learnAnything} alt=\"logo\" style={{ margin: 0, maxHeight: 30, padding: '0 0 0 10px' }} />\n              </Link>\n            </Col>\n            <Col span={2}></Col>\n            <Col span={12} >\n              <Search\n                placeholder=\"输入查询内容...\"\n                allowClear\n                enterButton\n                size=\"large\"\n                style={{ minWidth: 100, maxWidth: 250, padding: '0 10px 0 0', float: 'right' }}\n                onSearch={(text) => { setQuery(text) }}\n              />\n            </Col>\n          </Row>\n\n        </div>\n\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '10px 10px 0px 10px', minHeight: 'calc(100vh - 134px)' }}>\n        <div className=\"site-layout-background\" style={{ padding: 20 }}>\n          {\n            results.length > 0 ? (\n              <List\n                header={<div>查询结果：</div>}\n                itemLayout=\"horizontal\"\n                dataSource={results}\n                renderItem={elem => {\n                  var url = elem.url ? elem.url : `/${elem.slug}`;\n                  return (\n                    <List.Item >\n                      <List.Item.Meta\n                        title={<a href={url} target=\"_blank\" rel=\"noreferrer\">{elem.title}</a>}\n                        description={elem.desc}\n                      />\n                    </List.Item>\n                  )\n                }}\n              />\n            ) : (\n              <p>No results!</p>\n            )\n          }\n        </div>\n      </Content>\n      <BackTop visibilityHeight={250} />\n      <FooterTemplate node={data} />\n    </Layout>\n  )\n}\n```\n\n[LUNR 官方网站](https://lunrjs.com/)\n\n[LUNR 官方文档 - getstart](https://lunrjs.com/guides/getting_started.html)\n\n---\n\n##### 四、其他待探索\n\n###### algolia\n\n[gatsby-plugin-algolia](https://www.gatsbyjs.com/plugins/gatsby-plugin-algolia/)\n\n[algolia](https://www.algolia.com/)\n\n[Adding Search](https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-search/)\n\n[js-search](https://www.gatsbyjs.com/docs/adding-search-with-js-search/)\n\n\n\n\n\n\n\n\n","url":"https://learn-anything.cn/gatsby-search","published_at":"2021-09-30T09:47:21.000Z","tags":[{"name":"Gatsby","slug":"gatsby"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"Gatsby实现中文全文搜索","slug":"gatsby-search"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-worker",
    "result": {"data":{"strapiArticles":{"id":"Articles_534","title":"怎么用JavaScript启动浏览器的后台线程？","description":"Worker 对象用于创建独立后台线程，可以处理一些耗时的操作且不会阻塞主线程(通常是UI线程)。可用的 Worker有：专用worker、共享worker、Service Worker。","content":"##### 一、简介\n\nWorker 对象用于创建独立后台线程，可以处理一些耗时的操作且不会阻塞主线程(通常是UI线程)。可用的 Worker有：专用worker、共享worker、Service Worker。\n\n---\n\n##### 二、专用worker\n\n只能被单一脚本调用创建后台线程。但在worker内，不能直接操作DOM节点，也不能使用window对象的默认方法和属性，[可用方法和对象，看这里!](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers)\n\n###### 1、worker 实例\n\n创建 work 线程并与主线程进行通讯。主线程和 worker 线程之间通过postMessage() 发送信息并用onmessage 接收消息。\n\n```html\n<!DOCTYPE html>\n<html lang='zh-CN'>\n<head>\n    <meta charset=\"utf-8\">\n    <title>work</title>\n</head>\n<body>\n    <h1>点击按钮向 work 发送消息！</h1>\n    <button id=\"number\">click</button>\n    <script>\n        // 1、创建 work线程 和 接收work信息的处理函数\n        const myWorker = new Worker('worker.js');\n        myWorker.onmessage = function (e) {\n            alert(e.data);\n        }\n\n        // 2、发送信息给 work线程\n        const btn = document.querySelector('#number');\n        btn.onclick = function () {\n            myWorker.postMessage(\"btn click\");\n        }\n    </script>\n</body>\n</html>\n```\n\n```js\n// worker.js\n// 3、接收消息\nonmessage = function (e) {\n    const workerResult = e.data + \" : worker send\";\n    // 4、发送消息给主线程\n    postMessage(workerResult);\n}\n```\n\n---\n\n###### 2、DedicatedWorkerGlobalScope\n\n专用worker的全局对象，也可以用 self 来访问。\n\n---\n\n##### 三、SharedWorker\n\n可以被多个脚本调用并创建多个后台线程，前提是这些脚本所在页面必须同源（相同的协议、host 以及端口）。\n\n###### 1、简单实例\n\n创建 SharedWorker 线程并与主线程进行通讯。\n\n```html\n<!DOCTYPE html>\n<html lang='zh-CN'>\n<head>\n    <meta charset=\"utf-8\">\n    <title>work</title>\n</head>\n<body>\n    <h1>点击按钮向 work 发送消息！</h1>\n    <button id=\"number\">click</button>\n    <script>\n        if (!!window.SharedWorker) {\n            // 1、创建 sharedwork线程 和 接收sharedwork信息的处理函数\n            const myWorker = new SharedWorker('worker.js');\n            myWorker.port.onmessage = function (e) {\n                alert(e.data);\n                console.log('Message received from worker');\n            }\n\n            // 2、发送信息给 sharedwork线程\n            const btn = document.querySelector('#number');\n            btn.onclick = function () {\n                myWorker.port.postMessage(\"btn click\");\n                console.log('Message posted to worker');\n            }\n        } else {\n            console.log(\"此浏览器不支持 SharedWorker ！\")\n        }\n    </script>\n</body>\n</html>\n```\n\n```js\n// worker.js\n// 3、消息处理函数\nonconnect = function (e) {\n    var port = e.ports[0];\n\n    port.onmessage = function (e) {\n        var workerResult = e.data + \" : worker send\";\n        // 4、发送消息给主线程\n        port.postMessage(workerResult);\n    }\n\n}\n```\n\n---\n\n###### 2、SharedWorkerGlobalScope\n\n共享worker的全局对象，也可以用 self 来访问。\n\n---\n\n##### 四、Service Worker\n\nService workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用来采取适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。\n\nService workers 只能用于 https，不能用于 Firefox浏览器 的隐身模式。\n\nService workers大量使用Promise，因为通常它们会等待响应后继续，并根据响应返回一个成功或者失败的操作。Promise非常适合这种场景。\n\n目前只有 Chrome、Firefox 对此功能有比较完整的支持，其他浏览器暂时不支持。\n\n---\n\n##### 五、参考文档\n\n- [Using_web_workers  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers)\n\n- [Web_Workers_API  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API)\n\n- [Functions_and_classes_available_to_workers  -  MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers)\n\n- [Worker  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker)\n- [SharedWorker  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/SharedWorker)\n\n- [DedicatedWorkerGlobalScope  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope)\n\n- [SharedWorkerGlobalScope  -  MDN](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope)\n\n- [A simple web worker test](https://github.com/mdn/simple-web-worker)\n- [A simple demo to show shared worker basics](https://github.com/mdn/simple-shared-worker)\n\n- [Service_Worker_API  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API)\n\n\n","url":"https://learn-anything.cn/java-script-worker","published_at":"2021-12-27T11:45:46.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"怎么用JavaScript启动浏览器的后台线程？","slug":"java-script-worker"}},
    "staticQueryHashes": ["63159454"]}
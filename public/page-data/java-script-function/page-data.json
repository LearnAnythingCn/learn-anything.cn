{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-function",
    "result": {"data":{"strapiArticles":{"id":"Articles_513","title":"详解JavaScript的函数和方法","description":"由  `function关键字`、函数名称和一些语句组成的函数体称之为函数。在 JavaScript中，函数与其他对象一样具有属性和方法，区别是函数可以被调用。如果一个函数中没有使用return语句，则它默认返回  `undefined`。","content":"##### 一、函数是什么？\n\n由  `function关键字`、函数名称和一些语句组成的函数体称之为函数。在 JavaScript中，函数与其他对象一样具有属性和方法，区别是函数可以被调用。如果一个函数中没有使用return语句，则它默认返回  `undefined`。\n\n---\n\n##### 二、定义函数的方式\n\n###### 1、函数声明\n\n函数声明是定义一个具有指定参数的函数。\n\n```js\n// 1、语法\nfunction name([param[, param[, ... param]]]) { statements }\n\n// 2、可以在函数声明之前调用函数，不会有语法问题\nhoisted(); // \"foo\"\n\nfunction hoisted() {\n     console.log(\"foo\");\n}\n```\n\n---\n\n###### 2、函数表达式\n\n```js\n// 语法\nvar myFunction = function name([param[, param[, ... param]]]) { statements }\n\n// 匿名写法\nvar myFunction = function() {\n    // statements\n}\n// 命名写法\nvar myFunction = function namedFunction(){\n    // statements\n}\n```\n\n```js\n// 使用实例\nvar foo = function() {}\nfoo.name // \"foo\"\n\nvar foo2 = foo\nfoo2.name // \"foo\"\n\nvar bar = function baz() {}\nbar.name // \"baz\"\n\nconsole.log(foo === foo2); //true\nconsole.log(typeof baz);// undefined\nconsole.log(bar === baz); // false (errors because baz == undefined)\n```\n\n```js\n// 在函数表达式之前调用函数，会有语法错误。\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function() {\n   console.log(\"bar\");\n};\n```\n\n---\n\n###### 3、动态创建函数\n\n```js\n// 法一：使用函数表达式创建\nvar myFunc;\nif (num == 0){\n  myFunc = function(theObject) {\n    theObject.make = \"Toyota\"\n  }\n}\n\n// 法二：使用 Function 对象创建\nvar x = 10;\nfunction createFunction1() {\n    var x = 20;\n    return new Function('return x;'); // 这里的 x 指向最上面全局作用域内的 x\n}\n```\n\n---\n\n###### 4、箭头函数 (=>)\n\n箭头函数是用更简洁的方式来表示函数。[更多内容，看这里！](https://learn-anything.cn/java-script-arrow-functions)\n\n```js\n// 语法一\n([param] [, param]) => { statements }\n// 语法二\nparam => expression\n```\n\n```js\nvar a = [\n  \"Hydrogen\",\n  \"Helium\",\n  \"Lithium\",\n  \"Beryllium\"\n];\n// 普通函数\nvar a2 = a.map(function(s){ return s.length });\nconsole.log(a2); // logs [ 8, 6, 7, 9 ]\n\n// 箭头函数\nvar a3 = a.map( s => s.length );\nconsole.log(a3); // logs [ 8, 6, 7, 9 ]\n```\n\n---\n\n###### 5、生成器函数\n\n用 `function *`  定义一个函数并返回一个  Generator 对象称之为 生成器函数。配合上 yield 关键字可以变成 异步函数。[详情，看这里！](https://learn-anything.cn/java-script-function-create)\n\n---\n\n###### 6、AsyncFunction\n\n可以使用 AsyncFunction 对象，动态创建异步函数。AsyncFunction 并不是一个全局对象，需要通过`Object.getPrototypeOf(async function(){}).constructor`来生成。JavaScript 中每个异步函数都是  AsyncFunction  的对象。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction)\n\n```js\n// 使用实例\nfunction resolveAfter2Seconds(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nvar AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\nvar a = new AsyncFunction('a',\n                          'b',\n                          'return await resolveAfter2Seconds(a) + await resolveAfter2Seconds(b);');\na(10, 20).then(v => {\n  console.log(v); // 4 秒后打印 30\n});\n```\n\n---\n\n##### 三、函数参数\n\n###### 1、默认参数\n\n```js\n// 1、参数默认值为 undefined\nfunction multiply(a, b) {\n  b = (typeof b !== 'undefined') ?  b : 1;\n  return a*b;\n}\nmultiply(5); // 5\n\n// 2、使用默认参数重新上面函数\nfunction multiply(a, b = 1) {\n  return a*b;\n}\nmultiply(5); // 5\n```\n\n- [更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters)\n\n---\n\n###### 2、剩余参数\n\n用 `...` 来表示不确定数量的剩余参数。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters)\n\n```js\n// 1、语法\nfunction(a, b, ...theArgs) {\n  // ...\n}\n\n// 2、实例\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map(x => multiplier * x);\n}\n\nvar arr = multiply(2, 1, 2, 3);\nconsole.log(arr); // [2, 4, 6]\n```\n\n---\n\n###### 3、arguments\n\narguments 是一个数组对象，包含函数的实际参数。[更多内容，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)\n\n```js\nfunction myConcat(separator) {\n   var result = ''; \n   var i;\n\n   for (i = 1; i < arguments.length; i++) {\n      result += arguments[i] + separator;\n   }\n   return result;\n}\n\nmyConcat(\", \", \"red\", \"orange\", \"blue\");\n// 结果： red, orange, blue, \n```\n\n---\n\n##### 四、方法\n\n当函数是一个对象的属性时，称之为方法。\n\n###### 1、方法定义\n\n从ECMAScript 2015开始，采用了更简短的方式来定义方法。\n\n```js\nvar obj = {\n  foo: function() {\n    /* code */\n  }\n};\n\n// 用下面简写的方式代替上面\nvar obj = {\n  foo() {\n    /* code */\n  }\n};\n```\n\n###### 2、生成器方法\n\n```js\n// 用有属性名的语法定义方法（ES6之前）：\nvar obj2 = {\n  g: function*() {\n    var index = 0;\n    while(true)\n      yield index++;\n  }\n};\n\n// 同一个方法，简写语法：\nvar obj2 = {\n  * g() {\n    var index = 0;\n    while(true)\n      yield index++;\n  }\n};\n\nvar it = obj2.g();\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\n```\n\n###### 3、Async 方法\n\n```js\n// 用有属性名的语法定义方法（ES6之前）：\nvar obj3 = {\n  f: async function () {\n    await some_promise;\n  }\n};\n\n// 同一个方法，简写语法：\nvar obj3 = {\n  async f() {\n    await some_promise;\n  }\n};\n```\n\n###### 4、Async 生成器方法\n\n```js\nvar obj4 = {\n  f: async function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n};\n\n// 同一个方法，简写语法：\nvar obj4 = {\n  async* f() {\n   yield 1;\n   yield 2;\n   yield 3;\n  }\n};\n```\n\n###### 5、get 和 set\n\n使用 get 和 set 关键字将属性与函数关联起来，可以对属性做一些复杂的自定义操作。[使用方法，看这里！](https://learn-anything.cn/java-script-get-set)\n\n---\n\n##### 五、其他特性\n\n###### 1、检测函数是否存在\n\n`typeof`  操作符可以判断一个函数是否存在。\n\n```js\nif ('function' === typeof window.noFunc) {\n   // use noFunc()\n } else {\n   // do something else\n }\n```\n\n---\n\n###### 2、闭包\n\n闭包（closure）就是通过嵌套函数的方式，缓存嵌套函数及其执行环境，等待下一次调用。当内部函数以某一种方式被任何一个外部函数作用域访问时，一个闭包就产生了。[更多内容，看这里！](https://learn-anything.cn/java-script-closure)\n\n---\n\n###### 3、预定义函数\n\nJavaScript语言有一些全局函数可用：eval()、isNaN()、parseInt()等。[详细说明，看这里！](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects#%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7)\n\n---\n\n###### 4、Function 对象\n\nFunction 对象 可以动态创建 函数，实际上每个函数都是一个 Function 对象。[详细说明，看这里！](https://learn-anything.cn/java-script-function-detail)\n\n---\n\n###### 5、立即调用函数表达式\n\n在定义时就会立即执行的函数，称之为 立即调用函数表达式(IIFE)。\n\n```js\n// 1、语法一\n(function () {\n    statements\n})();\n\n// 2、实例一\n(function () {\n    console.log(\"Barry\");\n})();\n// 输出：Barry\n\n// 3、语法二（使用 void 关键字）\nvoid function(){\n  statements\n}();\n\n// 4、实例二\nvoid function() {\n    var bar = function () {\n        console.log(\"iife\");\n    };\n    bar();\n}();\n```\n\n---\n\n##### 六、参考文档\n\n- [Functions  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions)\n- [Functions  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions)\n- [Method_definitions  -  MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions)\n\n\n","url":"https://learn-anything.cn/java-script-function","author":null,"published_at":"2021-12-21T12:58:39.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解JavaScript的函数和方法","slug":"java-script-function"}},
    "staticQueryHashes": ["63159454"]}
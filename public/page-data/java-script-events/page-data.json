{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-events",
    "result": {"data":{"strapiArticles":{"id":"Articles_532","title":"详解JavaScript事件处理程序","description":"事件是用户与浏览器进行交互的方式。譬如用户点击按钮就会产生click事件，浏览器会找到相应js代码并执行，我们要做的就是按照规则编写js代码放在指定位置即可。","content":"##### 一、事件是什么？\n\n事件是用户与浏览器进行交互的方式。譬如用户点击按钮就会产生click事件，浏览器会找到相应js代码并执行，我们要做的就是按照规则编写js代码放在指定位置即可。\n\n---\n\n##### 二、怎么使用事件功能？\n\n两种方式使用事件功能：1、增加元素的事件属性；2、调用内置对象的方法addEventListener。\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Random color example — event handler attribute</title>\n    <style>\n        button {\n            margin: 10px\n        }\n    </style>\n</head>\n\n<body>\n    <button onclick=\"bgChange()\">Change color</button>\n    <button id=\"test\">click</button>\n    <script>\n        // 法一：增加事件\n        function random(number) {\n            return Math.floor(Math.random() * number);\n        }\n\n        function bgChange() {\n            const rndCol = 'rgb(' + random(255) + ',' + random(255) + ',' + random(255) + ')';\n            document.body.style.backgroundColor = rndCol;\n        }\n\n\n        // 法二：增加事件\n        document.querySelector(\"#test\").addEventListener(\"click\", () => alert(\"click\"));\n    </script>\n</body>\n\n</html>\n```\n\n---\n\n##### 三、核心概念\n\n###### 1、事件冒泡\n\n当元素发生了某个事件，不仅会执行本元素的事件处理程序，还会一直向上寻找所有父元素对应的事件处理程序并执行。\n\n---\n\n###### 2、事件委托\n\n让父元素监听执行子元素的某个事件，原理：子元素没有注册事件处理程序，事件会冒泡向上寻找相应执行程序。\n\n```html\n<ul id=\"parent-list\">\n\t<li id=\"post-1\">Item 1</li>\n\t<li id=\"post-2\">Item 2</li>\n\t<li id=\"post-3\">Item 3</li>\n\t<li id=\"post-4\">Item 4</li>\n\t<li id=\"post-5\">Item 5</li>\n\t<li id=\"post-6\">Item 6</li>\n</ul>\n```\n\n```js\n// 父元素增加 click 监听事件\ndocument.getElementById(\"parent-list\").addEventListener(\"click\", function(e) {\n\t// e.target 是被点击元素\n\tif(e.target && e.target.nodeName == \"LI\") {\n\t\tconsole.log(\"List item \", e.target.id.replace(\"post-\", \"\"), \" was clicked!\");\n\t}\n});\n```\n\n---\n\n##### 四、Event\n\n事件都是继承于 Event 对象。\n\n###### 1、event.preventDefault()\n\n功能：不执行默认操作，但是事件还是会继续冒泡。\n\n实例：在表单提交中，通常会做一些数据校验，如果数据不符合格式，可以用preventDefault() 方法来阻止数据发送到服务器的默认操作。[更多...](https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault)\n\n```js\nform.onsubmit = function(e) {\n  if (fname.value === '' || lname.value === '') {\n    e.preventDefault();\n    para.textContent = 'You need to fill in both names!';\n  }\n}\n```\n\n---\n\n###### 2、event.stopPropagation\n\n功能：让事件响应到此结束，不再向上冒泡。[更多...](https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation)\n\n```js\nvideo.onclick = function(e) {\n  e.stopPropagation();\n  video.play();\n};\n```\n\n---\n\n##### 五、EventTarget\n\nEventTarget 是一个 DOM 接口，可以监听、接收、移除事件。\n\n###### 1、EventTarget.addEventListener\n\n功能：将 回调函数 和 元素事件 进行绑定，当事件发生时，回调函数会被执行。[更多...](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)\n\n```js\nfunction clickTest(event) {\n  if (event.type == click) {\n  } else {\n  }\n}\n\n// 添加事件监听器\nvar el = document.getElementById(\"btnTest\");\nel.addEventListener(\"click\", clickTest);\n```\n\n---\n\n###### 2、EventTarget.removeEventListener\n\n删除用 EventTarget.addEventListener 注册的事件处理程序。[更多...](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/removeEventListener)\n\n```js\nvar body = document.querySelector('body'),\n    clickTarget = document.getElementById('click-target'),\n    mouseOverTarget = document.getElementById('mouse-over-target'),\n    toggle = false;\n\nfunction makeBackgroundYellow() {\n    'use strict';\n\n    if (toggle) {\n        body.style.backgroundColor = 'white';\n    } else {\n        body.style.backgroundColor = 'yellow';\n    }\n\n    toggle = !toggle;\n}\n\nclickTarget.addEventListener('click',\n    makeBackgroundYellow,\n    false\n);\n\nmouseOverTarget.addEventListener('mouseover', function () {\n    'use strict';\n\n    clickTarget.removeEventListener('click',\n        makeBackgroundYellow,\n        false\n    );\n});\n```\n\n---\n\n###### 3、EventTarget.dispatchEvent\n\n功能：代码中直接触发事件。[更多...](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent)\n\n实例：编程方式生成单击事件。[自定义事件](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events)\n\n```js\nfunction simulateClick() {\n  const event = new MouseEvent('click', {\n    view: window,\n    bubbles: true,\n    cancelable: true\n  });\n  const cb = document.getElementById('checkbox');\n  const cancelled = !cb.dispatchEvent(event);\n\n  if (cancelled) {\n    // A handler called preventDefault.\n    alert(\"cancelled\");\n  } else {\n    // None of the handlers called preventDefault.\n    alert(\"not cancelled\");\n  }\n}\n```\n\n---\n\n##### 六、查看所有可用事件\n\n- 所有可用事件这里 [查看>>>](https://developer.mozilla.org/zh-CN/docs/Web/Events#%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E7%B1%BB%E5%88%AB)\n\n---\n\n##### 七、参考文档\n\n- [Events  -  MDN](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Events)\n\n- [Event接口说明  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Event)\n- [EventTarget  -  MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget)\n\n\n","url":"https://learn-anything.cn/java-script-events","published_at":"2021-12-26T11:19:42.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解JavaScript事件处理程序","slug":"java-script-events"}},
    "staticQueryHashes": ["63159454"]}
{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/react-state-hook",
    "result": {"data":{"strapiArticles":{"id":"Articles_115","title":"React的State Hook用法详解！","description":"State Hook是啥？解决什么问题？怎么使用？useState的具体参数怎么使用？函数式更新？惰性初始化是什么？","content":"##### 一、State Hook是啥？\n\nState Hook 就是指  `useState`  这个特殊函数，让你不用编写class，就可以使用state特性，换言之就是让  **函数组件**  拥有  state 特性，对数据进行动态更新。\n\n---\n\n##### 二、class中的state\n\n动态改变数据，譬如一个计数器组件，class组件中实现方式如下：\n\n```jsx\nclass Example extends React.Component {\n    constructor(props) {\n        super(props);\n        // 只能在构造函数中初始化state\n        this.state = {\n            count: 0\n        };\n    }\n\n    // 只能调用 this.setState 方法来更新 count 值\n    render() {\n        return (\n            <div>\n                <p>You clicked {this.state.count} times</p>\n                <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n                    Click me\n                </button>\n            </div>\n        );\n    }\n}\n```\n\n---\n\n##### 三、useState怎么用？\n\n###### 1、简单实例\n\n在函数组件中，用  `useState`  实现计数器功能，跟上面class实现一样的功能。\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n    // 声明 `count` 的 state 变量 和 用于改变 `count` 的setCount方法；\n    const [count, setCount] = useState(0);\n    // 上面这一句是js中数组解构语法，其实它等同于下面这几句：\n    //   var countStateVariable = useState(0); // 返回一个有两个元素的数组\n    //   var count = countStateVariable[0]; // 数组里的第一个值\n    //   var setCount = countStateVariable[1]; // 数组里的第二个值\n\n    // count 和 setCount 是函数内部的变量和方法，可直接访问\n    return (\n        <div>\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n                Click me\n            </button>\n        </div>\n    );\n}\n```\n\n---\n\n###### 2、可使用多个state\n\n```js\nfunction ExampleWithManyStates() {\n  // 声明多个 state 变量，且他们都是相互独立的\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: '学习 Hook' }]);\n\n```\n\n---\n\n###### 3、函数式更新\n\n`setCount( c => c +1 )`  这种方式就是函数式更新，确保了 count 更新总是建立在最新的数据上，让你从 count 的管理中解脱出来。如下实例，一个计数器，count 数值的变化，永远基于最新数值，让你不用去管理count。\n\n```jsx\nfunction Counter({ initialCount }) {\n    const [count, setCount] = useState(initialCount);\n    return (\n        <>\n            Count: {count}\n            <button onClick={() => setCount(initialCount)}>Reset</button>\n            <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\n            <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\n        </>\n    );\n}\n```\n\n备注：此功能用在  `useEffect`  中，会非常方便。\n\n---\n\n###### 4、惰性初始化\n\nuseState  的初始化，可以通过传入函数的方式进行，适用于复杂计算后的结果。\n\n```js\nconst [state, setState] = useState(() => {\n    const initialState = someExpensiveComputation(props);\n    return initialState;\n});\n```\n\n---\n\n###### 5、跳过 state 更新\n\n调用 useState 的更新方法来更新state，如果新 state  数值跟之前是一样的，那么组件会跳过子组件的渲染和 useEffect  的调用。\n\n---\n\n##### 四、合并更新\n\nclass组件中的  setState 会自动合并更新 state 对象。useState 可通过 `展开运算符` 、  `Object.assign`、  `useReducer`  来合并更新对象。\n\n###### 1、展开运算符\n\n```js\nconst [state, setState] = useState({});\nsetState(prevState => {\n    return { ...prevState, ...updatedValues };\n});\n```\n\n###### 2、Object.assign\n\n```js\nconst [state, setState] = useState({});\nsetState(prevState => {\n    return Object.assign(prevState, updatedValues);\n});\n```\n\n###### 3、useReducer\n\n更适合用于管理包含多个子值的 state 对象。\n\n---\n\n##### 五、参考链接\n\n- [hooks-state](https://zh-hans.reactjs.org/docs/hooks-state.html)\n\n\n","url":"https://learn-anything.cn/react-state-hook","published_at":"2021-10-14T09:32:00.000Z","tags":[{"name":"React","slug":"react"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"React的State Hook用法详解！","slug":"react-state-hook"}},
    "staticQueryHashes": ["63159454"]}
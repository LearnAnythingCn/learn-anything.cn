{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/gatsby-link",
    "result": {"data":{"strapiArticles":{"id":"Articles_350","title":"Gatsby中页面是怎么跳转的？","description":"Gatsby使用了其内置组件 Link 来实现页面之间的跳转功能，用法类时HTML 中的a标签，但多了预加载功能和根目录调整功能。","content":"##### 一、页面跳转\n\nGatsby 项目内部页面跳转有四种方式：`<Link>组件`  、  `navigate函数`、`<a>标签`、`window.open函数`。\n\n###### 1、区别\n\n- 站内页面跳转使用 ：`<Link>组件`  、  `navigate函数`；\n- 站外页面跳转使用 ：`<a>标签`、`window.open函数`；\n\n###### 2、原因\n\nGatsby 对 `<Link>组件`  做了预加载功能，当 `<Link> 组件` 被显示或鼠标 hove 在上面，它就会自动加载其要跳转的页面，等待用户点击  `<Link>组件` 进行页面跳转时，会无延迟的立刻打开页面，让网站感觉上反应速度非常快，体验更好。\n\nGatsby 对网站根目录的变更也做了处理，使用  `<Link>组件`  、  `navigate函数`无需再进行硬编码等调整，而  `<a>标签`、`window.open函数`必须修改代码。[详情，看这里！](https://learn-anything.cn/gatsby-prefix)\n\n---\n\n##### 二、Link 组件\n\n###### 1、实例展示\n\n```js\n// Link使用实例：\nimport * as React from 'react'\nimport { Link } from 'gatsby'\n\nconst IndexPage = () => {\n  return (\n    <main>\n      <title>Home Page</title>\n      <h1>Welcome to my Gatsby site!</h1>\n      <Link to=\"/about\">About</Link>\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n    </main>\n  )\n}\n\nexport default IndexPage\n```\n\n---\n\n###### 2、state 传递数据\n\n Link组件用 state 属性传递数据。\n\n```js\nconst PhotoFeedItem = ({ id }) => (\n  <div>\n    {/* (skip the feed item markup for brevity) */}\n    <Link\n      to={`/photos/${id}`}\n      state={{ fromFeed: true }}\n    >\n      View Photo\n    </Link>\n  </div>\n)\n```\n\n```js\n// photos.js\nconst Photo = ({ location, photoId }) => {\n  if (location.state.fromFeed) {\n    return <FromFeedPhoto id={photoId} />\n  } else {\n    return <Photo id={photoId} />\n  }\n}\n```\n\n---\n\n###### 3、样式调整\n\n当页面有两个 页面切换导航：Home 和  About，当跳转到 Home 时，要求其对应 `<Link>` 高亮，表示被选中。就可以用 activeClassName  和  activeStyle  ，来为 `<Link>` 增加高亮的具体样式。\n\n```js\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst SiteNavigation = () => (\n  <nav>\n    <Link\n      to=\"/\"\n      {/* This assumes the `active` class is defined in your CSS */}\n      activeClassName=\"active\"\n    >\n      Home\n    </Link>\n    <Link\n      to=\"/about/\"\n      activeStyle={{ color: \"red\" }}\n    >\n      About\n    </Link>\n  </nav>\n)\n```\n\n###### 4、`getProps`\n\n也可以通过 `getProps`  属性来改变选择时的样式，其属性值是一个函数，函数的参数有如下几个：\n\n- `isCurrent` - true if the `location.pathname` is exactly the same as the anchor’s href.\n- `isPartiallyCurrent` - true if the `location.pathname` starts with the anchor’s href.\n- `href` - the fully resolved href of the link.\n- `location` - the app’s location.\n\n```js\n// 1、当前页面与Link中to相同，表示当前Link被选中，用 active 的样式显示 Link\nconst isActive = ({ isCurrent }) => {\n  return isCurrent ? { className: \"active\" } : {}\n}\n\nconst ExactNavLink = props => (\n  <Link getProps={isActive} {...props} />\n)\n\n// 2、当前页面 是 Link中to 的子页面，也表示当前 Link被选中，用 active 的样式显示 Link\n// 例如：当前页面是 ‘/somepage/info’; Link 中 to 是‘/somepage’；此 Link 也用 active 样式显示。\nconst isPartiallyActive = ({\n  isPartiallyCurrent\n}) => {\n  return isPartiallyCurrent\n    ? { className: \"active\" }\n    : {}\n}\n\nconst PartialNavLink = props => (\n  <Link getProps={isPartiallyActive} {...props} />\n)\n```\n\n---\n\n###### 5、禁用 `后退`  操作\n\n如果页面有这样的跳转顺序：页面a -> 页面b -> 页面c，那么在页面c 点击浏览器 `后退按钮`，页面会跳转到b，这是正常情况。如果在页面c 点击浏览器的 `后退按钮`， 需要直接回到页面a，怎么做呢？\n\n在 页面b 的 `Link` 组件增加 `replace` 属性即可，这样浏览器的历史访问记录会忽略 页面b 的存在。\n\n```shell\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst AreYouSureLink = () => (\n  <Link\n    to=\"/confirmation/\"\n    replace\n  >\n    Yes, I’m sure\n  </Link>\n)\n```\n\n---\n\n##### 三、navigate 函数\n\n###### 1、实例展示\n\n```js\n// navigate 函数 使用方式\nimport React from \"react\"\nimport { navigate } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default function Index() {\n    return (\n        <Layout>\n            {/* Note: this is an intentionally contrived example, but you get the idea! */}\n            <button onClick={() => (navigate(\"/page-2\", {\n                state: { formValues },\n                replace: true\n            }))}>\n                Go to page 2, dynamically\n            </button>\n        </Layout>\n    )\n}\n```\n\n---\n\n###### 2、属性说明\n\n编写一些事件时，无法使用 `<Link> 组件` ，只能用 `navigate 函数`  来代替，实现页面跳转。\n\n- state 属性：可以传递数据给跳转页面；\n- replace ：禁止浏览器历史记录本页面，也就是回退时忽略此页面，与  `<Link>组件`  的  `replace`  属性一个意思。\n\n---\n\n##### 五、手动路由\n\n###### 1、withPrefix\n\n对于手动创建的路径，可以使用 `withPrefix` 给路径加上前缀。\n\n```js\nimport { withPrefix } from \"gatsby\"\n\nconst IndexLayout = ({ children, location }) => {\n  const isHomepage = location.pathname === withPrefix(\"/\")\n\n  return (\n    <div>\n      <h1>Welcome {isHomepage ? \"home\" : \"aboard\"}!</h1>\n      {children}\n    </div>\n  )\n}\n```\n\n---\n\n##### 六、参考文档\n\n- [the-gatsby-link-component - 官方文档](https://www.gatsbyjs.com/docs/linking-between-pages/#the-gatsby-link-component)\n- [gatsby-link](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-link/)\n- [Link](https://reach.tech/router/api/Link)\n\n\n","url":"https://learn-anything.cn/gatsby-link","author":null,"published_at":"2021-11-09T08:48:33.000Z","tags":[{"name":"Gatsby","slug":"gatsby"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"Gatsby中页面是怎么跳转的？","slug":"gatsby-link"}},
    "staticQueryHashes": ["63159454"]}
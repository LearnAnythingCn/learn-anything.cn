{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/git-cmd-detail",
    "result": {"data":{"strapiArticles":{"id":"Articles_543","title":"详解Git命令使用方式！","description":"git的命令有哪些？怎么使用？冲突怎么解决等！","content":"##### 一、新建仓库\n\n如果本地有文件需要进行版本管理，步骤如下：\n\n- 第一步：注册账户并新建免费仓库，两个仓库平台可以使用：[github(国外)](https://github.com/)、[gitee(国内)](https://gitee.com/)；\n- 第二步：新建仓库是务必勾选 README.md，否则后面要重新上传，比较麻烦，新建完成后获得仓库地址：`https://github.com/**.git`  或 `git@github.com:***/***.git`\n- 第三步：本地初始化并提交文件；\n\n```shell\ncd 需要版本管理的文件夹\n\n# 初始化git，生成必要文件\ngit init\n# 增加所有版本到 git 暂存区\ngit add *\n# 提交新增的文件\ngit commit -m \"第一次提交\"\n\n# 修改当前分支名master 为 main（Github默认分支名为main）\ngit branch -M main\n# 增加远程仓库（修改为正确的仓库地址）\ngit remote add origin https://github.com/***/***.git\n# 推送上面提交的文件到远程仓库\ngit push -u origin main\n```\n\n---\n\n##### 二、下载\n\ngit 支持 https、git、ftp等传输协议进行数据的上传和下载。\n\n###### 1、[clone](https://git-scm.com/docs/git-clone/zh_HANS-CN)\n\n功能：下载远程仓库的代码到本地文件夹。\n\n```shell\n# 把代码 clone 到 newname 文件夹中\ngit clone https://github.com/***/*** newname\ngit clone git@github.com:***/***.git newname\n\n# 下载代码并替换远程仓库名origin 为 booyah\ngit clone git@github.com:***/***.git -o booyah\n\n# 下载最新一次提交的版本（不下载以前的版本历史，减少下载数据）\ngit clone --depth 1 git@github.com:***/***.git\n# 下载指定分支最新一次提交的版本（不下载以前的版本历史，减少下载数据）\ngit clone --depth 1  --branch bname git@github.com:***/***.git\n# 上面只下载最新一次版本，如果再想下载其他分支，用如下命令\ngit remote set-branches origin 'remote_branch_name'\ngit fetch --depth 1 origin remote_branch_name\ngit checkout remote_branch_name\n```\n\n---\n\n###### 2、[fetch](https://git-scm.com/docs/git-fetch)\n\n功能：下载远程仓库的分支、tag的最新版本到本地目录： `.git/FETCH_HEAD`。\n\n```shell\n# 更新代码的两种方法：\n\n# 方法一\n# 下载origin仓库的master分支代码到本地FETCH_HEAD\n$ git fetch origin master\n# 比较本地与远程的区别\n$ git log -p master.. origin/master\n# 合并更新\n$ git merge FETCH_HEAD\n\n# 方法二\n# 下载origin仓库的master最新代码，存为temp分支\n$ git fetch origin master:temp\n# 比较master分支和temp分支的不同\n$ git diff temp\n# 合并temp分支到master分支\n$ git merge temp\n# 删除temp\n$ git branch -d temp\n```\n\n---\n\n###### 3、[pull](https://git-scm.com/docs/git-pull)\n\n功能：下载远程仓库最新代码后，合并到当前分支中。\n\n```shell\n# 拉取origin的master分支，与本地branchtest分支合并\ngit pull origin master:branchtest\n\n# 拉取origin的master分支，与当前分支合并\ngit pull origin master\n```\n\n---\n\n###### 4、[checkout](https://git-scm.com/docs/git-checkout)\n\n- 功能1：恢复本地目录中的文件至指定版本（不修改暂存区）。\n\n  语法：git checkout  [<tree-ish>] [--] [<pathspec>…]\n\n```shell\n# 放弃 hello.c 中的改动，恢复至最近提交版本\ngit checkout hello.c\n```\n\n- 功能2：恢复本地目录至指定版本，不改变本地目录中已经修改的文件。\n\n  语法：git checkout  <commit>\n\n```shell\n# 恢复本地目录支最近提交版本\ngit checkout\ngit checkout HEAD\n```\n\n- 功能3：切换分支。\n\n  语法：git checkout [< branch >]\n\n```shell\n# 切换到存在的指定分支（当前分支的修改也会合并到新分支）\ngit checkout branchname\n# 新建分支并切换到新分支（当前分支的修改也会合并到新分支）\ngit checkout -b newbranchname\n```\n\n---\n\n##### 三、文件\n\n###### 1、[add](https://git-scm.com/docs/git-add/zh_HANS-CN)\n\n功能：增加文件到暂存区。\n\n```shell\n# 增加文件到暂存区\ngit add file.c\n# 增加当前目录所有文件\ngit add *\n```\n\n---\n\n###### 2、[status](https://git-scm.com/docs/git-status/zh_HANS-CN)\n\n功能：显示文件的状态：未跟踪、新增、修改。\n\n```shell\n# 查看文件状态(详细版本)\n$ git status\n# 查看文件状态(简略版本) ??未跟踪  A新增  M修改\n$ git status -s\n$ git status -short\n```\n\n###### 3、[diff](https://git-scm.com/docs/git-diff)\n\n```shell\n# 查看修改后还没暂存的内容\ngit diff\n# 查看上一次提交后，被修改且用 git add 加入到暂存区的文件\ngit diff --staged\ngit diff --cached （ --staged 和 --cached 是同义词）\n# 查看上一次提交后，被修改后的文件（在不在暂存区都会被显示）\ngit diff HEAD\n\n# 比较最后两次提交的差异\ngit diff HEAD^ HEAD\n\n# 比较 topic分支 与 master分支 之间的差异\ngit diff topic master\ngit diff topic..master\n# 查看 topic分支产生后，master分支的变化\ngit diff topic...master\n```\n\n###### 4、[rm](https://git-scm.com/docs/git-rm)\n\n功能：删除本地目录和本地仓库中的指定文件。\n\n```shell\n# 从本地磁盘和git仓库中删除文件\ngit rm PROJECTS.md\n# 删除文件：从git仓库中删除，但不删除本地磁盘\ngit rm --cached README\n```\n\n---\n\n###### 5、[mv](https://git-scm.com/docs/git-mv/zh_HANS-CN)\n\n功能： 移动或重命名一个文件、一个目录或一个符号链接。\n\n```shell\n# 修改文件名称\ngit mv file_from file_to\n```\n\n---\n\n###### 6、[stash](https://git-scm.com/docs/git-stash)\n\n功能：把当前目录所有修改存储起来。\n\n使用场景：当工作到一半，无法提交版本，却又要切换到其他分支，这时可以先把修改存起来，待需要时再恢复。\n\n```shell\n# 存储当前目录的改动（修改、已暂存，不包括未跟踪文件）\ngit stash\ngit stash push\n# 存储当前目录的改动（修改、已暂存、未跟踪）\ngit stash -u\ngit stash --include-untracked\n# 存储当前目录的改动（修改、已暂存、未跟踪、已忽略）\ngit stash -a\ngit stash --all\n\n# 新建分支并把存储内容恢复到新分支，完成后会删除存储内容\ngit stash branch testchanges\n\n# 查看已有的存储内容\ngit stash list\n\n# 恢复最近一次存储内容\ngit stash apply\n# 恢复指定的存储内容\ngit stash apply stash@{2}\n\n# 删除指定存储内容\ngit stash drop stash@{2}\n# 删除最近存储内容\ngit stash pop\n```\n\n---\n\n###### 7、[clean](https://git-scm.com/docs/git-clean)\n\n功能：清除本地目录中未跟踪的文件。\n\n```shell\n# 从工作目录中移除未被追踪的文件(不删除目录)\ngit clean\n# 移除工作目录中所有未追踪的文件以及空的子目录\ngit clean -f -d\n\n# 输出运行一次清理过程，不执行真正的清理操作\ngit clean -d -n\ngit clean -d --dry-run \n\n# 用交互模式清理，删除内容前让你选择怎么操作\ngit clean -x -i\n# 删除所有为跟踪文件和目录，包括忽略文件和目录\ngit clean -x\n# 仅删除 Git 忽略的文件\ngit clean -X\n```\n\n---\n\n##### 四、分支\n\n合并分支有两种方式：merge 和 rebase，区别是rebase 合并后只会保留主分支，让整个版本更整洁。\n\n---\n\n###### 1、[branch](https://git-scm.com/docs/git-branch/zh_HANS-CN)\n\n```shell\n# 列出所有分支（分支前面的*，表示是当前使用分支，也就是head指向的分支）\ngit branch\n# 查看每个分支，最后一次提交信息\ngit branch -v\n\n# 查看已经合并到当前分支的分支，列出的分支无作用，可以用(git branch -d 分支名)删除\ngit branch --merged\n# 查看没有合并到当前分支的分支\ngit branch --no-merged\n# 查看没有合并到master的分支\ngit branch --no-merged master\n\n# 新建分支，但不会切换到新分支\ngit branch <newbranch>\n# 新建分支，并切换到新分支\ngit checkout -b <newbranch>\n\n# 切换分支\ngit checkout <branchname>\n\n# 删除testing分支（当有修改未合并，删除会失败）\ngit branch -d testing\n# 强制删除testing分支（有修改未合并也会删除）\ngit branch -D testing\n\n# 查看所有分支及其指向的版本\ngit log --oneline --decorate\n# 查看所有分支及其指向的版本（带有图形指向）\ngit log --oneline --decorate --graph --all\n```\n\n---\n\n###### 2、merge：Fast-forward\n\n只需要简单移动指针即可完成版本合并，称之为 Fast-forward。\n\n实例：master是主分支、其他两个是修复不同bug 的分支，现在hotfix 分支修复完毕，需要合并代码到主分支 master，怎么操作？\n\n```shell\n# 1、新建 hotfix 分支，并切换到 hotfix分支\ngit checkout -b hotfix\n# 2、修复bug\nvim index.html\n# 3、提交版本\ngit commit -a -m 'fixed the broken email address'\n\n# 4、切换到主分支 master\ngit checkout master\n\n# 5、合并代码（hotfix是直接在master上的修改，所以合并不会有冲突，这种合并称之为：Fast-forward），结果就是向后移动master指针即可。\ngit merge hotfix\n\n# 6、修复完毕后，hotfix 没有存在的必要，可以删除\ngit branch -d hotfix\n```\n\n![Fast-forward 合并](http://static.learn-anything.cn/Fast-forward 合并.png)\n\n---\n\n###### 3、merge：冲突\n\n如下图，现在iss53修复完毕，需要合并代码到 master 分支，怎么做？\n\n```shell\n# 1、切换到 iss53 分支，修改内容并提交。\n$ git checkout iss53\n$ vim index.html\n$ git commit -a -m 'finished the new footer [issue 53]'\n\n# 2、切换到主分支 master\n$ git checkout master\n\n# 3、合并 iss53分支 到当前分支(master)\n$ git merge iss53\n\n# 4、如果没有冲突，结果如下图，iss53分支没有作用了，可删除\ngit branch -d iss53\n```\n\n```shell\n# 备注，如果第3步有冲突产生，怎么处理？\n\n# 1、查看冲突的文件：\n$ git status\n\n# 方法1：解决冲突\n# 使用代码编辑器，打开冲突文件，解决冲突内容\n# 提交\ngit add 冲突文件名\ngit commit -m \"合并 iss53\"\n\n# 方法2：解决冲突\n# 使用命令，调用图形化工具解决冲突\ngit mergetool\n# 上面处理冲突完毕，保存后，再次查看冲突是否解决\ngit status\n# 提交\ngit commit -m \"合并 iss53\"\n```\n\n![合并两个分支-结果](http://static.learn-anything.cn/合并两个分支-结果.png)\n\n---\n\n###### 4、rebase\n\n将一个分支的所有修改移至另一分支，称之为变基。\n\n- 适用场景：在自己的分支里进行开发，当开发完成时，将分支代码变基到主分支(origin/master)，再切换到主分支提交修改。\n\n- 变基的原则：只对尚未推送的本地修改执行变基操作， 从不对已推送至别处的提交执行变基操作。\n\n- 实例：将图1中C4变基合并到主分支master，步骤如下：\n\n```shell\n# 1、切换到 experiment 分支\n\tgit checkout experiment\n# 2、把 experiment 上的修改变基到 master（结果如图2）\n\tgit rebase master\n# 3、切换到 master分支\n\tgit checkout master\n# 4、进行合并(结果如图3)\n\tgit merge experiment\n# 5、提交到远程仓库\n\tgit commit -m \"合并C3、C4\"\n```\n\n![变基](http://static.learn-anything.cn/变基.png)\n\n---\n\n###### 5、[ls-remote：远程分支](https://git-scm.com/docs/git-ls-remote)\n\n功能：查看远程仓库可用的引用（分支、tag等）。\n\n```shell\n# 查看远程仓库完整信息（包括分支、标签等）\ngit ls-remote <remote> \n# 查看远程分支的详细信息\ngit remote show <remote>\n\n$ git ls-remote --tags ./.\nd6602ec5194c87b0fc87103ca4d67251c76f233a\trefs/tags/v0.99\nf25a265a342aed6041ab0cc484224d9ca54b6f41\trefs/tags/v0.99.1\n7ceca275d047c90c0c7d5afb13ab97efdf51bd6e\trefs/tags/v0.99.3\nc5db5456ae3b0873fc659c19fafdde22313cc441\trefs/tags/v0.99.2\n0918385dbd9656cab0d1d81ba7453d49bbc16250\trefs/tags/junio-gpg-pub\n\n$ git ls-remote http://www.kernel.org/pub/scm/git/git.git master seen rc\n5fe978a5381f1fbad26a80e682ddd2a401966740\trefs/heads/master\nc781a84b5204fb294c9ccc79f8b3baceeb32c061\trefs/heads/seen\n\n$ git remote add korg http://www.kernel.org/pub/scm/git/git.git\n$ git ls-remote --tags korg v\\*\nd6602ec5194c87b0fc87103ca4d67251c76f233a\trefs/tags/v0.99\nf25a265a342aed6041ab0cc484224d9ca54b6f41\trefs/tags/v0.99.1\nc5db5456ae3b0873fc659c19fafdde22313cc441\trefs/tags/v0.99.2\n7ceca275d047c90c0c7d5afb13ab97efdf51bd6e\trefs/tags/v0.99.3\n\n# 使用 fetch、pull 下载远程分支代码\n```\n\n---\n\n##### 五、上传\n\n###### 1、[commit](https://git-scm.com/docs/git-commit)\n\n功能：在本地创建一个新的提交（包含所有修改内容），等待push命令更新到远程仓库。\n\n```shell\n# 本地创建一个新提交\n$ git commit -m 'initial project version'\n\n# 本地创建一个新提交：修改后的文件，无需用 git add 命令\n$ git commit -a -m 'added new benchmarks'\n\n# 漏提交的修改，用--amend来增加当前版本的提交信息，不会产生新版本\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend\n```\n\n---\n\n###### 2、[push](https://git-scm.com/docs/git-push)\n\n功能：把本地修改更新远程仓库。\n\n````shell\n# 推送当前分支 到 origin中与当前分支同名的分支\ngit push origin HEAD\n# 推送当前分支 到 origin的master分支\ngit push origin HEAD:master\n````\n\n---\n\n###### 3、[remote(远程仓库)](https://git-scm.com/docs/git-remote)\n\n```shell\n# 查看所有远程仓库名字\n$ git remote\n\n# 新增名为 pb 的远程仓库\n$ git remote add pb https://github.com/paulboone/ticgit\n\n# 查看所有远程仓库\n$ git remote -v\norigin\thttps://github.com/schacon/ticgit (fetch)\norigin\thttps://github.com/schacon/ticgit (push)\npb\thttps://github.com/paulboone/ticgit (fetch)\npb\thttps://github.com/paulboone/ticgit (push)\n\n# 拉取远程仓库pb的最新代码（不会与本地代码合并）\n$ git fetch pb\n# 拉取最新代码并与本地代码合并\n$ git pull\n\n# 推送 brach分支代码到 remote服务器\n$ git push <remote> <branch>\n# 将 master 分支推送到 origin 服务器\n$ git push origin master\n\n# 查看远程仓库\n$ git remote show <remote> \n# 查看远程仓库origin\n$ git remote show origin\n\n# 重命名远程仓库(pb -> paul)\n$ git remote rename pb paul\n\n# 删除 paul 这个远程仓库\n$ git remote remove paul\n$ git remote rm paul\n```\n\n---\n\n##### 六、撤销\n\n###### 1、[reset](https://git-scm.com/docs/git-reset/zh_HANS-CN) ：回退版本\n\n语法：git reset  < --soft | --mixed | --hard > < commit >\n\n功能：回退当前分支为指定版本。\n\n- --soft ：差异文件在暂存区和本地目录都保留为回退前版本，其他文件都恢复到指定版本；\n- --mixed：差异文件只在本地目录保留为回退前版本，其他文件都恢复到指定版本，这是默认模式；\n- --hard：不保留任何差异，全部恢复到指定版本，使用此模式一定要小心，防止文件丢失。\n\n![git-reset](http://static.learn-anything.cn/git-reset.png)\n\n```shell\n# 其他常用命令：\n# 1、放弃当前所有修改，回退3个版本（已经推送到远程仓库的版本，不要做这样的回退操作）\ngit reset --hard HEAD~3\n\n# 2、放弃当前修改，回退到最近提交版本（下面两个相同功能）\ngit reset --hard\ngit reset --hard HEAD\n```\n\n---\n\n###### 2、reset：回退文件\n\n- 语法：git reset  [tree-ish] [--] <pathspec>…\n- 说明：tree-ish 是版本号，默认是 HEAD。\n- 功能：只把暂存区文件恢复到指定版本，再调用 git commit ，即可让最新版本中的文件恢复到指定版本。\n- 下图展示 回滚文件到指定版本的情况：\n\n![reset-start](http://static.learn-anything.cn/reset-start.png)\n\n```shell\n# 恢复暂存区中 file.txt文件至最近提交版本\ngit add file.txt\ngit reset file.txt\ngit reset HEAD file.txt\n\n# 恢复暂存区中file.txt文件至上上个提交版本，再通过git commit，可让当前版本file.txt变成上上个版本。\ngit reset HEAD^ file.txt\n```\n\n---\n\n###### 3、reset 与checkout\n\n-  处理分支的区别：`git reset HEAD~`  与  `git checkout HEAD~` \n\n![reset-checkout](http://static.learn-anything.cn/reset-checkout.png)\n\n- 处理文件的区别\n\n|命令|描述|\n|-|-|\n|git reset file.txt|将暂存区中的 file.txt 文件恢复到最近提交版本；|\n|git checkout file.txt|将本地目录中的 file.txt 文件恢复到最近提交版本；|\n\n\n---\n\n###### 4、压缩提交版本\n\n如果修改某个bug产生了多次提交，使得整个版本链看起来过于杂乱，可以使用 reset 合并多余版本。下图9e5e6a4、38eb946版本就是多次提交版本，可以合并他们只产生一个新版本：68aef35.\n\n```shell\n# 1、回滚两个版本，--soft使得修改内容没有被删除，只是放入暂存区\ngit reset --soft HEAD~2\n\n# 2、只需要把暂存区内容再次提交即可，多余版本成功消除\ngit commit\n```\n\n![reset-squash](http://static.learn-anything.cn/reset-squash.png)\n\n---\n\n###### 5、参考文档\n\n- [Git-Tools-Reset-Demystified](https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified)\n\n---\n\n##### 七、版本历史\n\n###### 1、[log](https://git-scm.com/docs/git-log/zh_HANS-CN)\n\n功能：查看已提交的版本信息。\n\n```shell\n# 查看已提交的版本信息\n$ git log\n# 查看最近2次版本，修改的内容\n$ git log -p -2\n# 查看提交版本中的统计信息(多少文件被修改，多少新增、删除)\n$ git log --stat\n# 查看指定格式的版本信息(一行一个版本)，还有其他格式：short，full 和 fuller\n$ git log --pretty=oneline\n# 查看已提交版本信息（有图形）\n$ git log --graph --oneline --all\n```\n\n---\n\n###### 2、[tag(标签)](https://git-scm.com/docs/git-tag)\n\n可以用标签标明那些有特殊意义的版本，譬如v1.0、v2.0等。标签有两种类型：一种是只有标签名的轻量标签；另一种是包含名字、邮件、时间等详细信息的附注标签。[更多](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE)\n\n|命令|描述|\n|-|-|\n|git tag|查看所有标签|\n|git tag -l \"v1.8.5*\"|查看 v1.8.5 系列标签|\n|git show v1.4|查看标签及其相关版本信息|\n|git tag -a v1.4 -m \"my version 1.4\"|新建 附注标签（包含名字、邮件、时间等详细信息）|\n|git tag -a v1.2 9fceb02|指定版本 新建 附注标签，9fceb02 版本号前几位|\n|git tag v1.4|新建 轻量标签（只有标签名没有任何其他信息）|\n|git push origin v1.5|推送 v1.5标签 到远程仓库|\n|git push origin --tags|推送所有新建标签到远程仓库|\n|git tag -d v1.4|删除 v1.4 本地标签|\n|git push origin :refs/tags/v1.4-lw|删除本地标签后，推送到远程仓库|\n|git push origin --delete v1.4-lw|删除本地标签后，推送到远程仓库|\n\n\n---\n\n###### 3、[alias(别名)](https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias)\n\n```shell\n# 新建一个别名\ngit config --global alias.ci commit\n\n# 这样下面两个命令是等价的\ngit ci\ngit commit\n```\n\n---\n\n##### 八、参考文档\n\n- [Git - 官方中文档](https://git-scm.com/book/zh/v2)\n\n\n","url":"https://learn-anything.cn/git-cmd-detail","author":null,"published_at":"2022-01-14T11:40:49.000Z","tags":[{"name":"代码托管","slug":"code-collocation"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"详解Git命令使用方式！","slug":"git-cmd-detail"}},
    "staticQueryHashes": ["63159454"]}
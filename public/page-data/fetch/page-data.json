{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/fetch",
    "result": {"data":{"strapiArticles":{"id":"Articles_409","title":"学习fetch，从这里开始！","description":"fetch() 是 浏览器内置的 全局 JavaScript 方法，用于发出 http 请求，无需下载安装，可以直接使用。","content":"##### 一、fetch() 是什么？\n\nfetch() 是 浏览器内置的 全局 JavaScript 方法，用于发出 http 请求，无需下载安装，可以直接使用。\n\nfetch() 是属于 WorkerOrGlobalScope 对象的方法，而 Window 和 WorkerGlobalScope 都实现了 WorkerOrGlobalScope 对象，所以 fetch() 方法既可以在 主线程中使用，也可以在 后台work线程中使用。\n\n```javascript\n// 一个简单 http 请求\nfetch('http://example.com/movies.json')\n    .then(function (response) {\n        return response.json();\n    })\n    .then(function (myJson) {\n        console.log(myJson);\n    });\n```\n\n---\n\n##### 二、怎么使用？\n\n###### 1、简单使用实例\n\nfetch() 的第二个参数是  `init` 对象，用于设置 http 的配置信息。\n\n```javascript\npostData('http://example.com/answer', { answer: 42 })\n    .then(data => console.log(data))\n    .catch(error => console.error(error))\n\nfunction postData(url, data) {\n    return fetch(url, {\n        body: JSON.stringify(data),\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n            'user-agent': 'Mozilla/4.0 MDN Example',\n            'content-type': 'application/json'\n        },\n        method: 'POST',\n        mode: 'cors',\n        redirect: 'follow',\n        referrer: 'no-referrer',\n    })\n        .then(response => response.json())\n}\n```\n\n###### 2、配置详细说明\n\n- `method`  ：请求使用的方法，如 GET、POST、PUT、DELETE 等。\n- `headers`  ：请求的头信息。\n- `body`  ：请求的 body 信息，注意 GET 或 HEAD 方法的请求不能包含 body 信息。\n- `mode`  ：请求模式，可用值： cors、no-cors、same-origin\n- `credentials`  ：是否发送 cookie 给服务器：omit(任何情况都不发)、same-origin(同源才发)、include(任何情况都发)\n- `cache`  ：可用 cache 模式  ：default、no-store、reload、no-cache、force-cache、only-if-cached 。\n- `redirect`  ：重定向，Chrome中默认使用 follow ；\n  -  follow (自动重定向)\n  -  error (发生重定向将自动终止并且抛出错误)\n  -  manual (手动处理重定向)\n- `referrer`  ：发送请求的页面URL，浏览器默认添加到请求Header 中。设置成  `no-referrer` 表示不添加。\n- `referrerPolicy`  ：什么时候使用 referrer，可用值： no-referrer、 no-referrer-when-downgrade、origin、origin-when-cross-origin、unsafe-url 。\n- `integrity`  ：设定资源对应 hash 值，保证资源的完整性。\n\n---\n\n##### 三、使用场景\n\n###### 1、发送带凭证请求\n\n```javascript\n// 同不同源都会发送 带凭证的请求\nfetch('https://example.com', {\n  credentials: 'include'\n})\n\n// 只有同源才发送 带凭证请求\nfetch('https://example.com', {\n  credentials: 'same-origin'\n})\n\n// 同不同源都发送 不带凭证的请求\nfetch('https://example.com', {\n  credentials: 'omit'\n})\n```\n\n---\n\n###### 2、上传 JSON 数据\n\n```javascript\nvar url = 'https://example.com/profile';\nvar data = {username: 'example'};\n\nfetch(url, {\n  method: 'POST', // or 'PUT'\n  body: JSON.stringify(data), // data can be `string` or {object}!\n  headers: new Headers({\n    'Content-Type': 'application/json'\n  })\n}).then(res => res.json())\n.catch(error => console.error('Error:', error))\n.then(response => console.log('Success:', response));\n```\n\n---\n\n###### 3、上传文件\n\n可以通过 HTML  ` <input type=\"file\" />`  元素，FormData对象 和 fetch() 方法 上传文件。\n\n```javascript\nvar formData = new FormData();\nvar fileField = document.querySelector(\"input[type='file']\");\n\nformData.append('username', 'abc123');\nformData.append('avatar', fileField.files[0]);\n\nfetch('https://example.com/profile/avatar', {\n  method: 'PUT',\n  body: formData\n})\n.then(response => response.json())\n.catch(error => console.error('Error:', error))\n.then(response => console.log('Success:', response));\n```\n\n---\n\n###### 4、上传多个文件\n\n可以通过HTML `<input type=\"file\" mutiple/>` 元素，FormData() 和 fetch() 上传文件。\n\n```javascript\nvar formData = new FormData();\nvar photos = document.querySelector(\"input[type='file'][multiple]\");\n\nformData.append('title', 'My Vegas Vacation');\n// formData 只接受文件、Blob 或字符串，不能直接传递数组，所以必须循环嵌入\nfor (let i = 0; i < photos.files.length; i++) {\n    formData.append('photo', photos.files[i]);\n}\n\nfetch('https://example.com/posts', {\n  method: 'POST',\n  body: formData\n})\n.then(response => response.json())\n.then(response => console.log('Success:', JSON.stringify(response)))\n.catch(error => console.error('Error:', error));\n```\n\n---\n\n###### 5、检测请求是否成功\n\n可用下面方法捕获  网络故障、服务器端CORS限制 的错误，做进一步的处理（譬如，写日志等）。\n\n```javascript\nfetch('flowers.jpg').then(function (response) {\n    if (response.ok) {\n        return response.blob();\n    }\n    throw new Error('Network response was not ok.');\n}).then(function (myBlob) {\n    var objectURL = URL.createObjectURL(myBlob);\n    myImage.src = objectURL;\n}).catch(function (error) {\n    console.log('There has been a problem with your fetch operation: ', error.message);\n});\n```\n\n---\n\n###### 6、新建Request，发送 http 请求\n\n```javascript\nvar myHeaders = new Headers();\n\nvar myInit = {\n    method: 'GET',\n    headers: myHeaders,\n    mode: 'cors',\n    cache: 'default'\n};\n\nvar myRequest = new Request('flowers.jpg', myInit);\n\nfetch(myRequest).then(function (response) {\n    return response.blob();\n}).then(function (myBlob) {\n    var objectURL = URL.createObjectURL(myBlob);\n    myImage.src = objectURL;\n});\n```\n\n---\n\n##### 四、Headers\n\n###### 1、创建 Headers 对象\n\n```javascript\n// 法一\nvar content = \"Hello World\";\nvar myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"text/plain\");\nmyHeaders.append(\"Content-Length\", content.length.toString());\nmyHeaders.append(\"X-Custom-Header\", \"ProcessThisImmediately\");\n\n// 法二\nmyHeaders = new Headers({\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": content.length.toString(),\n    \"X-Custom-Header\": \"ProcessThisImmediately\",\n});\n```\n\n---\n\n###### 2、Headers对象的方法\n\nHeaders 对象提供的读取、设置、判断等方法。\n\n```javascript\nconsole.log(myHeaders.has(\"Content-Type\")); // true\nconsole.log(myHeaders.has(\"Set-Cookie\")); // false\nmyHeaders.set(\"Content-Type\", \"text/html\");\nmyHeaders.append(\"X-Custom-Header\", \"AnotherValue\");\n\nconsole.log(myHeaders.get(\"Content-Length\")); // 11\nconsole.log(myHeaders.getAll(\"X-Custom-Header\")); // [\"ProcessThisImmediately\", \"AnotherValue\"]\n\nmyHeaders.delete(\"X-Custom-Header\");\nconsole.log(myHeaders.getAll(\"X-Custom-Header\")); // [ ]\n```\n\n---\n\n###### 3、属性报错\n\n设置 Headers 中不支持的属性会报错。\n\n```javascript\nvar myResponse = Response.error();\ntry {\n    myResponse.headers.set(\"Origin\", \"http://mybank.com\");\n} catch (e) {\n    console.log(\"Cannot pretend to be a bank!\");\n}\n```\n\n---\n\n###### 4、数据格式确认\n\n获取到数据后，先做数据格式检查，符合预想格式后再做进一步处理。\n\n```javascript\nfetch(myRequest).then(function (response) {\n    if (response.headers.get(\"content-type\") === \"application/json\") {\n        return response.json().then(function (json) {\n            // 做进一步数据处理\n        });\n    } else {\n        console.log(\"Oops, we haven't got JSON!\");\n    }\n});\n```\n\n---\n\n###### 5、guard 属性\n\nHeaders 对象可用在 请求发送 和 响应接受 中，其有个 guard 属性，用于表示那些参数是只读。\n\n- none：默认的\n- request：从 request 中获得的 headers（Request.headers）只读\n- request-no-cors：从不同域（Request.mode no-cors）的 request 中获得的 headers 只读\n- response：从 response 中获得的 headers（Response.headers）只读\n- immutable：在 ServiceWorkers 中最常用的，所有的 headers 都只读。\n\n---\n\n###### 6、Content-Type\n\nrequest和response（包括 `fetch()` 方法）都会试着自动设置 `Content-Type`。如果没有设置 `Content-Type` 值，发送的请求也会自动设值。\n\n---\n\n##### 五、Response 对象\n\nfetch 发出请求后，返回的是 Response 对象，其常用属性有：\n\n- Response.status  ：整数（默认值为200）为response的状态码。\n- Response.statusText  ：字符串（默认值为\"OK\"），该值与 HTTP 状态码消息对应。\n- Response.ok  ：该属性是来检查response的状态是否在 200 - 299（包括200 和 299）这个范围内。该属性返回一个布尔值。\n\n---\n\n##### 六、body 对象\n\n请求和响应 中都可以有 body 对象，Request 和 Response 对象 都实现了以下方法，用于获取 body 不同格式的内容：arrayBuffer()、blob()、json()、text()、formData()\n\n---\n\n##### 七、检查 fetch 是否可用？\n\n```javascript\nif(self.fetch) {\n    // run my fetch request here\n} else {\n    // do something with XMLHttpRequest?\n}\n```\n\n---\n\n##### 八、其他\n\n###### 1、fetch 与 jQuery.ajax() 的不同点\n\n- fetch() 收到代表错误的 HTTP 状态码（譬如404 或500），会设置 Promise 的 resolve 值为false，但不会reject，只有 网络故障 或 请求被阻止 才会 reject。\n\n- fetch() 可以接受跨域 cookies 和 建立跨域会话。\n- fetch() 只有使用了credentials 选项，才会发送 cookies，但要符合同源( same-origin)规则。\n\n---\n\n###### 2、fetch 与 axios 的区别\n\n[详情，看这里！](https://learn-anything.cn/axios)\n\n---\n\n###### 3、CORS(跨域访问)错误\n\n```\n/* Error:\n  Access to fetch at '×××'\n  from origin '×××' has been blocked by CORS policy: No\n  'Access-Control-Allow-Origin' header is present on the requested\n  resource. If an opaque response serves your needs, set the request's\n  mode to 'no-cors' to fetch the resource with CORS disabled.\n*/\n```\n\n[相关跨域访问的问题，看这里！](https://learn-anything.cn/cors)\n\n---\n\n##### 九、参考文档\n\n- [Fetch_API  说明](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API)\n\n- [Using_Fetch - 文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n- [fetch 方法及参数详细说明](https://developer.mozilla.org/zh-CN/docs/Web/API/fetch)\n\n","url":"https://learn-anything.cn/fetch","published_at":"2021-11-24T01:03:40.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"学习fetch，从这里开始！","slug":"fetch"}},
    "staticQueryHashes": ["63159454"]}
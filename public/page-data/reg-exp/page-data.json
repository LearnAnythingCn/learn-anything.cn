{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/reg-exp",
    "result": {"data":{"strapiArticles":{"id":"Articles_85","title":"正则表达式","description":"正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来提取一大段字符串中，含有的特定格式子字符串。正则表达式是由普通字符以及特殊字符组成的文字模式。\n","content":"##### 一、简介和实例\n\n正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来提取一大段字符串中，含有的特定格式子字符串。正则表达式是由普通字符以及特殊字符组成的文字模式。\n\n###### 1、提取数字部分\n\n```js\n# 从字符串\"abc123def\"中，提取出数字部分\nvar str = \"abc123def\";\nvar patt1 = /[0-9]+/;\ndocument.write(str.match(patt1));\n\n# 输出结果：123\n```\n\n###### 2、找出相邻且相同单词\n\n\n```js\n# Is is the cost of of gasoline going up up?\n# 找出上面字符串中所有相邻两个单词是相同的字符(不区分大小写)\n\nvar str = \"Is is the cost of of gasoline going up up\";\nvar patt1 = /\\b([a-z]+) \\1\\b/ig;\ndocument.write(str.match(patt1));\n\n# 结果\nIs is\nof of\nup up\n\n# 说明\n两个\\b表明了一个单词边界；\n[a-z]+ 表示一个单词；\n([a-z]+) 会匹配字符串中所有单词并存储起来；\n \\1 表示访问上面存储的第一个单词；\n```\n\n###### 3、url识别\n\n```js\nvar str = \"http://www.runoob.com:80/html/html-tutorial.html\";\nvar patt1 = /(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/;\narr = str.match(patt1);\nfor (var i = 0; i < arr.length ; i++) {\n    document.write(arr[i]);\n    document.write(\"<br>\");\n}\n```\n\n###### 4、正则表达式的两种使用方式\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>smallpdf.cn</title>\n</head>\n\n<body>\n\n    <script>\n        // (patt1 等同于 patt2)正则表达式的两种使用方式\n        var str = \"Is is the cost of of gasoline going up up\";\n        var patt1 = /\\b([a-z]+) \\1\\b/ig;\n        document.write(\"实例1：\", str.match(patt1));\n\n        document.write(\"<br><br>\");\n        var patt2 = new RegExp(\"\\\\b([a-z]+) \\\\1\\\\b\", \"ig\")\n        document.write(\"实例2：\"+str.match(patt2));\n\n    </script>\n\n</body>\n\n</html>\n```\n\n###### 5、全局与非全局匹配\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>smallpdf.cn</title>\n</head>\n\n<body>\n\n    <script>\n\n        var str = \"Google smallpdf.cn taobao smallpdf.cn\";\n        var n1 = str.match(/smallpdf.cn/);   // 查找第一次匹配项\n        var n2 = str.match(/smallpdf.cn/g);  // 查找所有匹配项\n\n        document.write(\"实例1：\", n1);\n        document.write(\"<br><br>\");\n        document.write(\"实例2：\", n2);\n\n    </script>\n\n</body>\n\n</html>\n```\n\n###### 6、匹配E-Mail(邮箱)\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>smallpdf.cn</title>\n</head>\n\n<body>\n\n    <script>\n        var str = \"abcd test@runoob.com 1234\";\n        var patt1 = /\\b[\\w.%+-]+@[\\w.-]+\\.[a-zA-Z]{2,6}\\b/g;\n        document.write(str.match(patt1));\n    </script>\n\n</body>\n\n</html>\n```\n\n###### 7、动手验证实践一下\n\n- [动手实践一下 >> ](https://www.runoob.com/try/try.php?filename=tryjsref_regexp4)\n\n---\n\n##### 二、正则语法\n\n###### 1、定位符\n\n定位符可将正则表达式固定在：行首、行尾、一个单词内、单词开头、单词结尾。定位符不能跟限定符一起使用，譬如：`^*`  这是错误的，因为 一个字符串只有1个开始，不存在0个或多个开始。\n\n| 正则   | 含义                                                        | 字符串                          | 正则表达式             | 结果             |\n| ------ | ----------------------------------------------------------- | ------------------------------- | ---------------------- | ---------------- |\n|`^`|表示字符串的开始|\"An E\"|`/^A/`|'A'|\n|`$`|表示字符串的结束|\"eat\"|`/t$/`|'t'|\n|`\\b`|单词的前后边界|“moon”|`/\\bm/`|‘m’（查找m开头单词）|\n|`\\B`|单词的非边界部分|\"noonday\"|`/\\Boo/`|'oo'(单词中包含oo且不在单词边界)|\n|`/`|正则表达式的终止符||||\n|`\\`|转义符，转义后面跟的字符||||\n\n\n\n###### 2、普通字符\n\n| 正则   | 含义                                                        | 字符串                          | 正则表达式             | 结果             |\n| ------ | ----------------------------------------------------------- | ------------------------------- | ---------------------- | ---------------- |\n| `\\d`   | 匹配一个数字，等价于`[0-9]`                                 | \"B2 is the suite number.\"       | `/\\d/`                 | '2'              |\n| `\\D`   | 匹配一个非数字字符，等价于`[^0-9]`                          | \"B2 is the suite number.\"       | `/\\D/`                 | 'B'              |\n| `\\w`   | 匹配一个字符（数字、字母、下划线），等同 `[A-Za-z0-9_]`。 | \"apple,\"                        | `/\\w/`                 | 'a'              |\n| `\\W`   | 匹配一个字符，等价于 `[^A-Za-z0-9_]`。                | \"50%.\"                          | `/\\W/`                 | '%'              |\n| `\\s`   | 匹配一个空白字符（空格、制表符、换页符、换行符）            | \"foo bar.\"                      | `/\\s\\w*/`              | ' bar'           |\n| `[\\S]` | 匹配一个非空白字符                                          | \"foo bar.\"                      | `/\\S\\w*/`              | 'foo'            |\n|`.`|匹配任一字符，换行符(\\n、\\r)除外，等同 `[^\\n\\r]`|\"nay, an apple is on the tree\"|`/.n/`|'an'、'on'|\n|`[abc]`|匹配a、b、c中任一字符，`*`和`.`在括号内只表示字符本身，没有其他特殊意义|\"asdfiobab\"|`/[abc]/`|'a'、'b'、'a'、'b'|\n|`[^abc]`|不包含a、b、c的所有字符||||\n|`[A-Z]`|匹配A到Z中任一字符||||\n|`[a-z]`|匹配a到z中任一字符||||\n|`[0-9]`|匹配0到9中任一数字||||\n\n\n\n  ###### 3、限定符\n\n|正则|含义| 字符串 | 正则表达式 |匹配结果|\n|---| ------ | ---------- |------|---|\n|`？`|匹配 0 或 1 次<br>等同 `{0,1}`。|\"angel\"|`/e?le?/`|'el'|\n|`*`|匹配 0 次或多次<br>等同 `{0,}`|\"<p>smallpdf.cn</p>\"|`/<.*>/`|'<p>smallpdf.cn</p>'|\n|`*?`|消除贪婪，匹配尽可能少| \"<p>smallpdf.cn<p>\" | `/<.*?>/` | '<p>' 和 '</p>' |\n|`+`|匹配次数≥1，等同 `{1,}`| \"<p>smallpdf.cn</p>\" | `/<.+>/` |'<p>smallpdf.cn</p>'|\n|`+?`|消除贪婪，匹配尽可能少|\"<p>smallpdf.cn</p>\"|`/<.+?>/`|'<p>' 和 '</p>'|\n|`{n}`|n是正整数，匹配次数 = n||||\n|`{n,}`|n是正整数，匹配次数 ≥ n||||\n|`{n,m}`|n和m都是整数<br>n ≤ 匹配次数 ≤ m<br>n或m为0，忽略||||\n\n\n\n###### 4、逻辑运算\n\n|正则|含义| 字符串 | 正则表达式 |匹配结果|\n|:---| :----- |:----------|:---|:---|\n|`x|y`|匹配 x 或  y|\"red apple\"|`/green|red/`|'red'|\n|`(x)`|匹配x，并存储匹配值，<br>`\\数字` 来访问存储值，<br>`\\1`是指第一个存储值。|看下面实例|                    ||\n|`\\num`|返回第num个缓存值，num是整数从1开始。|\"apple, orange, cherry, peach.\"|`/apple(,)\\sorange\\1/`|'apple, orange,'|\n|`(?:x)`|匹配x，但不存匹配字符，<br>`industry|industries` <br>= `industr(?:y|ies) `||||\n|`x(?=y)`|匹配 x 且后面是 y，不存匹配值|\"JackSpa\"|`/Jack(?=Spa)/`|'Jack'|\n| `x(?!y)`  | 匹配 x 且后面不是 y，不存匹配值                              | \"JackSp\" | `/Jack(?!Spa)/` | 'Jack' |\n| `(?<=y)x` | 匹配 x 且前面是 y，不存匹配值                                | \"JackSpa\" | `/(?<=Jack)Spa/` | 'Spa'   |\n| `(?<!y)x` | 匹配 x 且前面不是 y ，不存匹配值                             | \"JacSpa\" | `/(?<!Jack)Spa/` | 'Spa'  |\n\n\n\n###### 5、非打印字符\n\n| 正则   | 含有                 |\n| :------ | :-------------------- |\n| `[\\b]` | 匹配一个退格(U+0008) |\n|`\\f`|匹配一个换页符 (U+000C)|\n|`\\n`|匹配一个换行符 (U+000A)|\n|`\\r`|匹配一个回车符 (U+000D)|\n|`\\t`|匹配一个水平制表符 (U+0009)|\n|`\\v`|匹配一个垂直制表符 (U+000B)|\n|`\\0`|匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 `\\0<digits>` 是一个八进制转义序列。|\n|`\\xhh`|匹配一个两位十六进制数（\\x00-\\xFF）表示的字符|\n|`\\uhhhh`|匹配一个四位十六进制数表示的 UTF-16 代码单元|\n|`\\u{hhhh}`|匹配一个十六进制数表示的 Unicode 字符|\n\n\n###### 6、模式设定\n\n| 正则 | 含有 |\n| ---- | ---- |\n| `g`  | 表示全局搜索选项或标记，将在整个字符串查找并返回所有匹配结果。 |\n|`i`|表示不区分大小写|\n|`m`|多行搜索|\n|`s`|允许 `.` 匹配换行符|\n|`u`|使用unicode码的模式进行匹配|\n|`y`|执行“粘性(`sticky`)”搜索,匹配从目标字符串的当前位置开始。|\n\n\n\n###### 7、运算符的优先级\n\n正则表达式从左到右进行计算，优先级高的先运算，相同优先级从左到右进行，下表从上之下，优先级依次递减，同一行优先级相同：\n\n| 正则原算法 |\n| ---- |\n|   `\\`   |\n|  `()`  ` []`    |\n| `^` `$` `\\`      |\n|    `|`  |\n\n\n\n##### 三、参考文档\n\n- [正则表达式 - 语法说明1](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n- [正则表达式 - 语法说明2](https://www.runoob.com/regexp/regexp-syntax.html)\n\n- [正则表达式 - 在线测试工具1](https://regexr.com/)\n\n- [正则表达式 - 在线测试工具2](https://regex101.com/)\n\n\n","url":"https://learn-anything.cn/reg-exp","author":null,"published_at":"2021-10-03T02:51:05.000Z","tags":[{"name":"正则表达式","slug":"reg-exp"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"正则表达式","slug":"reg-exp"}},
    "staticQueryHashes": ["63159454"]}
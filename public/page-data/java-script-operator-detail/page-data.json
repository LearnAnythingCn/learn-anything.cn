{
    "componentChunkName": "component---src-templates-article-article-detail-gen-js",
    "path": "/java-script-operator-detail",
    "result": {"data":{"strapiArticles":{"id":"Articles_522","title":"JavaScript运算符详解","description":"JavaScript运算符详解","content":"##### 一、运算符\n\n###### 1、delete\n\n功能：用于删除对象属性，成功返回true，失败返回false。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n\n```js\n// 1、删除自定义属性\nconst Employee = {\n  firstname: 'John',\n  lastname: 'Doe'\n};\n\ndelete Employee.firstname;\ndelete Employee['lastname'];\nconsole.log(Employee.firstname);\t\t// undefined\nconsole.log(Employee['lastname']);\t// undefined\n\nname = 'joke';\nconsole.log(this.name);\t// joke\ndelete name;\nconsole.log(this.name);\t// undefined\n```\n\n```js\n// 2、删除自定义属性，不影响原型链\nconst Employee = {\n  firstname: 'John',\n  lastname: 'Doe'\n};\n\nvar emp = Object.create(Employee);\nemp.firstname = \"nameEmp\";\nconsole.log(delete emp.firstname);  // true\nconsole.log(emp.firstname);         // John\nconsole.log(delete emp.lastname);   // true\nconsole.log(emp.lastname);          // Doe\n\n// 原型链属性要这样删除\nconsole.log(delete Object.getPrototypeOf(emp).lastname);    // true\nconsole.log(emp.lastname);  // undefined\n```\n\n```js\n// 3、不可删除 不可配置 的属性 configurable: false\nvar Employee = {};\nObject.defineProperty(Employee, 'name', {configurable: false});\nconsole.log(delete Employee.name);  // returns false\n```\n\n```js\n// 4、不可删除 var、const、let 定义的属性\nvar nameVar = 'xyz';\nconst nameConst = 'xyz';\nlet nameLet = 'xyz';\n\nconsole.log(delete nameVar);\nconsole.log(delete nameConst);\nconsole.log(delete nameLet);\nconsole.log(nameVar);   // xyz\nconsole.log(nameConst); // xyz\nconsole.log(nameLet);   // xyz\n\n// 因为这些属性都是不可配置的  configurable: false\nconsole.log(Object.getOwnPropertyDescriptor(window, 'nameVar'));\n// 输出：{value: 'xyz', writable: true, enumerable: true, configurable: false}\n```\n\n```js\n// 5、不能删除 静态属性\ndelete Math.PI; // 返回 false\n```\n\n---\n\n###### 2、void\n\n功能：可以把语句变成表达式。三个使用场景：\n\n- [立即调用函数表达式](https://learn-anything.cn/java-script-function)  ：void 可以让 function 关键字从函数声明变成函数表达式。\n\n- URI：如下代码，虽然可行，但是不推荐。推荐做法是给元素增加事件进行相关操作。\n\n\n```html\n<a href=\"javascript:void(0);\">\n  这个链接点击之后不会做任何事情，如果去掉 void()，\n  点击之后整个页面会被替换成一个字符 0。\n</a>\n<p> chrome中即使<a href=\"javascript:0;\">也没变化，firefox中会变成一个字符串0 </p>\n<a href=\"javascript:void(document.body.style.backgroundColor='green');\">\n  点击这个链接会让页面背景变成绿色。\n</a>\n```\n\n- 箭头函数中避免误用\n\n  当箭头函数被用在不需要返回值的环境中时，正确写法：`()=> void doSomething();`  确保返回的是 undefined，就算给 doSomething 函数，增加 return 语句，也不会影响以前使用 doSomething 的地方。\n\n- [更多内容，看这里！](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void)\n\n---\n\n###### 3、typeof\n\n功能：返回操作数的类型字符串。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n\n```js\n// 1、在数据声明之前调用 typeof，会有异常产生\ntypeof newLetVariable;      // ReferenceError\ntypeof newConstVariable;    // ReferenceError\ntypeof newClass;            // ReferenceError\n\nlet newLetVariable;\nconst newConstVariable = 'hello';\nclass newClass{};\n```\n\n```js\n// 2、除 Function 外的所有构造函数的类型都是 'object'\nvar str = new String('String');\nvar num = new Number(100);\nconsole.log(typeof str); // 返回 'object'\nconsole.log(typeof num); // 返回 'object'\n\nvar func = new Function();\nconsole.log(typeof func); // 返回 'function'\n```\n\n```js\n// 3、其他常用类型\ntypeof 3.14 === 'number';\ntypeof 'bla' === 'string';\ntypeof true === 'boolean';\ntypeof {a: 1} === 'object';\ntypeof [1, 2, 4] === 'object';\ntypeof new Date() === 'object';\ntypeof /regex/ === 'object'; // 历史结果请参阅正则表达式部分\n```\n\n---\n\n###### 4、++\n\n功能：前置自增，运算前自增；后置自增，运算后自增。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment)\n\n```js\n// 前置自增\nlet a = 3;\nconst b = ++a;\nconsole.log(`a:${a}, b:${b}`);\t// a:4, b:4\n\n// 后置自增\nlet x = 3;\nconst y = x++;\nconsole.log(`x:${x}, y:${y}`);\t// x:4, y:3\n```\n\n---\n\n###### 5、--\n\n功能：前置自减，运算前自减；后置自减，运算后自减。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)\n\n```js\n// 前置自减\nlet a = 3;\nconst b = --a;\nconsole.log(`a:${a}, b:${b}`);\t// a:2, b:2\n\n// 后置自减\nlet x = 3;\nconst y = x--;\nconsole.log(`x:${x}, y:${y}`);\t// x:2, y:3\n```\n\n---\n\n###### 6、+\n\n功能：1、转换为数字；2、加法；3、连接字符串。[Unary_plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus)  、[Addition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition)\n\n```js\n// 1、将数据转换成数字。\nconst x = 1;\nconst y = -1;\nconsole.log(+x);    // 1\nconsole.log(+y);    // -1\nconsole.log(+true); // 1\nconsole.log(+false);// 0\nconsole.log(+null); // 0\nconsole.log(+function(val){ return val }); // NaN\nconsole.log(+1n);   // throws TypeError: Cannot convert BigInt value to number\n\n// 2、数字求和\nconsole.log(2 + 2);\t// 4\n\n// 3、连接字符串\nconsole.log('hello ' + 'everyone');\t// hello everyone\n```\n\n---\n\n###### 7、-\n\n功能：1、转换成数字；2、减法。[Unary_negation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)  、[Subtraction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction)\n\n```js\n// 1、将数据转换成负数。\nconst x = 4;\nconst y = -x;\nconsole.log(y);  // -4\n\nconst a = '4';\nconst b = -a;\nconsole.log(b);  // -4\n\n// 2、减法操作\nconsole.log(5 - 3);\t\t// 2\nconsole.log(3.5 - 5);\t// -1.5\nconsole.log(5 - 'hello');\t// NaN\nconsole.log(5 - true);\t\t// 4\n```\n\n---\n\n###### 8、~\n\n功能：按位进行非操作，反转其操作数的位。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT)\n\n```js\nconst a = 5;     // 00000000000000000000000000000101\nconsole.log(~a); // 11111111111111111111111111111010\n// 输出: -6\n\nconst b = -3;    // 11111111111111111111111111111101\nconsole.log(~b); // 00000000000000000000000000000010\n// 输出: 2\n```\n\n---\n\n###### 9、!\n\n功能：逻辑非，对操作数进行否定操作。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT)\n\n```js\nconsole.log(!null); // true\nconsole.log(!NaN); // true\nconsole.log(!0); // true\nconsole.log(!\"\"); // true\nconsole.log(!''); // true\nconsole.log(!``); // true\nconsole.log(!undefined); // true\n```\n\n---\n\n###### 10、!!\n\n功能：逻辑双非，强制转换操作数为bool类型。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!)\n\n```js\nconsole.log(!!true );                   // true\nconsole.log(!!{} );                     // true\nconsole.log(!!(new Boolean(false)) );   // true\nconsole.log(!!false );                  // false\nconsole.log(!!\"\" );                     // false\nconsole.log(!!Boolean(false));          // false\n```\n\n---\n\n###### 11、/\n\n功能：除法。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division)\n\n```js\nconsole.log(6 / '3');\t// 2\nconsole.log(2 / 0);\t\t// Infinity\n```\n\n---\n\n###### 12、*\n\n功能：乘法。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication)\n\n```js\nconsole.log('3' * 2);\t\t// 6\nconsole.log('foo' * 2);\t// NaN\n```\n\n---\n\n###### 13、%\n\n功能：取模。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n\n```js\nconsole.log(-13 % 5);\t// -3\nconsole.log(4 % 2);\t\t// 0\n```\n\n---\n\n###### 14、**\n\n功能：求幂。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)\n\n```js\nconsole.log(3 ** 4);\t\t\t\t// 81\nconsole.log(10 ** -2);\t\t\t// 0.01\nconsole.log(2 ** 3 ** 2);\t\t// 512\nconsole.log((2 ** 3) ** 2);\t// 64\n```\n\n---\n\n###### 15、in\n\n功能：判断对象是否含有某个属性(包括原型链中的属性)，存在就返回true。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in)\n\n```js\nconst car = { make: 'Honda', model: 'Accord', year: 1998 };\nconsole.log('make' in car);\t// true\n\ndelete car.make;\nif ('make' in car === false) {\n  car.make = 'Suzuki';\n}\nconsole.log(car.make);\t// Suzuki\n```\n\n---\n\n###### 16、instanceof\n\n功能：判断对象及其原型链上是否存在某个类型，存在就返回true。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nconst auto = new Car('Honda', 'Accord', 1998);\n\nconsole.log(auto instanceof Car);\t\t\t// true\nconsole.log(auto instanceof Object);\t// true\n```\n\n---\n\n###### 17、<\n\n功能：小于。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than)\n\n```js\nconsole.log(5 < 3);\t\t\t\t// false\nconsole.log(3 < 3);\t\t\t\t// false\n// 注意：并不是所有浏览器都支持 binint 类型\nconsole.log(3n < 5);\t\t\t// true\nconsole.log('aa' < 'ab');\t//  true\n```\n\n---\n\n###### 18、>\n\n功能：大于。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than)\n\n```js\nconsole.log(5 > 3);\t\t\t\t// true\nconsole.log(3 > 3);\t\t\t\t// false\n// 注意：并不是所有浏览器都支持 binint 类型\nconsole.log(3n > 5);\t\t\t// false\nconsole.log('ab' > 'aa');\t// true\n```\n\n---\n\n###### 19、<=\n\n功能：小于等于。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal)\n\n```js\nconsole.log(5 <= 3);\t\t\t// false\nconsole.log(3 <= 3);\t\t\t// true\n// 注意：并不是所有浏览器都支持 binint 类型\nconsole.log(3n <= 5);\t\t\t// true\nconsole.log('aa' <= 'ab');// true\n```\n\n---\n\n###### 20、>=\n\n功能：大于等于。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal)\n\n```js\nconsole.log(5 >= 3);\t\t\t\t// true\nconsole.log(3 >= 3);\t\t\t\t// true\n// 注意：并不是所有浏览器都支持 binint 类型\nconsole.log(3n >= 5);\t\t\t\t// false\nconsole.log('ab' >= 'aa');\t// true\n```\n\n---\n\n###### 21、==\n\n功能：检查其两个操作数是否相等，返回布尔结果。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality)\n\n```js\nconsole.log(1 == 1);\t\t// true\nconsole.log('1' ==  1);\t// true\nconsole.log(0 == false);// true\nconsole.log('hello' == 'hello');\t// true\n```\n\n---\n\n###### 22、!=\n\n功能：检查其两个操作数是否不相等，返回布尔结果。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality)\n\n```js\nconsole.log(1 != 1);\t\t\t// false\nconsole.log('1' !=  1);\t\t// false\nconsole.log(0 != false);\t// false\nconsole.log('hello' != 'hello');\t// false\n```\n\n---\n\n###### 23、===\n\n功能：检查其两个操作数是否相等(包括类型)，返回布尔结果。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)\n\n```js\nconsole.log(1 === 1);\t\t\t// true\nconsole.log('1' ===  1);\t// false\nconsole.log(0 === false);\t// false\nconsole.log('hello' === 'hello');\t// true\n```\n\n---\n\n###### 24、!==\n\n功能：检查其两个操作数是否不相等(包括类型)，返回布尔结果。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality)\n\n```js\nconsole.log(1 !== 1);\t\t\t// false\nconsole.log('1' !==  1);\t// true\nconsole.log(0 !== false);\t// true\nconsole.log('hello' !== 'hello');\t// false\n```\n\n---\n\n###### 25、<<\n\n功能：按位向左补零移动指定位数，符号位不变。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift)\n\n```js\nconst a = 5;         // 00000000000000000000000000000101\nconst b = 2;\nconsole.log(a << b); // 00000000000000000000000000010100\n// 输出: 20\n```\n\n---\n\n###### 26、>>\n\n功能：按位向右补零移动指定位数，符号位不变。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)\n\n```js\nconst b = 2;\nconst a = 5;          //  00000000000000000000000000000101\nconsole.log(a >> b);  //  00000000000000000000000000000001\n// 输出: 1\n\nconst c = -5;         // -00000000000000000000000000000101\nconsole.log(c >> b);  // -00000000000000000000000000000010\n// 输出: -2\n```\n\n---\n\n###### 27、>>>\n\n功能：按位向右补零移动指定位数，符号位变为 0。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift)\n\n```js\nconst b = 2;\nconst a = 5;          //  00000000000000000000000000000101\nconsole.log(a >>> b); //  00000000000000000000000000000001\n// 输出: 1\n\nconst c = -5;         // -00000000000000000000000000000101\nconsole.log(c >>> b); //  00111111111111111111111111111110\n// 输出: 1073741822\n```\n\n---\n\n###### 28、&\n\n功能：按位与操作(两个都为1，才返回1)。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND)\n\n```js\nconst a = 5;        // 00000000000000000000000000000101\nconst b = 3;        // 00000000000000000000000000000011\nconsole.log(a & b); // 00000000000000000000000000000001\n// 输出: 1\n```\n\n---\n\n###### 29、|\n\n功能：按位或操作(有一个为1，就返回1)。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR)\n\n```js\nconst a = 5;        // 00000000000000000000000000000101\nconst b = 3;        // 00000000000000000000000000000011\nconsole.log(a | b); // 00000000000000000000000000000111\n// 输出: 7\n```\n\n---\n\n###### 30、^\n\n功能：按位异或操作(相同为1，不同为0)。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR)\n\n```js\nconst a = 5;        // 00000000000000000000000000000101\nconst b = 3;        // 00000000000000000000000000000011\nconsole.log(a ^ b); // 00000000000000000000000000000110\n// 输出: 6\n```\n\n---\n\n###### 31、&&\n\n功能：所有操作数都为true时，才返回true。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND)\n\n```js\nconst a = 3;\nconst b = -2;\nconsole.log(a > 0 && b > 0);\t// false\n```\n\n---\n\n###### 32、||\n\n功能：只要有一个操作数为true，就返回ture。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)\n\n```js\nconst a = 3;\nconst b = -2;\nconsole.log(a > 0 || b > 0);\t// true\n```\n\n---\n\n###### 33、??\n\n功能：当左侧操作数为 null 或者 undefined 时，返回右侧操作数，否则返回左侧操作数。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator)\n\n```js\nconst foo = null ?? 'default string';\nconsole.log(foo);\t// \"default string\"\nconst baz = 0 ?? 42;\nconsole.log(baz);\t// 0\n```\n\n---\n\n###### 34、?:\n\n功能：根据条件选择结果。[更多...](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)\n\n```js\nfunction getFee(isMember) {\n  return (isMember ? '$2.00' : '$10.00');\n}\nconsole.log(getFee(true));\t// \"$2.00\"\nconsole.log(getFee(false));\t// \"$10.00\"\nconsole.log(getFee(null));\t// \"$10.00\"\n```\n\n---\n\n###### 35、?.\n\n功能：确保访问深层属性不会有异常。不能用于未声明的根对象，但可以用于未定义的根对象。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)\n\n```js\n// 语法\nobj.val?.prop\nobj.val?.[expr]\nobj.arr?.[index]\nobj.func?.(args)\n```\n\n```js\n// 实例\nlet temp = obj.first;\nlet nestedProp = ((temp === null || temp === undefined) ? undefined : temp.second);\n\n// 下面代码等价于上面\n// 作用：确保 first 为null或undefined时，不会有异常。\nlet nestedProp1 = obj.first?.second;\n```\n\n---\n\n###### 36、=\n\n功能：用于变量赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)\n\n```js\nlet x = 2;\nconst y = 3;\nconsole.log(x);\t\t// 2\nconsole.log(x = y + 1); // 4\nconsole.log(x = x * y); // 12\n```\n\n---\n\n###### 37、*=\n\n功能：乘法赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment)\n\n```js\nlet a = 2;\nconsole.log(a *= 3);\t// 6\nconsole.log(a *= 'hello');\t// NaN\n```\n\n---\n\n###### 38、**=\n\n功能：求幂赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment)\n\n```js\nlet a = 3;\nconsole.log(a **= 2);\t// 9\nconsole.log(a **= 0);\t// 1\nconsole.log(a **= 'hello');\t// NaN\n```\n\n---\n\n###### 39、/=\n\n功能：除法赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment)\n\n```js\nlet a = 3;\nconsole.log(a /= 2);\t// 1.5\nconsole.log(a /= 0);\t// Infinity\nconsole.log(a /= 'hello');\t// NaN\n```\n\n---\n\n###### 40、%=\n\n功能：取模赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment)\n\n```js\nlet a = 3;\nconsole.log(a %= 2);\t// 1\nconsole.log(a %= 0);\t// NaN\nconsole.log(a %= 'hello');\t// NaN\n```\n\n---\n\n###### 41、+=\n\n功能：1、加法赋值；2、连接字符串。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment)\n\n```js\nlet a = 2;\nlet b = 'hello';\nconsole.log(a += 3); // 5\nconsole.log(b += ' world'); // \"hello world\"\n```\n\n---\n\n###### 42、-=\n\n功能：减法赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment)\n\n```js\nlet a = 2;\nconsole.log(a -= 3);\t// -1\nconsole.log(a -= 'Hello');\t// NaN\n```\n\n---\n\n###### 43、<<=\n\n功能：按位左移指定位数后进行赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment)\n\n```js\nlet a = 5; // 00000000000000000000000000000101\na <<= 2;   // 00000000000000000000000000010100\nconsole.log(a);\t// 20\n```\n\n---\n\n###### 44、>>=\n\n功能：按位右移指定位数后进行赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment)\n\n```js\nlet a = 5;      //  00000000000000000000000000000101\na >>= 2;        //  00000000000000000000000000000001\nconsole.log(a);\t// 1\n\nlet b = -5;     // -00000000000000000000000000000101\nb >>= 2;        // -00000000000000000000000000000010\nconsole.log(b);\t// -2\n```\n\n###### 45、>>>=\n\n功能：无符号位，按位右移指定位数后进行赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment)\n\n```js\nlet a = 5; //  00000000000000000000000000000101\na >>>= 2;  //  00000000000000000000000000000001\nconsole.log(a);\t// 1\n\nlet b = -5; // -00000000000000000000000000000101\nb >>>= 2;   //  00111111111111111111111111111110\nconsole.log(b);// 1073741822\n```\n\n---\n\n###### 46、&=\n\n功能：按位与操作后赋值(都为1，才返回1)。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment)\n\n```js\nlet a = 5;      // 00000000000000000000000000000101\na &= 3;         // 00000000000000000000000000000011\n\nconsole.log(a); // 00000000000000000000000000000001\n// 输出: 1\n```\n\n---\n\n###### 47、^=\n\n功能：按位异或操作后赋值(不同为1，相同为0)。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment)\n\n```js\nlet a = 5;      // 00000000000000000000000000000101\na ^= 3;         // 00000000000000000000000000000011\n\nconsole.log(a); // 00000000000000000000000000000110\n// 输出: 6\n```\n\n---\n\n###### 48、|=\n\n功能：按位或操作后赋值(有一个为1，即为1)。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment)\n\n```js\nlet a = 5;      // 00000000000000000000000000000101\na |= 3;         // 00000000000000000000000000000011\n\nconsole.log(a); // 00000000000000000000000000000111\n// 输出: 7\n```\n\n###### 49、&&=\n\n功能：逻辑与 赋值，仅在左边操作数为true时，进行赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment)\n\n```js\nlet a = 1;\nlet b = 0;\n\na &&= 2;\nconsole.log(a);// 2\n\nb &&= 2;\nconsole.log(b);// 0\n```\n\n---\n\n###### 50、||=\n\n功能：逻辑或 赋值，仅在左边操作数为false时，进行赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment)\n\n```js\nconst a = { duration: 50, title: '' };\n\na.duration ||= 10;\nconsole.log(a.duration);\n// expected output: 50\n\na.title ||= 'title is empty.';\nconsole.log(a.title);\n// expected output: \"title is empty\"\n```\n\n---\n\n###### 51、??=\n\n功能：无效赋值，仅在左边操作数为空(null或undefined)时，进行赋值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment)\n\n```js\nconst a = { duration: 50 };\n\na.duration ??= 10;\nconsole.log(a.duration);\t// 50\n\na.speed ??= 25;\nconsole.log(a.speed);\t\t\t// 25\n```\n\n---\n\n###### 52、[]=[]\n\n功能：解构赋值，从阵列解构为变量。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n```js\nlet a, b, rest;\n[a, b] = [10, 20];\nconsole.log(a);\t// 10\nconsole.log(b);\t// 20\n\n[a, b, ...rest] = [10, 20, 30, 40, 50];\nconsole.log(rest);\t// Array [30,40,50]\n```\n\n---\n\n###### 53、,\n\n功能：逗号运算符，从左到右计算表达式，并返回最后一个值。[更多...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator)\n\n```js\nlet x = 1;\nx = (x++, x);\nconsole.log(x);\t// 2\n\nx = (2, 3);\nconsole.log(x);\t// 3\n\nfunction myFunc() {\n  var x = 0;\n  return (x += 1, x); // the same as return ++x;\n}\n```\n\n---\n\n##### 二、参考文档\n\n- [Operators  -  MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators)\n\n\n","url":"https://learn-anything.cn/java-script-operator-detail","author":null,"published_at":"2021-12-25T02:54:57.000Z","tags":[{"name":"JavaScript","slug":"java-script"}]},"site":{"siteMetadata":{"title":"收集优质资源","author":"@learn-anything.cn","description":"追求极简语言，说明事物因果！","email":"lh@learn-anything.cn"}}},"pageContext":{"title":"JavaScript运算符详解","slug":"java-script-operator-detail"}},
    "staticQueryHashes": ["63159454"]}